{"id": "3a08574b-4e1e-4a0e-950f-a1597672e82d", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (upper - lower) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search (vectorized)\n            candidate = np.clip(\n                [best_x, best_y] + np.random.uniform(-local_search_range, local_search_range, size=2),\n                lower, upper\n            )\n            x, y = candidate\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "6abc5171-3786-4ca4-a911-cec04eb37a39", "generation": 3, "timestamp": 1755447821.3965216, "iteration_found": 40, "metrics": {"runs_successfully": 1.0, "value_score": 0.9917169382312815, "distance_score": 0.9326701466659273, "overall_score": 0.9927589928218359, "standard_deviation_score": 0.9512974219757795, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9637949641091791, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 6 lines with 7 lines\nChange 2: Replace 3 lines with 6 lines\nChange 3: Replace 2 lines with 2 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9956910782086864, "distance_score": 0.9445408932746339, "overall_score": 0.994167613311962, "standard_deviation_score": 0.958784382703239, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9708380665598099, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9957\n- distance_score: 0.9445\n- overall_score: 0.9942\n- standard_deviation_score: 0.9588\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9708\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9954, distance_score: 0.9345, overall_score: 0.9934, standard_deviation_score: 0.9566, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9668, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9951, distance_score: 0.9387, overall_score: 0.9936, standard_deviation_score: 0.9551, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9678, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9957, distance_score: 0.9445, overall_score: 0.9942, standard_deviation_score: 0.9588, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9708, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9849)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9957), Performs well on distance_score (0.9445), Performs well on overall_score (0.9942), Performs well on standard_deviation_score (0.9588), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9708), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9834)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter\n    local_search_range = (bounds[1] - bounds[0]) * 0.1  # 10% of search range\n\n    for _ in range(iterations):\n        # Hybrid search - random global search with occasional local exploration\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9951), Performs well on distance_score (0.9387), Performs well on overall_score (0.9936), Performs well on standard_deviation_score (0.9551), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9678), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9830)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - random global search with occasional local exploration\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9954), Performs well on distance_score (0.9345), Performs well on overall_score (0.9934), Performs well on standard_deviation_score (0.9566), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9668), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9827)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter\n    local_search_range = (upper - lower) * 0.1  # 10% of search range\n\n    for _ in range(iterations):\n        # Hybrid search - random global search with occasional local exploration\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search (vectorized)\n            x, y = np.clip(\n                [best_x, best_y] + np.random.uniform(-local_search_range, local_search_range, size=2),\n                lower, upper\n            )\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9826)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9782, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new candidate point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n        x, y = point\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            # Local search: explore nearby points when improvement found\n            for _ in range(5):  # Small number of local searches\n                local_point = point + np.random.normal(0, 0.1, size=2)\n                # Keep within bounds\n                local_point = np.clip(local_point, bounds[0], bounds[1])\n                local_value = evaluate_function(*local_point)\n                if local_value < best_value:\n                    best_value = local_value\n                    best_x, best_y = local_point\n                    point = local_point  # Continue search from new best point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 10 lines\nChange 2: Replace 3 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n### Inspiration 2 (Score: 0.7476, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    for _ in range(iterations):\n        # Generate new random candidate point\n        xy = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n        else:\n            # Small chance to take a worse solution to escape local minima\n            if np.random.random() < 0.05:  # 5% probability\n                # Take a step towards the new point from current best\n                best_x = 0.8 * best_x + 0.2 * x\n                best_y = 0.8 * best_y + 0.2 * y\n                best_value = evaluate_function(best_x, best_y)\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 10 lines\nChange 2: Replace 3 lines with 10 lines, Excellent runs_successfully (1.000), Excellent speed_score (1.000)\n\n\n### Inspiration 3 (Score: 0.9827, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter\n    local_search_range = (upper - lower) * 0.1  # 10% of search range\n\n    for _ in range(iterations):\n        # Hybrid search - random global search with occasional local exploration\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search (vectorized)\n            x, y = np.clip(\n                [best_x, best_y] + np.random.uniform(-local_search_range, local_search_range, size=2),\n                lower, upper\n            )\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.995), Excellent distance_score (0.938)\n\n\n### Inspiration 4 (Score: 0.9581, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search - generate both coordinates at once\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.970)\n\n\n### Inspiration 5 (Score: 0.8737, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random candidate point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.953), Excellent overall_score (0.954)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To improve readability and maintainability while preserving performance, here are targeted simplifications:\n\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n=======\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (upper - lower) * 0.1\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n=======\n            # Explore around best point with local search (vectorized)\n            candidate = np.clip(\n                [best_x, best_y] + np.random.uniform(-local_search_range, local_search_range, size=2),\n                lower, upper\n            )\n            x, y = candidate\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n=======\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n>>>>>>> REPLACE\n\nThese changes:\n1. Unpack bounds into named variables (lower/upper) for clarity and to reduce repeated indexing\n2. Vectorize the local search calculation to eliminate redundant code\n3. Maintain the exact algorithm behavior and performance characteristics\n4. Improve readability through consistent variable naming and reduced repetition\n\nThe core hybrid search algorithm (20% local/80% global) remains unchanged, preserving the performance metrics that are already performing well. These changes focus solely on the identified improvement area of code simplification and maintainability."]}}}