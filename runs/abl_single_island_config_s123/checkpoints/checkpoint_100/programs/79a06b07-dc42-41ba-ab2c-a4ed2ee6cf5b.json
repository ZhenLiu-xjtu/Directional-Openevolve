{"id": "79a06b07-dc42-41ba-ab2c-a4ed2ee6cf5b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm with adaptive exploration-exploitation balance.\n    \n    This algorithm combines global random search with local refinement around\n    promising solutions, gradually shifting from exploration to exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - The coordinates and value of the minimum found\n    \"\"\"\n    # Unpack bounds and initialize with random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters (10% of search range)\n    initial_local_range = (upper - lower) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range around best found point\n            local_search_range = initial_local_range * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), lower, upper)\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "16cfc169-196d-485b-a93f-895ffe8fe134", "generation": 4, "timestamp": 1755448200.305519, "iteration_found": 99, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994832893120782, "distance_score": 0.9885847376297614, "overall_score": 0.9987365654016671, "standard_deviation_score": 0.9892950878934577, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9936828270083354, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 29 lines with 27 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9995779939801589, "distance_score": 0.9902228611295679, "overall_score": 0.9990024419001204, "standard_deviation_score": 0.9929095510609871, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9950122095006019, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9996\n- distance_score: 0.9902\n- overall_score: 0.9990\n- standard_deviation_score: 0.9929\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9950\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9921, overall_score: 0.9992, standard_deviation_score: 0.9941, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9959, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9917, overall_score: 0.9992, standard_deviation_score: 0.9948, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9959, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9928, overall_score: 0.9992, standard_deviation_score: 0.9942, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9962, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9980)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add adaptive search parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (30% to 10%)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search with decreasing range\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Local search using normal distribution for refinement\n            xy = best_xy + np.random.normal(0, local_search_range/2, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9928), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9942), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9962), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9979)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining global exploration and local refinement.\n    \n    Performs random global search with occasional local exploration around \n    the current best solution to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add adaptive search parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (30% to 10%)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search with decreasing range\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Local search using normal distribution for refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9917), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9948), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9959), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9979)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive exploration parameters (10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range using normal distribution for refinement\n            local_search_range = initial_local_range * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9921), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9941), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9959), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter with adaptive range (starts at 10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with local search\n            # Explore around best point with local search using normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_xy)\n    best_x, best_y = best_xy\n\n    # Add adaptive exploration parameters (10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range using normal distribution for refinement\n            local_search_range = initial_local_range * (1 - i/iterations)\n            xy = best_xy + np.random.normal(0, local_search_range/2, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n            x, y = xy\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            x, y = xy\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9980, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add adaptive search parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (30% to 10%)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search with decreasing range\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Local search using normal distribution for refinement\n            xy = best_xy + np.random.normal(0, local_search_range/2, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 14 lines with 30 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9972, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters\n    initial_local_range = (upper - lower) * 0.1  # 10% of search range\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), lower, upper)\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 11 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 3 (Score: 0.9966, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random points\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters (starts at 10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with local search\n            # Explore around best point with normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.999), Excellent distance_score (0.987)\n\n\n### Inspiration 4 (Score: 0.9976, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining global exploration and local refinement.\n    \n    Performs random global search with occasional local exploration around \n    the current best solution to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add adaptive search parameters\n    initial_local_range = (upper - lower) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (30% to 10%)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search with decreasing range\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Local search using normal distribution for refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), lower, upper)\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 5 (Score: 0.9910, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive search parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (30% to 10%)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search with decreasing range\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Local search using normal distribution for refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 6 lines with 11 lines\nChange 2: Replace 3 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm with adaptive exploration-exploitation balance.\n    \n    This algorithm combines global random search with local refinement around\n    promising solutions, gradually shifting from exploration to exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - The coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add adaptive local exploration parameters (10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range around best found point\n            local_search_range = initial_local_range * (1 - i/iterations)\n            xy = best_xy + np.random.normal(0, local_search_range/2, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the identified areas for improvement and reverse the metric regressions, I recommend simplifying the code by removing redundant variables while maintaining the core algorithm logic that made Program 1 the top performer.\n\n```python\n<<<<<<< SEARCH\n    # Initialize with random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add adaptive local exploration parameters (10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range around best found point\n            local_search_range = initial_local_range * (1 - i/iterations)\n            xy = best_xy + np.random.normal(0, local_search_range/2, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = x, y\n=======\n    # Unpack bounds and initialize with random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters (10% of search range)\n    initial_local_range = (upper - lower) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Local search with adaptive range around best found point\n            local_search_range = initial_local_range * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), lower, upper)\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n```\n\nKey improvements made:\n1. Removed redundant `best_xy` array by working directly with individual coordinates, simplifying the code and eliminating potential sources of inconsistency\n2. Unpacked bounds tuple into `lower` and `upper` variables for improved readability and reduced tuple lookups\n3. Streamlined the local search implementation by generating coordinates directly rather than creating intermediate arrays\n4. Maintained the core adaptive exploration-exploitation balance that made the original algorithm successful\n\nThese changes address both the readability/maintainability concerns and should help reverse the metric regressions by simplifying the implementation while preserving the effective algorithm structure from Program 1, which had higher scores across the board."]}}}