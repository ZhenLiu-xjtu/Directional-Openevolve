{"id": "866ccf3d-3b57-41a2-bdef-83e9613a86c0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range with normal distribution for better refinement\n            local_search_range = initial_local_range * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "f88c26bb-38b5-43d6-b6e0-76f99a35de24", "generation": 4, "timestamp": 1755447970.2908974, "iteration_found": 64, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994909130588928, "distance_score": 0.9881786691971755, "overall_score": 0.9987369789441773, "standard_deviation_score": 0.9900027046563129, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9936848947208865, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 4 lines with 3 lines\nChange 2: Replace 9 lines with 12 lines\nChange 3: 'x, y = np.random.uniform(bounds[0], bounds[1], 2)' to 'x, y = np.random.uniform(bounds[0], bounds[1], size=2)'", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9937629158692105, "distance_score": 0.9335290313710155, "overall_score": 0.9928694180126135, "standard_deviation_score": 0.9489745426449405, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9643470900630673, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9938\n- distance_score: 0.9335\n- overall_score: 0.9929\n- standard_deviation_score: 0.9490\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9643\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9957, distance_score: 0.9445, overall_score: 0.9942, standard_deviation_score: 0.9588, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9708, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9896, overall_score: 0.9989, standard_deviation_score: 0.9924, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9947, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9919, overall_score: 0.9992, standard_deviation_score: 0.9938, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9958, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter with adaptive range (starts at 10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with local search\n            # Explore around best point with local search using normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9919), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9938), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9958), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9972)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add adaptive local exploration parameters\n    initial_local_range = (upper - lower) * 0.1  # 10% of search range\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        \n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), lower, upper)\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9896), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9924), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9947), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9849)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9957), Performs well on distance_score (0.9445), Performs well on overall_score (0.9942), Performs well on standard_deviation_score (0.9588), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9708), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9844)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9834)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9978, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Add local exploration parameter with adaptive range (starts at 10% of search range)\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range (decreases over time for finer refinement)\n            local_search_range = initial_local_range * (1 - i/iterations)\n            # Explore around best point with local search\n            # Explore around best point with local search using normal distribution for better refinement\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 6 lines with 10 lines\nChange 2: Replace 2 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.8832, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.982)\n\n\n### Inspiration 3 (Score: 0.9546, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            xy = np.clip(\n                best_xy + np.random.uniform(-local_search_range, local_search_range, size=2),\n                bounds[0], bounds[1]\n            )\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*xy)\n        x, y = xy\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 22 lines, Excellent runs_successfully (1.000), Excellent value_score (0.963)\n\n\n### Inspiration 4 (Score: 0.9779, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining global exploration and local refinement.\n    \n    Performs random global search with occasional local exploration around \n    the current best solution to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds and initialize with a random point\n    lower, upper = bounds\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add local exploration parameter (10% of search range)\n    local_search_range = (upper - lower) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), lower, upper)\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), lower, upper)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.992), Excellent distance_score (0.922)\n\n\n### Inspiration 5 (Score: 0.9774, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            xy = best_xy + np.random.uniform(-local_search_range, local_search_range, size=2)\n            xy = np.clip(xy, bounds[0], bounds[1])\n        else:\n            # Global random search\n            xy = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        x, y = xy\n        value = evaluate_function(*xy)\n\n        if value < best_value:\n            best_value = value\n            best_xy = xy\n            best_x, best_y = xy\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.991), Excellent distance_score (0.919)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the performance regressions while maintaining readability, I recommend implementing adaptive search strategies inspired by Program 1, which had superior metrics across all categories.\n\n```python\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_xy = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_xy\n    best_value = evaluate_function(*best_xy)\n=======\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n    # Add local exploration parameter (10% of search range)\n    local_search_range = (bounds[1] - bounds[0]) * 0.1\n\n    for _ in range(iterations):\n        # Hybrid search - global exploration with local refinement\n        if np.random.rand() < 0.2:  # 20% chance for local exploration\n            # Explore around best point with local search\n            x = np.clip(best_x + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-local_search_range, local_search_range), bounds[0], bounds[1])\n=======\n    # Add adaptive local exploration parameters\n    initial_local_range = (bounds[1] - bounds[0]) * 0.1\n    local_search_range = initial_local_range\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        exploration_prob = max(0.1, 0.3 - (i/iterations)*0.2)  # Starts at 30%, decreases to 10%\n        if np.random.rand() < exploration_prob:\n            # Adaptive local search range with normal distribution for better refinement\n            local_search_range = initial_local_range * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, local_search_range/2), bounds[0], bounds[1])\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n=======\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n>>>>>>> REPLACE\n```\n\nThese changes:\n\n1. Simplify the initialization by removing the unnecessary `best_xy` array while maintaining functionality\n\n2. Implement adaptive exploration-exploitation that starts with more global exploration (30%) and shifts toward local exploitation (10%) over time, helping find better minima\n\n3. Add adaptive local search range that decreases over time, allowing coarse exploration early and fine refinement later\n\n4. Replace uniform distribution with normal distribution for local search, which better explores around promising points\n\n5. Fix inconsistent syntax in the global search line (adding `size=2` for clarity)\n\nThese improvements should restore the value_score, distance_score, and overall_score to their previous high levels seen in Program 1 while maintaining good readability and the perfect scores for runs_successfully, speed_score, and reliability_score."]}}}