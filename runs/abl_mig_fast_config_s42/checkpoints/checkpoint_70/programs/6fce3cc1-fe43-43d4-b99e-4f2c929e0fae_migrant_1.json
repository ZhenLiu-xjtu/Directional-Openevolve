{"id": "6fce3cc1-fe43-43d4-b99e-4f2c929e0fae_migrant_1", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: explore locally around good solutions occasionally\n        if np.random.random() < 0.2:  # 20% chance of local exploration\n            # Narrow search around current best solution\n            x = np.random.normal(best_x, (bounds[1]-bounds[0])/10)\n            y = np.random.normal(best_y, (bounds[1]-bounds[0])/10)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "6fce3cc1-fe43-43d4-b99e-4f2c929e0fae", "generation": 2, "timestamp": 1755435246.6743174, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9906513901852034, "distance_score": 0.9113768821068328, "overall_score": 0.9905600691934509, "standard_deviation_score": 0.935452253325206, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.952800345967254, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 16 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9669194748696159, "distance_score": 0.8466674756849455, "overall_score": 0.9822514772719075, "standard_deviation_score": 0.8825097683272042, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9112573863595375, "success_rate": 1.0}, "island": 1, "migrant": true}, "artifacts_json": null, "artifact_dir": null}