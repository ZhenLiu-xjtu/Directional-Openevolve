{"id": "4367ba47-809a-43f7-957c-4074b5d9c2c6_migrant_3", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if np.random.rand() < 0.3:  # 30% chance of local exploration\n            # Local exploration with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 70% chance of global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "4367ba47-809a-43f7-957c-4074b5d9c2c6", "generation": 3, "timestamp": 1755435246.6753128, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9996174394081271, "distance_score": 0.9929674190019941, "overall_score": 0.9992244108518467, "standard_deviation_score": 0.993586769078454, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9961220542592333, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 11 lines with 21 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9572222336625836, "distance_score": 0.8306612298821505, "overall_score": 0.9798557531601312, "standard_deviation_score": 0.8675977677999924, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8992787658006555, "success_rate": 1.0}, "island": 3, "migrant": true}, "artifacts_json": null, "artifact_dir": null}