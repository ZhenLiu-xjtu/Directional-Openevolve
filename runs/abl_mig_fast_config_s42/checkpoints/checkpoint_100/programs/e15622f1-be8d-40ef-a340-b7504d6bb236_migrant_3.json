{"id": "e15622f1-be8d-40ef-a340-b7504d6bb236_migrant_3", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if np.random.rand() < 0.3:  # 30% chance of local exploration\n            # Local exploration with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "e15622f1-be8d-40ef-a340-b7504d6bb236", "generation": 3, "timestamp": 1755435758.737467, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9996559649118049, "distance_score": 0.9945163524215871, "overall_score": 0.9994337751607006, "standard_deviation_score": 0.996042823684078, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9971688758035029, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 5 lines with 6 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9843870024123118, "distance_score": 0.899685525871153, "overall_score": 0.9889201985875795, "standard_deviation_score": 0.9258780401934235, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9446009929378975, "success_rate": 1.0}, "island": 3, "migrant": true}, "artifacts_json": null, "artifact_dir": null}