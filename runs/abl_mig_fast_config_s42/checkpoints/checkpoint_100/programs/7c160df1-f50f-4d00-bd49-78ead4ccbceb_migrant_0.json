{"id": "7c160df1-f50f-4d00-bd49-78ead4ccbceb_migrant_0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that balances exploration and exploitation to find minima.\n    \n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Search space bounds as (min, max) (default: (-5, 5))\n    \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if np.random.rand() < 0.3:  # 30% chance of local exploration\n            # Local exploration with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 70% chance of global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "7c160df1-f50f-4d00-bd49-78ead4ccbceb", "generation": 3, "timestamp": 1755435758.7359097, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9996535185686989, "distance_score": 0.9943230081629638, "overall_score": 0.9994047089388955, "standard_deviation_score": 0.9956588016919778, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9970235446944775, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 17 lines\nChange 2: Replace 10 lines with 10 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9756081119693545, "distance_score": 0.8655841927705411, "overall_score": 0.9847167215993536, "standard_deviation_score": 0.8958315066890217, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9235836079967678, "success_rate": 1.0}, "island": 0, "migrant": true}, "artifacts_json": null, "artifact_dir": null}