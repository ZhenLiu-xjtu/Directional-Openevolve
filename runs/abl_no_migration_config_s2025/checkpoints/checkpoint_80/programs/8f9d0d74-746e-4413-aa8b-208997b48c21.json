{"id": "8f9d0d74-746e-4413-aa8b-208997b48c21", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance local exploration and global search\n        if np.random.random() < 0.7:  # 70% local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% global exploration\n            x, y = np.random.uniform(*bounds, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "fdb86d97-5ee2-4f28-a163-45d0eb24a246", "generation": 2, "timestamp": 1755446548.7874012, "iteration_found": 56, "metrics": {"runs_successfully": 1.0, "value_score": 0.980419028153324, "distance_score": 0.5550907790356073, "overall_score": 0.9466184400189516, "standard_deviation_score": 0.47831883789315743, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7330922000947575, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 7 lines with 15 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.974900491474497, "distance_score": 0.8742295573288785, "overall_score": 0.9856603749091792, "standard_deviation_score": 0.9055317873235738, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9283018745458962, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9749\n- distance_score: 0.8742\n- overall_score: 0.9857\n- standard_deviation_score: 0.9055\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9283\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9989, distance_score: 0.9737, overall_score: 0.9974, standard_deviation_score: 0.9821, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9868, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9872, overall_score: 0.9986, standard_deviation_score: 0.9885, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9930, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9975, overall_score: 0.9997, standard_deviation_score: 0.9979, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9986, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9993)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with local exploration\n        if np.random.random() < 0.7:  # 70% chance for local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9975), Performs well on overall_score (0.9997), Performs well on standard_deviation_score (0.9979), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9986), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9963)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9872), Performs well on overall_score (0.9986), Performs well on standard_deviation_score (0.9885), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9930), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9932)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Cache bounds values\n    low, high = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_val = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.3 and i > iterations//4:  # Local search after warm-up\n            # Search around best solution with decreasing step size\n            step = (high - low) * (1 - i/iterations)\n            x = best_x + np.random.normal(0, step/3)\n            y = best_y + np.random.normal(0, step/3)\n            x, y = np.clip([x, y], low, high)\n        else:  # Global random search\n            x, y = np.random.uniform(low, high, size=2)\n            \n        current_val = evaluate_function(x, y)\n\n        if current_val < best_val:\n            best_val = current_val\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_val\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9989), Performs well on distance_score (0.9737), Performs well on overall_score (0.9974), Performs well on standard_deviation_score (0.9821), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9868), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9926)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        # Adaptive search strategy: explore locally around good solutions\n        if np.random.random() < 0.3 and _ > iterations//4:  # 30% local search after warm-up\n            # Explore around best solution with decreasing step size\n            step_size = (bounds[1]-bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 70% global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9832)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with occasional local exploration\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        current_value = evaluate_function(x, y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9993, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with local exploration\n        if np.random.random() < 0.7:  # 70% chance for local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 15 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9560, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random point\n        x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 8 lines with 7 lines, Excellent runs_successfully (1.000), Excellent value_score (0.969)\n\n\n### Inspiration 3 (Score: 0.9603, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n### Inspiration 4 (Score: 0.9926, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        # Adaptive search strategy: explore locally around good solutions\n        if np.random.random() < 0.3 and _ > iterations//4:  # 30% local search after warm-up\n            # Explore around best solution with decreasing step size\n            step_size = (bounds[1]-bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 70% global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.999), Excellent distance_score (0.972)\n\n\n### Inspiration 5 (Score: 0.9932, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Cache bounds values\n    low, high = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_val = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.3 and i > iterations//4:  # Local search after warm-up\n            # Search around best solution with decreasing step size\n            step = (high - low) * (1 - i/iterations)\n            x = best_x + np.random.normal(0, step/3)\n            y = best_y + np.random.normal(0, step/3)\n            x, y = np.clip([x, y], low, high)\n        else:  # Global random search\n            x, y = np.random.uniform(low, high, size=2)\n            \n        current_val = evaluate_function(x, y)\n\n        if current_val < best_val:\n            best_val = current_val\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_val\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.999), Excellent distance_score (0.974)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Program Improvement Suggestions\n\nBased on the performance metrics showing regression in value_score, distance_score, and other key metrics, I recommend reintroducing the balanced exploration/exploitation approach from the top-performing programs while maintaining code simplicity.\n\n## Key Changes\n\n### 1. Add Local Exploration to Search Strategy\nThe current program only performs global random search, which explains the lower performance metrics compared to previous versions that combined local and global search.\n\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n=======\n    for _ in range(iterations):\n        # Balance local exploration and global search\n        if np.random.random() < 0.7:  # 70% local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% global exploration\n            x, y = np.random.uniform(*bounds, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n\n## Explanation\n\nThis change:\n1. Reintroduces the 70% local exploration/30% global search balance from Program 1 (the top performer)\n2. Adds a decreasing step size that gets smaller over iterations, focusing search around promising areas\n3. Maintains code readability while significantly improving search effectiveness\n4. Uses normal distribution for local exploration to favor points closer to the current best\n\nThese modifications should improve:\n- **value_score**: By more effectively exploring around promising solutions\n- **distance_score**: By focusing search in areas likely to contain the true minimum\n- **standard_deviation_score**: By creating a more consistent search process\n- **combined_score**: Through the cumulative effect of the above improvements\n\nThe code remains simple while incorporating the key elements that made previous versions successful, addressing both the performance regression and the maintainability concerns."]}}}