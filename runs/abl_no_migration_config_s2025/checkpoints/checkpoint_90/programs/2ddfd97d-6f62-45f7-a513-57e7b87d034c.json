{"id": "2ddfd97d-6f62-45f7-a513-57e7b87d034c", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: start with exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip([x, y], lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "48a49f64-51cf-4526-b0d2-b12d261e790f", "generation": 4, "timestamp": 1755446779.8748465, "iteration_found": 88, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994845965305413, "distance_score": 0.9863570839115172, "overall_score": 0.9986308584161241, "standard_deviation_score": 0.9905485196294979, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9931542920806201, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 11 lines with 12 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9995355781200009, "distance_score": 0.9895568707625053, "overall_score": 0.9988935466656481, "standard_deviation_score": 0.9914268810968156, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9944677333282405, "success_rate": 1.0}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9995\n- distance_score: 0.9896\n- overall_score: 0.9989\n- standard_deviation_score: 0.9914\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9945\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9884, overall_score: 0.9988, standard_deviation_score: 0.9913, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9940, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9896, overall_score: 0.9989, standard_deviation_score: 0.9914, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9945, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9922, overall_score: 0.9992, standard_deviation_score: 0.9935, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9958, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n    \n    Starts with broad exploration and gradually shifts to focused exploitation \n    around promising solutions for efficient search space navigation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9922), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9935), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9958), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9971)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration and exploitation\n        # 30% local search after warm-up, 70% global search otherwise\n        if np.random.random() < 0.3 and _ > iterations//4:\n            # Global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:\n            # Explore around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9896), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9914), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9945), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9969)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Cache bounds values for performance\n    lower_bound, upper_bound = bounds\n    \n    for _ in range(iterations):\n        # Adaptive exploration strategy: start with more exploration, shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        if np.random.random() < exploration_ratio:  # Adaptive exploration\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:  # 70% chance for local refinement around best solution\n            # Refine around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip([x, y], lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9884), Performs well on overall_score (0.9988), Performs well on standard_deviation_score (0.9913), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9940), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9953)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm with adaptive exploration-exploitation balance.\n    \n    Combines local refinement around promising solutions with periodic global\n    exploration to efficiently find function minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration and exploitation\n        if np.random.random() < 0.3 and _ > iterations//4:  # 30% local search after warm-up\n            # Explore around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 70% global random search\n            x, y = np.random.uniform(*bounds, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9939)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration and exploitation\n        if np.random.random() < 0.3 and _ > iterations//4:  # 30% local search after warm-up\n            # Explore around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n        else:  # 70% global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9978, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n    \n    Starts with broad exploration and gradually shifts to focused exploitation \n    around promising solutions for efficient search space navigation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 6 lines\nChange 2: Replace 2 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9953, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm with adaptive exploration-exploitation balance.\n    \n    Combines local refinement around promising solutions with periodic global\n    exploration to efficiently find function minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration and exploitation\n        if np.random.random() < 0.3 and _ > iterations//4:  # 30% local search after warm-up\n            # Explore around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 70% global random search\n            x, y = np.random.uniform(*bounds, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 9 lines\nChange 2: Replace 3 lines with 6 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 3 (Score: 0.0000, Type: Exploratory)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n    \n    Starts with broad exploration and gradually shifts to focused exploitation \n    around promising solutions for efficient search space navigation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x, y = best_x + np.random.normal(0, step_size/3, 2), best_y + np.random.normal(0, step_size/3, 2)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Alternative runs_successfully approach, NumPy-based implementation, Comprehensive implementation\n\n\n### Inspiration 4 (Score: 0.9969, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Cache bounds values for performance\n    lower_bound, upper_bound = bounds\n    \n    for _ in range(iterations):\n        # Adaptive exploration strategy: start with more exploration, shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        if np.random.random() < exploration_ratio:  # Adaptive exploration\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:  # 70% chance for local refinement around best solution\n            # Refine around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip([x, y], lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 3 lines\nChange 2: Replace 4 lines with 5 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 5 (Score: 0.8911, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm that balances exploration and exploitation to find function minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global search) and exploitation (local refinement)\n        if np.random.random() < 0.7:  # 70% local exploitation\n            # Adaptive step size that decreases over time\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x, y = np.clip([best_x, best_y] + np.random.normal(0, step, 2), bounds[0], bounds[1])\n        else:  # 30% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.990), Excellent overall_score (0.961)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Cache bounds values for readability and performance\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration and exploitation\n        # 30% local search after warm-up, 70% global search otherwise\n        if np.random.random() < 0.3 and _ > iterations//4:\n            # Global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:\n            # Explore around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To improve readability and align the search strategy with best practices from top-performing programs, here are the suggested changes:\n\n1. Fix comment-code mismatch and improve exploration strategy clarity\n2. Simplify the clipping operation for coordinates\n3. Align exploration/exploitation balance with the adaptive strategy described in the docstring\n\n<<<<<<< SEARCH\n        # Adaptive search strategy: balance exploration and exploitation\n        # 30% local search after warm-up, 70% global search otherwise\n        if np.random.random() < 0.3 and _ > iterations//4:\n            # Global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:\n            # Explore around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, lower_bound, upper_bound), np.clip(y, lower_bound, upper_bound)\n=======\n        # Adaptive search strategy: start with exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (upper_bound - lower_bound) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip([x, y], lower_bound, upper_bound)\n>>>>>>> REPLACE\n\nThese changes:\n1. Fix the comment to accurately describe the actual behavior\n2. Implement a clear exploration ratio that decreases from 1.0 to 0.3 over iterations, matching the adaptive strategy promised in the docstring\n3. Simplify the coordinate clipping using a single np.clip call for both x and y\n4. Create a more intuitive exploration/exploitation balance that starts with broad exploration and gradually shifts to focused exploitation\n\nThis aligns the code with the top-performing Program 1 while maintaining readability and should improve search performance by ensuring proper exploration of the solution space before focusing on refinement."]}}}