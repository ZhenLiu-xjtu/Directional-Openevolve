{"id": "b51a7d53-6c5d-4c49-8504-a3c7a28656ef", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: start with exploration, shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        if np.random.random() < exploration_ratio:  # Adaptive exploration ratio\n            x, y = np.random.uniform(*bounds, 2)\n        else:  # 80% chance to exploit by searching near best solution\n            # Use decreasing step size for local search\n            step_size = 0.5 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "229f9d20-398c-419a-b68b-13b4e9105d11", "generation": 4, "timestamp": 1755446480.6577432, "iteration_found": 45, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994849635993394, "distance_score": 0.9892952919056446, "overall_score": 0.9988648947956826, "standard_deviation_score": 0.9912569227583412, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9943244739784127, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 3 lines\nChange 2: Replace 2 lines with 4 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9708096226020925, "distance_score": 0.4536725588314874, "overall_score": 0.9375458435476114, "standard_deviation_score": 0.44580227118151916, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.6877292177380568, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9708\n- distance_score: 0.4537\n- overall_score: 0.9375\n- standard_deviation_score: 0.4458\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.6877\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9924, distance_score: 0.9416, overall_score: 0.9935, standard_deviation_score: 0.9534, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9676, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9872, overall_score: 0.9986, standard_deviation_score: 0.9885, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9930, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9975, overall_score: 0.9997, standard_deviation_score: 0.9979, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9986, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9993)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with local exploration\n        if np.random.random() < 0.7:  # 70% chance for local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9975), Performs well on overall_score (0.9997), Performs well on standard_deviation_score (0.9979), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9986), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9963)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9872), Performs well on overall_score (0.9986), Performs well on standard_deviation_score (0.9885), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9930), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9832)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with occasional local exploration\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        current_value = evaluate_function(x, y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9924), Performs well on distance_score (0.9416), Performs well on overall_score (0.9935), Performs well on standard_deviation_score (0.9534), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9676), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9603)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9632)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9993, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with local exploration\n        if np.random.random() < 0.7:  # 70% chance for local exploration\n            # Explore around best point with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step), bounds[0], bounds[1])\n        else:  # 30% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 15 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9603, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n### Inspiration 3 (Score: 0.9632, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.975), Excellent overall_score (0.986)\n\n\n### Inspiration 4 (Score: 0.9963, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm balancing global exploration and local exploitation.\n\n    Efficiently explores search space by starting with broad exploration and\n    gradually shifting to focused exploitation around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of minimum found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance exploration vs exploitation\n        # Start with mostly exploration, gradually shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        \n        if np.random.random() < exploration_ratio:\n            # Global exploration: search entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation: refine around best solution with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size/3)\n            y = best_y + np.random.normal(0, step_size/3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 13 lines\nChange 2: Replace 9 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 5 (Score: 0.9832, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with occasional local exploration\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        current_value = evaluate_function(x, y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.992), Excellent distance_score (0.942)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% chance to explore globally\n            x, y = np.random.uniform(*bounds, 2)\n        else:  # 80% chance to exploit by searching near best solution\n            x = best_x + np.random.normal(0, 0.3)\n            y = best_y + np.random.normal(0, 0.3)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the performance regressions in value_score, distance_score, overall_score, standard_deviation_score, and combined_score, we need to improve the search algorithm's ability to explore the solution space while still efficiently exploiting promising regions.\n\nHere are the key improvements:\n\n1. Adaptive exploration-exploitation balance instead of fixed 20% exploration:\n```diff\n<<<<<<< SEARCH\n        # Adaptive search: balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% chance to explore globally\n=======\n        # Adaptive search: start with exploration, shift to exploitation\n        exploration_ratio = max(0.3, 1.0 - _/iterations)  # Decreases from 1.0 to 0.3\n        if np.random.random() < exploration_ratio:  # Adaptive exploration ratio\n>>>>>>> REPLACE\n```\n\n2. Decreasing step size for local search instead of fixed 0.3:\n```diff\n<<<<<<< SEARCH\n            x = best_x + np.random.normal(0, 0.3)\n            y = best_y + np.random.normal(0, 0.3)\n=======\n            # Use decreasing step size for local search\n            step_size = 0.5 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n>>>>>>> REPLACE\n```\n\nThese changes address the key issues in the current program:\n\n1. The adaptive exploration ratio starts with heavy exploration (100%) to discover promising regions, then gradually shifts to exploitation (30%) to refine solutions. This helps find better overall minima rather than getting trapped in local minima.\n\n2. The decreasing step size allows large jumps early in the search to explore broadly, then finer adjustments later to converge precisely on good solutions. This should improve both value_score and distance_score.\n\n3. By scaling with the bounds size, the algorithm becomes more robust to different problem scales while maintaining efficient search patterns.\n\nThese improvements are inspired by the top-performing Program 2 while maintaining code simplicity and speed. The changes should significantly improve the standard_deviation_score by making the algorithm more consistent across runs and better able to find the global minimum."]}}}