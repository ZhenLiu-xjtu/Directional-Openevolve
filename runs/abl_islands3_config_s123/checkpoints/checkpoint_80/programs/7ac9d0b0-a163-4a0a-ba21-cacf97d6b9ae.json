{"id": "7ac9d0b0-a163-4a0a-ba21-cacf97d6b9ae", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm with guided local exploration and random search.\n    \n    30% of iterations explore locally around the best solution found using a \n    normal distribution, while 70% perform random search within the bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point and unpack bounds for readability\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (high - low) / 10  # Precompute search width (10% of space)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x = np.clip(best_x + np.random.normal(0, search_width), low, high)\n            y = np.clip(best_y + np.random.normal(0, search_width), low, high)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(low, high, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "8239fc9e-cbaa-46c8-8288-571bfafb5e20", "generation": 4, "timestamp": 1755432616.6884682, "iteration_found": 42, "metrics": {"runs_successfully": 1.0, "value_score": 0.9943216084709849, "distance_score": 0.9335871195820182, "overall_score": 0.993030135449287, "standard_deviation_score": 0.9519131121394178, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9651506772464347, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 9 lines with 10 lines\nChange 2: Replace 3 lines with 2 lines\nChange 3: 'x, y = np.random.uniform(bounds[0], bounds[1], 2)' to 'x, y = np.random.uniform(low, high, 2)'", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.994897197808315, "distance_score": 0.937647614310108, "overall_score": 0.9933554531598174, "standard_deviation_score": 0.9519329077881935, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9667772657990867, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9949\n- distance_score: 0.9376\n- overall_score: 0.9934\n- standard_deviation_score: 0.9519\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9668\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9922, distance_score: 0.9229, overall_score: 0.9918, standard_deviation_score: 0.9431, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9589, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9939, distance_score: 0.9332, overall_score: 0.9929, standard_deviation_score: 0.9495, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9644, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9949, distance_score: 0.9376, overall_score: 0.9934, standard_deviation_score: 0.9519, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9668, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9827)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm with guided local exploration and random search.\n    \n    30% of iterations explore locally around the best solution found using a \n    normal distribution, while 70% perform random search within the bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10  # 10% of search space\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9949), Performs well on distance_score (0.9376), Performs well on overall_score (0.9934), Performs well on standard_deviation_score (0.9519), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9668), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9815)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (bounds[1] - bounds[0])/10  # Precompute exploration width\n    \n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x, y = best_x + np.random.normal(0, search_width), best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9939), Performs well on distance_score (0.9332), Performs well on overall_score (0.9929), Performs well on standard_deviation_score (0.9495), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9644), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9788)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution (10% of search space width)\n            x, y = np.clip(\n                [best_x + np.random.normal(0, (bounds[1]-bounds[0])/10),\n                 best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)],\n                bounds[0], bounds[1]\n            )\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9922), Performs well on distance_score (0.9229), Performs well on overall_score (0.9918), Performs well on standard_deviation_score (0.9431), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9589), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9604)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    low, high = bounds  # Unpack bounds for readability\n    best_x, best_y = np.random.uniform(low, high, size=2)  # Combined random generation\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(low, high, size=2)  # Use unpacked bounds and combined generation\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9665)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize bounds and starting point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(min_bound, max_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8041, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A guided random search algorithm with local exploration.\n\n    Combines random search with local exploration around promising solutions\n    to efficiently find function minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            # Keep values within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 18 lines\nChange 2: Replace 10 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.982)\n\n\n### Inspiration 2 (Score: 0.9788, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution (10% of search space width)\n            x, y = np.clip(\n                [best_x + np.random.normal(0, (bounds[1]-bounds[0])/10),\n                 best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)],\n                bounds[0], bounds[1]\n            )\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(*bounds, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.992), Excellent distance_score (0.923)\n\n\n### Inspiration 3 (Score: 0.9815, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (bounds[1] - bounds[0])/10  # Precompute exploration width\n    \n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x, y = best_x + np.random.normal(0, search_width), best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 11 lines with 11 lines\nChange 2: Replace 6 lines with 6 lines, Excellent runs_successfully (1.000), Excellent value_score (0.994)\n\n\n### Inspiration 4 (Score: 0.9566, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    This algorithm explores the search space by randomly generating points\n    within specified bounds and tracks the best solution found.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    low, high = bounds  # Unpack bounds for readability\n    # Generate initial random point within bounds\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate point within bounds\n        x, y = np.random.uniform(low, high, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.967), Excellent overall_score (0.983)\n\n\n### Inspiration 5 (Score: 0.9665, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize bounds and starting point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(min_bound, max_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 4 lines\nChange 2: Replace 4 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.980)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm with guided local exploration and random search.\n    \n    30% of iterations explore locally around the best solution found using a \n    normal distribution, while 70% perform random search within the bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10  # 10% of search space\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Suggested Improvements\n\nBased on the analysis, the current program performs very well across all metrics but can be simplified for better readability while maintaining or improving performance. Here are targeted improvements:\n\n## 1. Simplify Bounds Handling and Precompute Search Width\n\n```diff\n<<<<<<< SEARCH\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10  # 10% of search space\n=======\n    # Initialize with a random point and unpack bounds for readability\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (high - low) / 10  # Precompute search width (10% of space)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n>>>>>>> REPLACE\n```\n\n## 2. Simplify Clipping Operation\n\n```diff\n<<<<<<< SEARCH\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n=======\n            x = np.clip(best_x + np.random.normal(0, search_width), low, high)\n            y = np.clip(best_y + np.random.normal(0, search_width), low, high)\n>>>>>>> REPLACE\n```\n\n## 3. Simplify Random Search with Unpacked Bounds\n\n```diff\n<<<<<<< SEARCH\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n=======\n            x, y = np.random.uniform(low, high, 2)\n>>>>>>> REPLACE\n```\n\n# Rationale for Changes\n\n1. **Bounds Unpacking**: By unpacking `bounds` into `low` and `high` variables, we improve readability and reduce repetitive access to `bounds[0]` and `bounds[1]`.\n\n2. **Precompute Search Width**: Moving `search_width` calculation outside the loop avoids redundant computations, slightly improving performance while making the code cleaner.\n\n3. **Simplified Clipping**: Combining the normal distribution and clipping operations into single lines makes the code more concise without sacrificing readability.\n\nThese changes maintain the original algorithm's logic and performance characteristics while making the code:\n- More readable through better variable names\n- More maintainable through reduced redundancy\n- Slightly more efficient through precomputation\n\nThe core hybrid search approach (30% local exploration, 70% random search) that contributes to the high performance metrics is preserved."]}}}