{"id": "6ca36948-5182-40f3-b0d9-8d79aba02418", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "5b55e234-27ca-4a54-a689-5bdb81638d7f", "generation": 2, "timestamp": 1755432921.506457, "iteration_found": 73, "metrics": {"runs_successfully": 1.0, "value_score": 0.9869409876131898, "distance_score": 0.897096373639118, "overall_score": 0.9892635731112114, "standard_deviation_score": 0.9345239455887442, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9463178655560567, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 17 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9670282213424927, "distance_score": 0.8329943214420082, "overall_score": 0.9816220582524049, "standard_deviation_score": 0.8905120064372442, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9081102912620242, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9670\n- distance_score: 0.8330\n- overall_score: 0.9816\n- standard_deviation_score: 0.8905\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9081\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9936, distance_score: 0.9282, overall_score: 0.9925, standard_deviation_score: 0.9495, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9625, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9942, distance_score: 0.9334, overall_score: 0.9929, standard_deviation_score: 0.9493, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9645, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9979, distance_score: 0.9632, overall_score: 0.9962, standard_deviation_score: 0.9721, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9808, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9900)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize bounds and starting point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search: More exploration early, more exploitation later\n        exploration_ratio = 0.3 * (1 - i/iterations)  # Decreases from 0.3 to 0\n        if np.random.random() < exploration_ratio:\n            # Narrow search over time: starts broad, becomes focused\n            search_width = (max_bound - min_bound) / 10 * (1 - i/iterations)\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9979), Performs well on distance_score (0.9632), Performs well on overall_score (0.9962), Performs well on standard_deviation_score (0.9721), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9808), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9816)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and random search.\n    \n    30% of iterations explore locally around the best solution using a normal \n    distribution, while 70% perform random search within the bounds to balance\n    exploitation and exploration.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point and unpack bounds\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (high - low) / 10  # Precompute exploration width (10% of search space)\n    \n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x, y = np.random.normal([best_x, best_y], search_width)\n            x, y = np.clip(x, low, high), np.clip(y, low, high)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(low, high, 2)\n            \n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9942), Performs well on distance_score (0.9334), Performs well on overall_score (0.9929), Performs well on standard_deviation_score (0.9493), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9645), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9807)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9936), Performs well on distance_score (0.9282), Performs well on overall_score (0.9925), Performs well on standard_deviation_score (0.9495), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9625), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9806)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that finds function minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x = best_x + np.random.normal(0, (max_bound - min_bound)/10)\n            y = best_y + np.random.normal(0, (max_bound - min_bound)/10)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9804)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9900, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize bounds and starting point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search: More exploration early, more exploitation later\n        exploration_ratio = 0.3 * (1 - i/iterations)  # Decreases from 0.3 to 0\n        if np.random.random() < exploration_ratio:\n            # Narrow search over time: starts broad, becomes focused\n            search_width = (max_bound - min_bound) / 10 * (1 - i/iterations)\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 14 lines with 14 lines\nChange 2: Replace 3 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 2 (Score: 0.9653, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize bounds and starting point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(min_bound, max_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.978), Excellent overall_score (0.987)\n\n\n### Inspiration 3 (Score: 0.9591, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point within search bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random candidate solution within bounds\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 13 lines with 12 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.970)\n\n\n### Inspiration 4 (Score: 0.9804, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A guided random search algorithm with local exploration.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            # Keep values within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.993), Excellent distance_score (0.928)\n\n\n### Inspiration 5 (Score: 0.9816, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and random search.\n    \n    30% of iterations explore locally around the best solution using a normal \n    distribution, while 70% perform random search within the bounds to balance\n    exploitation and exploration.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) - coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point and unpack bounds\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_width = (high - low) / 10  # Precompute exploration width (10% of search space)\n    \n    for _ in range(iterations):\n        # Guided search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            x, y = np.random.normal([best_x, best_y], search_width)\n            x, y = np.clip(x, low, high), np.clip(y, low, high)\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(low, high, 2)\n            \n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.994), Excellent distance_score (0.933)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Analysis and Improvements\n\nLooking at the current program and performance metrics, I can see that while the program runs successfully and quickly, it's underperforming on solution quality metrics (value_score, distance_score) compared to previous versions.\n\nThe key issue appears to be the simplified random search approach that only explores randomly without exploiting promising solutions. The top-performing programs all used a hybrid approach combining exploration and exploitation.\n\n## Improvement 1: Add Local Exploration Around Best Solutions\n\n```diff\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n=======\n    for _ in range(iterations):\n        # Hybrid search: 30% local exploration, 70% random search\n        if np.random.random() < 0.3:\n            # Explore around best solution with normal distribution\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = best_x + np.random.normal(0, search_width)\n            y = best_y + np.random.normal(0, search_width)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:\n            # Random search in bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n```\n\n## Reasoning\n\nThis change adds a hybrid search strategy that:\n1. Uses 30% of iterations for local exploration around the best found solution (exploitation)\n2. Uses 70% of iterations for random search in the bounds (exploration)\n3. Maintains simplicity while significantly improving search effectiveness\n\nThe local exploration uses a normal distribution centered on the current best solution with a width of 10% of the search space, helping to find better solutions near promising regions while keeping values within bounds using `np.clip()`.\n\nThis approach matches the strategy used in the top-performing programs (Program 1 and Inspiration 1) that achieved much higher value and distance scores while maintaining good speed and reliability.\n\nBy reintroducing this hybrid exploration/exploitation balance, we should see significant improvements in value_score, distance_score, and overall solution quality metrics while keeping the code readable and maintainable."]}}}