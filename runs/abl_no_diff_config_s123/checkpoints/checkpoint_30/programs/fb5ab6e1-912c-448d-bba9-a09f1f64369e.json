{"id": "fb5ab6e1-912c-448d-bba9-a09f1f64369e", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that finds the minimum of a function.\n    \n    Randomly samples points within specified bounds and tracks the point\n    that produces the minimum function value.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Min and max values for the search space (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates within search bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Search for minimum by evaluating random points\n    for _ in range(iterations):\n        # Generate new random candidate coordinates\n        current_x, current_y = np.random.uniform(min_bound, max_bound, size=2)\n        current_value = evaluate_function(current_x, current_y)\n\n        # Update best solution if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    \"\"\"Execute the search algorithm and return results\"\"\"\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")", "language": "python", "parent_id": "3f567d09-547f-4c01-94d9-a337d32219b9", "generation": 2, "timestamp": 1755442934.8529437, "iteration_found": 16, "metrics": {"runs_successfully": 1.0, "value_score": 0.9641346465239263, "distance_score": 0.6496074470761906, "overall_score": 0.9552233243780416, "standard_deviation_score": 0.5565344456508323, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7761166218902075, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9558680101762688, "distance_score": 0.8389890983502591, "overall_score": 0.9806483088577896, "standard_deviation_score": 0.875207781523315, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9032415442889479, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9559\n- distance_score: 0.8390\n- overall_score: 0.9806\n- standard_deviation_score: 0.8752\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9032\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9559, distance_score: 0.8390, overall_score: 0.9806, standard_deviation_score: 0.8752, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9032, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9504)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point in the search space\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9559), Performs well on distance_score (0.8390), Performs well on overall_score (0.9806), Performs well on standard_deviation_score (0.8752), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9032), Performs well on success_rate (1.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point in the search space\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that finds the minimum of a function.\n    \n    Randomly samples points within specified bounds and tracks the point\n    that produces the minimum function value.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Min and max values for the search space (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates within search bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Search for minimum by evaluating random points\n    for _ in range(iterations):\n        # Generate new random candidate coordinates\n        current_x, current_y = np.random.uniform(min_bound, max_bound, size=2)\n        current_value = evaluate_function(current_x, current_y)\n\n        # Update best solution if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = current_x, current_y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    \"\"\"Execute the search algorithm and return results\"\"\"\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\nKey improvements made:\n1. Added type hints throughout for better code clarity and IDE support\n2. Split the single `best_point` variable into more descriptive `best_x` and `best_y`\n3. Added tuple unpacking for bounds to improve readability (`min_bound, max_bound = bounds`)\n4. Simplified the update logic by combining variables in a single line\n5. Improved docstrings with more detailed explanations\n6. Formatted the print output to show 4 decimal places for better readability\n7. Added explicit return type annotations for all functions\n8. Maintained identical input/output interface while improving internal clarity\n\nThese changes enhance maintainability and readability without altering the algorithm's behavior or performance characteristics."]}}}