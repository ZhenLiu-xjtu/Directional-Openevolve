{"id": "163babef-1f2d-4b25-8145-d9f4a4ae6bf6", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates using single uniform distribution call\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "764ef21f-f660-4510-be75-3c055d1b91f4", "generation": 1, "timestamp": 1755443204.5601945, "iteration_found": 57, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994234301495141, "distance_score": 0.9834466098432377, "overall_score": 0.998334972960676, "standard_deviation_score": 0.9883517540295816, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9916748648033795, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9477694943395527, "distance_score": 0.6377458828651053, "overall_score": 0.9533206853149259, "standard_deviation_score": 0.5583652227649926, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7666034265746289, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9478\n- distance_score: 0.6377\n- overall_score: 0.9533\n- standard_deviation_score: 0.5584\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.7666\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9758, distance_score: 0.8862, overall_score: 0.9869, standard_deviation_score: 0.9142, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9345, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9833, distance_score: 0.8914, overall_score: 0.9881, standard_deviation_score: 0.9223, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9406, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9833, distance_score: 0.9068, overall_score: 0.9891, standard_deviation_score: 0.9202, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9456, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9717)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_x, best_y, best_value = x, y, value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9833), Performs well on distance_score (0.9068), Performs well on overall_score (0.9891), Performs well on standard_deviation_score (0.9202), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9456), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9695)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple and effective random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (x, y)\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        new_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*new_point)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_point = new_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9833), Performs well on distance_score (0.8914), Performs well on overall_score (0.9881), Performs well on standard_deviation_score (0.9223), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9406), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9664)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    # Search for better points\n    for _ in range(iterations):\n        # Generate and evaluate candidate point\n        candidate = np.random.uniform(bounds[0], bounds[1], size=2)\n        candidate_value = evaluate_function(*candidate)\n\n        # Update best solution if candidate is better\n        if candidate_value < best_value:\n            best_point, best_value = candidate, candidate_value\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9758), Performs well on distance_score (0.8862), Performs well on overall_score (0.9869), Performs well on standard_deviation_score (0.9142), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9345), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9589)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (x, y)\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        new_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*new_point)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_point = new_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9613)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point.copy()\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9717, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_x, best_y, best_value = x, y, value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.983)\n\n\n### Inspiration 2 (Score: 0.9664, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    # Search for better points\n    for _ in range(iterations):\n        # Generate and evaluate candidate point\n        candidate = np.random.uniform(bounds[0], bounds[1], size=2)\n        candidate_value = evaluate_function(*candidate)\n\n        # Update best solution if candidate is better\n        if candidate_value < best_value:\n            best_point, best_value = candidate, candidate_value\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.976)\n\n\n### Inspiration 3 (Score: 0.9613, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point.copy()\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.967)\n\n\n### Inspiration 4 (Score: 0.9695, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple and effective random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (x, y)\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        new_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*new_point)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_point = new_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.983)\n\n\n### Inspiration 5 (Score: 0.8091, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates within bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% exploration with large jumps\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:  # 80% exploitation with local search around best found\n            search_width = (max_bound - min_bound) * 0.1  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current coordinates yield better result\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x = np.random.uniform(bounds[0], bounds[1])\n    best_y = np.random.uniform(bounds[0], bounds[1])\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x = np.random.uniform(bounds[0], bounds[1])\n        y = np.random.uniform(bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates using single uniform distribution call\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements in this version:\n\n1. Restored the single-call initialization for coordinates (best_x, best_y) from the top-performing Program 1, which helps with consistency.\n\n2. Added an adaptive exploration-exploitation strategy that:\n   - Starts with broader exploration (60% of the time) to discover potential minima\n   - Gradually shifts toward more exploitation (eventually 10% exploration) to refine the best found solution\n   - Uses normal distribution around the best found solution for local search\n   - Adjusts search width over time, starting broader and getting more focused\n\n3. Maintained the same function signature and return format while improving the internal search logic.\n\nThis approach should address the regression in value_score, distance_score, and other metrics by more effectively exploring the search space and exploiting promising regions, while maintaining the excellent speed and reliability scores."]}}}