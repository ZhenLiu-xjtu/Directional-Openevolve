{"id": "cbffd24a-bd9b-4cdf-8027-dc0e8a98fca8", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")", "language": "python", "parent_id": "010df4d3-6a9d-4139-a162-061ac2920a38", "generation": 3, "timestamp": 1755443528.9779725, "iteration_found": 98, "metrics": {"runs_successfully": 1.0, "value_score": 0.9991111080894793, "distance_score": 0.9797347106384782, "overall_score": 0.9978866586865949, "standard_deviation_score": 0.9841862843909461, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9894332934329744, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9683805068379466, "distance_score": 0.4482796262875613, "overall_score": 0.9369547092976208, "standard_deviation_score": 0.4447124994708802, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.6847735464881038, "success_rate": 1.0}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9684\n- distance_score: 0.4483\n- overall_score: 0.9370\n- standard_deviation_score: 0.4447\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.6848\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9986, distance_score: 0.9694, overall_score: 0.9969, standard_deviation_score: 0.9775, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9843, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9992, distance_score: 0.9786, overall_score: 0.9978, standard_deviation_score: 0.9848, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9892, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9992, distance_score: 0.9817, overall_score: 0.9981, standard_deviation_score: 0.9851, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9903, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9949)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9992), Performs well on distance_score (0.9817), Performs well on overall_score (0.9981), Performs well on standard_deviation_score (0.9851), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9903), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9944)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with adaptive exploration-exploitation balance.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution with adaptive width\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9992), Performs well on distance_score (0.9786), Performs well on overall_score (0.9978), Performs well on standard_deviation_score (0.9848), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9892), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9918)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Balance exploration (random search) and exploitation (local search)\n        if np.random.random() < 0.3:  # 30% exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 70% exploitation - search near current best\n            step = np.random.normal(0, 0.5, size=2)\n            x, y = np.clip(best_point + step, bounds[0], bounds[1])\n\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_value = current_value\n            best_point = np.array([x, y])\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9986), Performs well on distance_score (0.9694), Performs well on overall_score (0.9969), Performs well on standard_deviation_score (0.9775), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9843), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9670)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (x, y)\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        new_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*new_point)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_point = new_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9658)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that finds the minimum of a function.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        current_value = evaluate_function(x, y)\n\n        # Update best if current coordinates are better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9949, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.9658, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that finds the minimum of a function.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        current_value = evaluate_function(x, y)\n\n        # Update best if current coordinates are better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.978)\n\n\n### Inspiration 3 (Score: 0.9558, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point.copy()\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.963)\n\n\n### Inspiration 4 (Score: 0.9634, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that finds the minimum of a function.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_x, best_y, best_value = x, y, value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.977)\n\n\n### Inspiration 5 (Score: 0.7524, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with exploration-exploitation balance.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates within bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% exploration with large jumps\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:  # 80% exploitation with local search around best found\n            search_width = (max_bound - min_bound) * 0.1  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current coordinates yield better result\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.970)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation for better minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates within bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Track improvement to adapt search strategy\n    no_improvement_count = 0\n    improvement_threshold = int(iterations * 0.1)  # 10% of iterations\n    \n    for _ in range(iterations):\n        # Adapt search strategy based on recent improvements\n        if no_improvement_count < improvement_threshold:\n            # Exploration: Search random points in full space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: Search locally around best found solution\n            step_size = 0.1 * (max_bound - min_bound)  # Adaptive step size\n            x = np.clip(best_x + np.random.normal(0, step_size), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step_size), min_bound, max_bound)\n        \n        # Evaluate new point\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if found\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n            no_improvement_count = 0  # Reset improvement counter\n        else:\n            no_improvement_count += 1\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with exploration-exploitation balance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Adaptively balance exploration and exploitation\n        # Start with more exploration, gradually shift to exploitation\n        exploration_rate = 0.5 * (1 - i/iterations) + 0.1  # 10-60% exploration\n        \n        if np.random.random() < exploration_rate:\n            # Exploration: random sampling across entire search space\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found solution\n            search_width = search_range * (0.2 * (1 - i/iterations) + 0.05)\n            x = np.clip(np.random.normal(best_x, search_width/3), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width/3), min_bound, max_bound)\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\nThe key improvements made to address the regressed metrics:\n\n1. Reverted to the proven adaptive exploration-exploitation strategy from Program 1 that gradually shifts from exploration to exploitation throughout the search process.\n\n2. Removed the complex improvement tracking logic that was likely causing the algorithm to get stuck in local minima.\n\n3. Restored the adaptive search width that decreases over time, allowing for broader exploration early and finer exploitation later.\n\n4. Maintained code simplicity and readability while ensuring optimal performance across all metrics.\n\nThis implementation should recover the high performance seen in Program 1, particularly improving the value_score, distance_score, overall_score, standard_deviation_score, and combined_score metrics that showed regression in the current program."]}}}