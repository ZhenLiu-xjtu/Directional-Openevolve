{"id": "7e9b626d-f5f1-4f75-97f3-a2066725821f", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm that balances exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search parameters - balance exploration (new areas) and exploitation (local search)\n    exploration_prob = 0.3  # 30% chance to explore new random areas\n    step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of bounds range for local search\n    \n    for _ in range(iterations):\n        # Exploration: random search in global space\n        if np.random.rand() < exploration_prob:\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        # Exploitation: local search around current best with noise\n        else:\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n            \n        # Evaluate and update best if current point is better\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")", "language": "python", "parent_id": "1713b8a5-2e85-4dab-aaa0-6ccdf838a17c", "generation": 1, "timestamp": 1755443650.6248317, "iteration_found": 8, "metrics": {"runs_successfully": 1.0, "value_score": 0.9878286914397769, "distance_score": 0.69746803507928, "overall_score": 0.9599291433755153, "standard_deviation_score": 0.5489593129795294, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7996457168775758, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.958585176516069, "distance_score": 0.5205446083574912, "overall_score": 0.22263705633621617, "standard_deviation_score": 0.47744928487667315, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7131852816810808, "success_rate": 1.0}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9586\n- distance_score: 0.5205\n- overall_score: 0.2226\n- standard_deviation_score: 0.4774\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.7132\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9586, distance_score: 0.5205, overall_score: 0.2226, standard_deviation_score: 0.4774, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.7132, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.7658)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x = np.random.uniform(bounds[0], bounds[1])\n    best_y = np.random.uniform(bounds[0], bounds[1])\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x = np.random.uniform(bounds[0], bounds[1])\n        y = np.random.uniform(bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9586), Performs well on distance_score (0.5205), Performs well on overall_score (0.2226), Performs well on standard_deviation_score (0.4774), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.7132), Performs well on success_rate (1.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x = np.random.uniform(bounds[0], bounds[1])\n    best_y = np.random.uniform(bounds[0], bounds[1])\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x = np.random.uniform(bounds[0], bounds[1])\n        y = np.random.uniform(bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm that balances exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search parameters - balance exploration (new areas) and exploitation (local search)\n    exploration_prob = 0.3  # 30% chance to explore new random areas\n    step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of bounds range for local search\n    \n    for _ in range(iterations):\n        # Exploration: random search in global space\n        if np.random.rand() < exploration_prob:\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        # Exploitation: local search around current best with noise\n        else:\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n            \n        # Evaluate and update best if current point is better\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\nThe key improvements in this version:\n\n1. **Simplified Initialization**: Combined best_x and best_y initialization into a single line using numpy's uniform distribution with size=2\n\n2. **Hybrid Search Strategy**: \n   - 30% chance for global exploration (random points across entire space)\n   - 70% chance for local exploitation (search around current best with Gaussian noise)\n   - This balances exploration of new areas with exploitation of promising regions\n\n3. **Cleaner Code Structure**:\n   - Reduced redundant variable assignments\n   - Combined coordinate clamping with np.clip()\n   - Streamlined the best update logic into a single line\n\n4. **Improved Readability**:\n   - Clearer parameter names and comments\n   - More compact but still readable structure\n   - Formatted print statement for better output readability\n\nThese changes maintain the original interface while creating a more efficient search algorithm that should find better minima (improving distance and overall scores) while keeping the code simple and maintainable."]}}}