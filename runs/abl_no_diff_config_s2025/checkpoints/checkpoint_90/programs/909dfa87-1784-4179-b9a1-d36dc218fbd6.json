{"id": "909dfa87-1784-4179-b9a1-d36dc218fbd6", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "a03b2a4a-be16-49cf-bfc7-16ceda614c54", "generation": 3, "timestamp": 1755444279.0139997, "iteration_found": 88, "metrics": {"runs_successfully": 1.0, "value_score": 0.9995296899146062, "distance_score": 0.9887413392999507, "overall_score": 0.9988221576513265, "standard_deviation_score": 0.9910796401576878, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9941107882566326, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9808249188836722, "distance_score": 0.8847343926865316, "overall_score": 0.9871604700959593, "standard_deviation_score": 0.9142829571511253, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9358023504797964, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9808\n- distance_score: 0.8847\n- overall_score: 0.9872\n- standard_deviation_score: 0.9143\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9358\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9891, overall_score: 0.9989, standard_deviation_score: 0.9917, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9944, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9896, overall_score: 0.9989, standard_deviation_score: 0.9924, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9947, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9906, overall_score: 0.9990, standard_deviation_score: 0.9921, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9950, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9974)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    \"\"\"Run the search algorithm and return results\"\"\"\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9906), Performs well on overall_score (0.9990), Performs well on standard_deviation_score (0.9921), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9950), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9972)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9896), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9924), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9947), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9971)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Slightly increased local exploration\n            # Perturb around best point with adaptive step size\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9891), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9917), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9944), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9968)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.25:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9966)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm with local exploration to find function minimum.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9974, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    \"\"\"Run the search algorithm and return results\"\"\"\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9702, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using combined coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point and evaluate\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.984)\n\n\n### Inspiration 3 (Score: 0.9653, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate and evaluate new candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.978)\n\n\n### Inspiration 4 (Score: 0.9953, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm balancing exploration and exploitation for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 5 (Score: 0.9972, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm to find function minimum.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random values\n    best_x = np.random.uniform(bounds[0], bounds[1])\n    best_y = np.random.uniform(bounds[0], bounds[1])\n    best_value = evaluate_function(best_x, best_y)\n    \n    for _ in range(iterations):\n        # Generate new candidate point\n        current_x = np.random.uniform(bounds[0], bounds[1])\n        current_y = np.random.uniform(bounds[0], bounds[1])\n        current_value = evaluate_function(current_x, current_y)\n        \n        # Update best point if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # 20% chance of local exploration around best point\n        if np.random.rand() < 0.2:\n            # Perturb around best point with decreasing step size\n            step = 0.1 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to restore performance while maintaining readability:\n\n1. Reintroduced the hybrid search strategy combining:\n   - 80% global exploration (random sampling across the search space)\n   - 20% local exploitation (focused search around the best found point)\n\n2. Added a decreasing step size for local exploration that:\n   - Starts relatively large to explore nearby regions\n   - Shrinks over time to focus on promising areas\n   - Uses normal distribution for more natural exploration pattern\n\n3. Maintained code simplicity by:\n   - Keeping the core algorithm structure easy to follow\n   - Using clear variable names\n   - Maintaining the same function signature and return type\n\nThis implementation should recover the high performance seen in previous top-performing programs while keeping the code maintainable and readable."]}}}