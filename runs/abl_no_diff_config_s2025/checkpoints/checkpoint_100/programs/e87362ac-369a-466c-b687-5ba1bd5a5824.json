{"id": "e87362ac-369a-466c-b687-5ba1bd5a5824", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration (30%)\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration (70%)\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution and update best if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "c3c77755-6f2d-418c-bb0c-5e5c18812c42", "generation": 3, "timestamp": 1755444256.5482624, "iteration_found": 83, "metrics": {"runs_successfully": 1.0, "value_score": 0.9897848512788344, "distance_score": 0.7087014458698248, "overall_score": 0.24084742842270718, "standard_deviation_score": 0.5488346905575254, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8042371421135358, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9995647568644793, "distance_score": 0.989054447025216, "overall_score": 0.9988735559982236, "standard_deviation_score": 0.9917552931486202, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9943677799911175, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9996\n- distance_score: 0.9891\n- overall_score: 0.9989\n- standard_deviation_score: 0.9918\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9944\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9888, overall_score: 0.9987, standard_deviation_score: 0.9882, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9935, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9876, overall_score: 0.9987, standard_deviation_score: 0.9903, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9935, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9891, overall_score: 0.9989, standard_deviation_score: 0.9918, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9944, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9971)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9891), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9918), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9944), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9966)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized random search with local exploration for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9876), Performs well on overall_score (0.9987), Performs well on standard_deviation_score (0.9903), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9935), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9965)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Generate candidate solution using adaptive search strategy\n        rand_val = np.random.rand()\n        \n        if rand_val < 0.3:  # Local exploration (30%)\n            # Perturb around best point with adaptive step size\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        elif rand_val < 0.5:  # Directed exploration from best point (20%)\n            x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:  # Pure random exploration (50%)\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution and update best if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9888), Performs well on overall_score (0.9987), Performs well on standard_deviation_score (0.9882), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9935), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9964)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9966)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * search_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8891, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized hybrid search algorithm for function minimization.\n    \n    Combines global exploration with local exploitation for improved performance\n    while maintaining simplicity and readability.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search parameters - simple but effective balance\n    exploration_prob = 0.3  # 30% exploration, 70% exploitation\n    step_size = (max_bound - min_bound) * 0.05  # Relative step size\n    \n    for _ in range(iterations):\n        # Exploration: random search across entire space\n        if np.random.rand() < exploration_prob:\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        \n        # Exploitation: local search around current best with Gaussian noise\n        else:\n            x = np.clip(best_x + np.random.normal(0, step_size), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step_size), min_bound, max_bound)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n### Inspiration 2 (Score: 0.9966, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized random search with local exploration for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 3 (Score: 0.8797, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point and evaluate\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n### Inspiration 4 (Score: 0.9966, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    search_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * search_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 5 (Score: 0.9640, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using combined coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration (30%)\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration (70%)\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution and update best if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to simplify the code while maintaining performance:\n\n1. **Simplified the exploration strategy** by reducing from three cases to two (local vs. global), removing the nested conditional for directed exploration while keeping the 30% local/70% global balance that worked well.\n\n2. **Streamlined variable initialization** by extracting bounds first for cleaner code flow.\n\n3. **Consolidated the update logic** into a single line for updating best_x, best_y, and best_value together.\n\n4. **Simplified comments** to focus on the most important information while maintaining clarity.\n\nThese changes improve readability and maintainability while preserving the core algorithm components that contributed to the strong performance metrics. The adaptive step size and exploration/exploitation balance that worked well in the original version have been retained."]}}}