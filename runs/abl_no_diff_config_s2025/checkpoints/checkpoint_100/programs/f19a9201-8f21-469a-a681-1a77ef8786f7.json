{"id": "f19a9201-8f21-469a-a681-1a77ef8786f7", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "d649dc9b-5259-4453-ad53-9e4451646986", "generation": 2, "timestamp": 1755444178.8995118, "iteration_found": 74, "metrics": {"runs_successfully": 1.0, "value_score": 0.9898959737277403, "distance_score": 0.7113908677776235, "overall_score": 0.9610804076996947, "standard_deviation_score": 0.5497582198579789, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8054020384984732, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9705316623562553, "distance_score": 0.8780082332929612, "overall_score": 0.9858926470102758, "standard_deviation_score": 0.9123713578707657, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.929463235051379, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9705\n- distance_score: 0.8780\n- overall_score: 0.9859\n- standard_deviation_score: 0.9124\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9295\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9888, overall_score: 0.9987, standard_deviation_score: 0.9882, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9935, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9876, overall_score: 0.9987, standard_deviation_score: 0.9903, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9935, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9891, overall_score: 0.9989, standard_deviation_score: 0.9918, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9944, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9971)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9891), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9918), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9944), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9966)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized random search with local exploration for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9876), Performs well on overall_score (0.9987), Performs well on standard_deviation_score (0.9903), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9935), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9965)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Generate candidate solution using adaptive search strategy\n        rand_val = np.random.rand()\n        \n        if rand_val < 0.3:  # Local exploration (30%)\n            # Perturb around best point with adaptive step size\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        elif rand_val < 0.5:  # Directed exploration from best point (20%)\n            x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:  # Pure random exploration (50%)\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution and update best if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9888), Performs well on overall_score (0.9987), Performs well on standard_deviation_score (0.9882), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9935), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9964)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and extract bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    for i in range(iterations):\n        # Adaptive search strategy with 20% local/80% global exploration\n        if np.random.rand() < 0.2:\n            # Local exploration with decreasing step size\n            step = 0.1 * (1 - i/iterations) * (max_bound - min_bound)\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Update best solution if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9945)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified hybrid search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search parameters with improved balance\n    exploration_prob = 0.4  # Increased exploration for better space coverage\n    step_size = (bounds[1] - bounds[0]) * 0.04  # Refined step size\n    \n    for _ in range(iterations):\n        # Exploration or exploitation\n        if np.random.rand() < exploration_prob:\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local search with clipped Gaussian noise\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n            \n        # Evaluate and update best if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9971, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9595, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using combined array operations\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best point if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.973)\n\n\n### Inspiration 3 (Score: 0.8749, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for cleaner code\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new candidate point and evaluate\n        new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        current_value = evaluate_function(*new_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = new_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.960)\n\n\n### Inspiration 4 (Score: 0.7743, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that balances exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using clear variable names\n    search_min, search_max = bounds\n    best_x, best_y = np.random.uniform(search_min, search_max, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global search) and exploitation (local search)\n        if np.random.random() < 0.15:  # 15% chance of global exploration\n            x, y = np.random.uniform(search_min, search_max, 2)\n        else:\n            # Focus search around current best solution\n            x = np.random.uniform(max(search_min, best_x - 0.5), min(search_max, best_x + 0.5))\n            y = np.random.uniform(max(search_min, best_y - 0.5), min(search_max, best_y + 0.5))\n            \n        current_value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.980)\n\n\n### Inspiration 5 (Score: 0.8797, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point and evaluate\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using combined coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point and evaluate\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with balanced exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_x, best_y = np.random.uniform(*bounds, 2)\n    best_value = evaluate_function(best_x, best_y)\n    min_bound, max_bound = bounds\n    bound_range = max_bound - min_bound\n    \n    for i in range(iterations):\n        # Adaptive search strategy with balanced exploration/exploitation\n        if np.random.rand() < 0.3:  # Local exploration around best point\n            # Perturb around best point with adaptive step size that decreases over time\n            step = 0.12 * (1 - i/iterations) * bound_range\n            x = np.clip(best_x + np.random.normal(0, step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step), min_bound, max_bound)\n        else:  # Global exploration with occasional directed search\n            if np.random.rand() < 0.2:  # Directed exploration from best point\n                x, y = np.random.normal([best_x, best_y], bound_range * 0.1)\n                x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n            else:  # Pure random exploration\n                x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to address the performance regression:\n\n1. Reintroduced the balanced exploration/exploitation strategy from the top-performing Program 1, which:\n   - Uses 30% local exploration around the best found point\n   - Uses 20% directed exploration from the best point\n   - Uses 50% pure random exploration\n\n2. Added adaptive step size that decreases over time for local exploration, focusing more on exploitation as the search progresses\n\n3. Maintained the same function signature and return format while significantly improving the search strategy\n\nThis implementation should recover the high performance seen in previous top-scoring programs while maintaining good readability and maintainability. The algorithm now intelligently balances between exploring new areas and exploiting promising regions, which is crucial for finding the global minimum of complex functions."]}}}