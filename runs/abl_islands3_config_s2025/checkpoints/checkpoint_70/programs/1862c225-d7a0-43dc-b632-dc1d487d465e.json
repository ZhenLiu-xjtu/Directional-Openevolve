{"id": "1862c225-d7a0-43dc-b632-dc1d487d465e", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: mostly random with occasional local refinement\n        if np.random.random() < 0.2:  # 20% chance to search locally around best point\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "338cb2d9-32eb-4ab0-8451-e771b220fc58", "generation": 3, "timestamp": 1755434005.1295147, "iteration_found": 44, "metrics": {"runs_successfully": 1.0, "value_score": 0.9971306133685451, "distance_score": 0.9534767011129475, "overall_score": 0.9951733858557144, "standard_deviation_score": 0.9657718460502464, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9758669292785718, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 9 lines with 3 lines\nChange 2: Replace 28 lines with 13 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9958970263959, "distance_score": 0.9431982608353927, "overall_score": 0.9939569304547117, "standard_deviation_score": 0.9555065087130272, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9697846522735579, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9959\n- distance_score: 0.9432\n- overall_score: 0.9940\n- standard_deviation_score: 0.9555\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9698\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9960, distance_score: 0.9400, overall_score: 0.9937, standard_deviation_score: 0.9551, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9686, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9959, distance_score: 0.9432, overall_score: 0.9940, standard_deviation_score: 0.9555, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9698, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9961, distance_score: 0.9518, overall_score: 0.9948, standard_deviation_score: 0.9616, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9741, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9865)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: mostly random with occasional local refinement\n        if np.random.random() < 0.2:  # 20% chance to search locally around best point\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9961), Performs well on distance_score (0.9518), Performs well on overall_score (0.9948), Performs well on standard_deviation_score (0.9616), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9741), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9843)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point more concisely\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around the new best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n            for _ in range(5):  # Limited local search iterations\n                # Explore nearby points\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = best_x + dx, best_y + dy\n                \n                # Keep within bounds\n                nx = np.clip(nx, bounds[0], bounds[1])\n                ny = np.clip(ny, bounds[0], bounds[1])\n                \n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                \n                # Reduce step size for finer search\n                step_size *= 0.5\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9959), Performs well on distance_score (0.9432), Performs well on overall_score (0.9940), Performs well on standard_deviation_score (0.9555), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9698), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9837)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9960), Performs well on distance_score (0.9400), Performs well on overall_score (0.9937), Performs well on standard_deviation_score (0.9551), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9686), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9755)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Pre-calculate search parameters\n    step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best using vector operations\n            perturbation = np.random.uniform(-step_size, step_size, size=2)\n            x, y = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = np.array([x, y])\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9783)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9865, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: mostly random with occasional local refinement\n        if np.random.random() < 0.2:  # 20% chance to search locally around best point\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.996)\n\n\n### Inspiration 2 (Score: 0.9755, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Pre-calculate search parameters\n    step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best using vector operations\n            perturbation = np.random.uniform(-step_size, step_size, size=2)\n            x, y = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = np.array([x, y])\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 11 lines with 14 lines\nChange 2: Replace 9 lines with 10 lines, Excellent runs_successfully (1.000), Excellent value_score (0.988)\n\n\n### Inspiration 3 (Score: 0.9783, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (0.992)\n\n\n### Inspiration 4 (Score: 0.9665, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    def generate_candidate():\n        return np.random.uniform(bounds[0], bounds[1], size=2)\n    \n    best_x, best_y = generate_candidate()\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate point and evaluate\n        candidate_x, candidate_y = generate_candidate()\n        candidate_value = evaluate_function(candidate_x, candidate_y)\n\n        if candidate_value < best_value:\n            best_value = candidate_value\n            best_x, best_y = candidate_x, candidate_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.981), Excellent overall_score (0.987)\n\n\n### Inspiration 5 (Score: 0.8904, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search strategy: explore globally first, then exploit locally\n        exploration_rate = max(0.1, 1.0 - i/iterations)\n        \n        if np.random.random() < exploration_rate:\n            # Global exploration with uniform random sampling\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Local exploitation around best found point with decreasing step size\n            step_size = 0.1 * exploration_rate * (bounds[1] - bounds[0])\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 18 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point more concisely\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around the new best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n            for _ in range(5):  # Limited local search iterations\n                # Explore nearby points\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = best_x + dx, best_y + dy\n                \n                # Keep within bounds\n                nx = np.clip(nx, bounds[0], bounds[1])\n                ny = np.clip(ny, bounds[0], bounds[1])\n                \n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                \n                # Reduce step size for finer search\n                step_size *= 0.5\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Code Simplification Improvements\n\nAfter analyzing the current program and performance metrics, I recommend simplifying the code while maintaining its effectiveness. The key opportunity is to reduce complexity in the initialization and local search phases.\n\n## 1. Simplify Initialization Process\n\nThe multiple initial points approach adds complexity without clear benefits over a well-designed random search.\n\n<<<<<<< SEARCH\n    # Initialize with multiple random points to find better starting position\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n=======\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n>>>>>>> REPLACE\n\n## 2. Simplify Search Strategy\n\nThe nested local search loop with decreasing step size can be replaced with a simpler adaptive search approach that maintains similar performance with less complexity.\n\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point more concisely\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around the new best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n            for _ in range(5):  # Limited local search iterations\n                # Explore nearby points\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = best_x + dx, best_y + dy\n                \n                # Keep within bounds\n                nx = np.clip(nx, bounds[0], bounds[1])\n                ny = np.clip(ny, bounds[0], bounds[1])\n                \n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                \n                # Reduce step size for finer search\n                step_size *= 0.5\n\n=======\n    for _ in range(iterations):\n        # Adaptive search: mostly random with occasional local refinement\n        if np.random.random() < 0.2:  # 20% chance to search locally around best point\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n>>>>>>> REPLACE\n\n## Rationale\n\nThese changes:\n1. Reduce code length by ~25% while maintaining core functionality\n2. Eliminate nested loops which improves readability\n3. Simplify the search strategy while keeping the adaptive element (local vs global search)\n4. Maintain the same return type and function signature\n5. Align with the top-performing Program 1 which has better combined metrics\n\nThe simplified code should be easier to maintain while potentially improving performance based on the metrics from Program 1, which has a higher distance_score (0.9518 vs 0.9432) and combined_score (0.9741 vs 0.9698) than the current implementation."]}}}