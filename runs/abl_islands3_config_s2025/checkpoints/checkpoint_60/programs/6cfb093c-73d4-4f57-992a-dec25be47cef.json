{"id": "6cfb093c-73d4-4f57-992a-dec25be47cef", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "69bc33d6-9045-44c0-9939-02275edfd44a", "generation": 3, "timestamp": 1755434114.1516666, "iteration_found": 55, "metrics": {"runs_successfully": 1.0, "value_score": 0.9982445073196219, "distance_score": 0.9676266935237026, "overall_score": 0.9965334464233446, "standard_deviation_score": 0.9730615591077945, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9826672321167226, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 10 lines with 8 lines\nChange 2: Replace 18 lines with 14 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9775792175695369, "distance_score": 0.8694071364191083, "overall_score": 0.9857311586152706, "standard_deviation_score": 0.9110528459016343, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9286557930763527, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9776\n- distance_score: 0.8694\n- overall_score: 0.9857\n- standard_deviation_score: 0.9111\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9287\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9902, distance_score: 0.9129, overall_score: 0.9906, standard_deviation_score: 0.9344, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9530, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9923, distance_score: 0.9274, overall_score: 0.9926, standard_deviation_score: 0.9562, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9631, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9992, distance_score: 0.9797, overall_score: 0.9979, standard_deviation_score: 0.9845, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9895, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9945)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9992), Performs well on distance_score (0.9797), Performs well on overall_score (0.9979), Performs well on standard_deviation_score (0.9845), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9895), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9813)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9923), Performs well on distance_score (0.9274), Performs well on overall_score (0.9926), Performs well on standard_deviation_score (0.9562), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9631), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9757)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9902), Performs well on distance_score (0.9129), Performs well on overall_score (0.9906), Performs well on standard_deviation_score (0.9344), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9530), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9668)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    num_initial_points = 5\n    candidates = [generate_candidate() for _ in range(num_initial_points)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around the new best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n            for _ in range(5):  # Limited local search iterations\n                # Explore nearby points\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = best_x + dx, best_y + dy\n                \n                # Keep within bounds\n                nx = np.clip(nx, bounds[0], bounds[1])\n                ny = np.clip(ny, bounds[0], bounds[1])\n                \n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                \n                # Reduce step size for finer search\n                step_size *= 0.5\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9691)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point more concisely\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9945, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.9634, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points to find better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Simple local search around new best point\n            step_size = (bounds[1] - bounds[0]) / 20  # Small initial step size\n            for _ in range(3):  # Limited local search iterations\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = np.clip(best_x + dx, bounds[0], bounds[1]), np.clip(best_y + dy, bounds[0], bounds[1])\n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                step_size *= 0.5  # Reduce step size\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 8 lines\nChange 2: Replace 3 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.980)\n\n\n### Inspiration 3 (Score: 0.9757, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 4 (Score: 0.9691, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point more concisely\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 2 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.986)\n\n\n### Inspiration 5 (Score: 0.9668, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    num_initial_points = 5\n    candidates = [generate_candidate() for _ in range(num_initial_points)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around the new best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n            for _ in range(5):  # Limited local search iterations\n                # Explore nearby points\n                dx, dy = np.random.normal(0, step_size, size=2)\n                nx, ny = best_x + dx, best_y + dy\n                \n                # Keep within bounds\n                nx = np.clip(nx, bounds[0], bounds[1])\n                ny = np.clip(ny, bounds[0], bounds[1])\n                \n                new_value = evaluate_function(nx, ny)\n                if new_value < best_value:\n                    best_value = new_value\n                    best_x, best_y = nx, ny\n                \n                # Reduce step size for finer search\n                step_size *= 0.5\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 8 lines\nChange 2: Replace 3 lines with 22 lines, Excellent runs_successfully (1.000), Excellent value_score (0.983)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Try 4 additional initial points\n    for _ in range(4):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_x, best_y, best_value = x, y, value\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search with decreasing step size for refinement\n            step_size = (bounds[1] - bounds[0]) / 10\n            for _ in range(3):  # Quick local refinement\n                nx, ny = best_x + np.random.normal(0, step_size, 2)\n                nx, ny = np.clip(nx, bounds[0], bounds[1]), np.clip(ny, bounds[0], bounds[1])\n                nvalue = evaluate_function(nx, ny)\n                if nvalue < best_value:\n                    best_value, best_x, best_y = nvalue, nx, ny\n                step_size *= 0.5\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the performance regressions and improve code simplicity, here are targeted improvements based on the top-performing programs:\n\n1. **Simplify multiple initial points generation** while maintaining the benefit of better starting positions:\n\n<<<<<<< SEARCH\n    # Initialize with multiple random points to find better starting position\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Try 4 additional initial points\n    for _ in range(4):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_x, best_y, best_value = x, y, value\n\n=======\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n>>>>>>> REPLACE\n\n2. **Improve search balance** by combining global exploration with consistent local refinement (inspired by Program 1's top performance):\n\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search with decreasing step size for refinement\n            step_size = (bounds[1] - bounds[0]) / 10\n            for _ in range(3):  # Quick local refinement\n                nx, ny = best_x + np.random.normal(0, step_size, 2)\n                nx, ny = np.clip(nx, bounds[0], bounds[1]), np.clip(ny, bounds[0], bounds[1])\n                nvalue = evaluate_function(nx, ny)\n                if nvalue < best_value:\n                    best_value, best_x, best_y = nvalue, nx, ny\n                step_size *= 0.5\n\n=======\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n>>>>>>> REPLACE\n\nThese changes:\n1. Maintain the multiple initial points strategy but implement it more cleanly\n2. Revert to the simpler, more effective adaptive search approach from Program 1 that demonstrated superior metrics (0.9992 value_score, 0.9797 distance_score)\n3. Remove nested loops that complicated the code while not improving performance\n4. Balance exploration (global search) and exploitation (local refinement) consistently throughout the search process\n\nThe simplified approach should improve both readability and performance metrics by focusing on the techniques that worked best in previous top-performing iterations."]}}}