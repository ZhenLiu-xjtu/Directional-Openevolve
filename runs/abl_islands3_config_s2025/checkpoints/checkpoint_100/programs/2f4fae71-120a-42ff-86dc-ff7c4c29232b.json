{"id": "2f4fae71-120a-42ff-86dc-ff7c4c29232b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm with local refinement.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "06399e2c-513c-4851-92aa-94af6d8ebe73", "generation": 4, "timestamp": 1755434443.7680216, "iteration_found": 80, "metrics": {"runs_successfully": 1.0, "value_score": 0.998868878222796, "distance_score": 0.9761423849225835, "overall_score": 0.9975132993591089, "standard_deviation_score": 0.9815627734733092, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9875664967955446, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 3 lines with 8 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9984233628951381, "distance_score": 0.9653681242130595, "overall_score": 0.9964473968280083, "standard_deviation_score": 0.974549818260861, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9822369841400415, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9984\n- distance_score: 0.9654\n- overall_score: 0.9964\n- standard_deviation_score: 0.9745\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9822\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9984, distance_score: 0.9654, overall_score: 0.9964, standard_deviation_score: 0.9745, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9822, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9982, distance_score: 0.9676, overall_score: 0.9965, standard_deviation_score: 0.9731, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9827, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9984, distance_score: 0.9671, overall_score: 0.9966, standard_deviation_score: 0.9753, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9830, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9912)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9984), Performs well on distance_score (0.9671), Performs well on overall_score (0.9966), Performs well on standard_deviation_score (0.9753), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9830), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9909)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9982), Performs well on distance_score (0.9676), Performs well on overall_score (0.9965), Performs well on standard_deviation_score (0.9731), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9827), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9908)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm with local refinement.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9984), Performs well on distance_score (0.9654), Performs well on overall_score (0.9964), Performs well on standard_deviation_score (0.9745), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9822), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9873)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9900)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9912, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 8 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 2 (Score: 0.9900, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point more concisely\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: global exploration with local refinement\n        if np.random.random() < 0.2:  # 20% chance for local search around best point\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 3 (Score: 0.9837, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small perturbation around current best\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space\n            x = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (0.996)\n\n\n### Inspiration 4 (Score: 0.9665, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    def generate_candidate():\n        return np.random.uniform(bounds[0], bounds[1], size=2)\n    \n    best_x, best_y = generate_candidate()\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate point and evaluate\n        candidate_x, candidate_y = generate_candidate()\n        candidate_value = evaluate_function(candidate_x, candidate_y)\n\n        if candidate_value < best_value:\n            best_value = candidate_value\n            best_x, best_y = candidate_x, candidate_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.981), Excellent overall_score (0.987)\n\n\n### Inspiration 5 (Score: 0.9851, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search strategy: balance global exploration and local exploitation\n        if np.random.random() < 0.2:  # 20% chance for local refinement\n            # Small perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.996)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm with local refinement.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Enhanced search: occasionally explore around best solution\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Small Gaussian perturbation around current best\n            x = np.clip(best_x + np.random.normal(0, 0.3), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.3), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["```python\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n=======\n    # Initialize with multiple random points to find better starting position\n    def generate_candidate():\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        return x, y, evaluate_function(x, y)\n    \n    # Try 5 initial points for better starting position\n    candidates = [generate_candidate() for _ in range(5)]\n    best_x, best_y, best_value = min(candidates, key=lambda c: c[2])\n>>>>>>> REPLACE\n```\n\nThis change implements a multiple initial candidate approach that was used in the top-performing Program 1. The key benefits are:\n\n1. **Improved starting position**: By evaluating 5 initial random points instead of just 1, we're more likely to find a better starting position that's closer to the global minimum.\n\n2. **Maintained simplicity**: While adding a few more lines of code, we preserve readability through clear function naming and comments.\n\n3. **Proven effectiveness**: This approach was used in the highest-scoring programs (Program 1 and Inspiration 1) which showed better value_score and distance_score metrics.\n\nThe change maintains all the existing strengths of the algorithm while potentially helping it avoid local minima by starting from a better initial position. The core search logic remains unchanged, preserving the program's excellent speed and reliability scores."]}}}