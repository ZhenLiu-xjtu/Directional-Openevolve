{"id": "ee4f4cc7-3423-42e7-85e5-e6f4de78d1cd", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point in the search space\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search strategy - 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # Global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "06913bbc-52d5-4090-9df7-8a0056a37cad", "generation": 4, "timestamp": 1755424334.3140743, "iteration_found": 86, "metrics": {"runs_successfully": 1.0, "value_score": 0.9898359433011407, "distance_score": 0.7112067528592936, "overall_score": 0.9610309071454797, "standard_deviation_score": 0.548947960356229, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8051545357273978, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 15 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9738083334220771, "distance_score": 0.8604384060623836, "overall_score": 0.9846494705693758, "standard_deviation_score": 0.906304970136588, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.923247352846879, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9738\n- distance_score: 0.8604\n- overall_score: 0.9846\n- standard_deviation_score: 0.9063\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9232\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9908, overall_score: 0.9990, standard_deviation_score: 0.9930, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9952, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9932, overall_score: 0.9993, standard_deviation_score: 0.9943, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9964, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9942, overall_score: 0.9994, standard_deviation_score: 0.9963, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9971, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9985)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search strategy - 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # Global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9942), Performs well on overall_score (0.9994), Performs well on standard_deviation_score (0.9963), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9971), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9981)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random point\n        # Adaptive search: explore locally around best findings with decreasing step size\n        if np.random.random() < 0.3:  # 30% chance for local search\n            # Step size decreases over time to focus on promising areas\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 70% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        # Accept new solution if better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9932), Performs well on overall_score (0.9993), Performs well on standard_deviation_score (0.9943), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9964), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9975)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    bounds_range = max_bound - min_bound\n\n    for i in range(iterations):\n        # Hybrid search strategy: 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = bounds_range * (1 - i/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step_size), min_bound, max_bound)\n        else:  # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9908), Performs well on overall_score (0.9990), Performs well on standard_deviation_score (0.9930), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9952), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9886)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Enhanced random search algorithm with local exploration for function minimization.\n    \n    Combines global random search with occasional local exploration around promising points\n    to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Search space bounds as (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) containing the minimum found\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    best_value = float('inf')\n    best_x, best_y = 0, 0\n    \n    # Initial exploration with 5 random points\n    for _ in range(5):\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    for _ in range(iterations):\n        # Adaptive search: explore around best point with 20% probability\n        if np.random.rand() < 0.2:\n            # Local exploration around best point\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])*0.05)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])*0.05)\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9973)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points for better starting position\n    min_bound, max_bound = bounds\n    best_value = float('inf')\n    best_x, best_y = 0, 0\n    \n    # Initial exploration with 5 random points\n    for _ in range(5):\n        x, y = np.random.uniform(min_bound, max_bound, size=2)\n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    for i in range(iterations):\n        # Hybrid search strategy - 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = (max_bound - min_bound) * (1 - i/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, step_size), min_bound, max_bound)\n        else:  # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9985, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search strategy - 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # Global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 15 lines\nChange 2: Replace 10 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.8799, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (vectorized)\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (vectorized)\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        x, y = point\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 4 lines\nChange 2: Replace 4 lines with 4 lines, Excellent runs_successfully (1.000), Excellent value_score (0.972)\n\n\n### Inspiration 3 (Score: 0.9530, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate coordinates in one line\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.958)\n\n\n### Inspiration 4 (Score: 0.9886, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Enhanced random search algorithm with local exploration for function minimization.\n    \n    Combines global random search with occasional local exploration around promising points\n    to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Search space bounds as (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) containing the minimum found\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    best_value = float('inf')\n    best_x, best_y = 0, 0\n    \n    # Initial exploration with 5 random points\n    for _ in range(5):\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    for _ in range(iterations):\n        # Adaptive search: explore around best point with 20% probability\n        if np.random.rand() < 0.2:\n            # Local exploration around best point\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])*0.05)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])*0.05)\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.997), Excellent distance_score (0.957)\n\n\n### Inspiration 5 (Score: 0.9981, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random point\n        # Adaptive search: explore locally around best findings with decreasing step size\n        if np.random.random() < 0.3:  # 30% chance for local search\n            # Step size decreases over time to focus on promising areas\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 70% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        # Accept new solution if better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (1.000), Excellent distance_score (0.993)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point in the search space\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate a random candidate point\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Analysis of Current Performance Issues\n\nThe current program uses a pure random search algorithm which explains the significant drop in performance metrics compared to previous versions. The top-performing programs all implemented a hybrid approach combining both local exploration and global search, which is missing in the current implementation.\n\n# Proposed Improvements\n\nI recommend reintroducing the hybrid search strategy that made previous versions successful, while keeping the code clean and maintainable:\n\n```diff\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Generate a random candidate point\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n=======\n    for _ in range(iterations):\n        # Hybrid search strategy - 30% local exploration, 70% global search\n        if np.random.random() < 0.3:  # Local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # Global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n```\n\n# Explanation of Changes\n\nThis change reintroduces two key mechanisms that made previous versions successful:\n\n1. **Hybrid Search Strategy**: By using a 30%/70% split between local exploration and global search, we balance exploitation of known good solutions with exploration of new areas.\n\n2. **Adaptive Step Size**: The step size for local exploration decreases over time, starting large for broader exploration and becoming smaller to fine-tune the solution as we approach the end of the iterations.\n\n3. **Local Exploration**: Instead of only generating random points globally, we occasionally explore around our best found solution using a normal distribution, which helps find better local minima.\n\nThese changes should significantly improve the value_score, distance_score, and overall_score by helping the algorithm find better minima while maintaining the perfect scores for runs_successfully, speed_score, and reliability_score.\n\nThe code remains maintainable and readable while incorporating these performance-enhancing techniques from the top-performing previous versions."]}}}