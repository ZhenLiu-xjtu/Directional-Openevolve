{"id": "32006250-9380-4dd2-8747-680f6f0fff71", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search combining local exploration and global search\n        if np.random.random() < 0.3:  # 30% local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            current_x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            current_y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 70% global exploration\n            current_x, current_y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        current_value = evaluate_function(current_x, current_y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "a465b339-d729-4915-a11c-d182a61925b5", "generation": 4, "timestamp": 1755424264.4385214, "iteration_found": 77, "metrics": {"runs_successfully": 1.0, "value_score": 0.9899262827479115, "distance_score": 0.7119646582506453, "overall_score": 0.9611131261197037, "standard_deviation_score": 0.5495190062451154, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.805565630598518, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 10 lines with 13 lines\nChange 2: Replace 7 lines with 16 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9830308153380067, "distance_score": 0.8985965794309178, "overall_score": 0.9887794796707338, "standard_deviation_score": 0.9266390509227249, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9438973983536687, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9830\n- distance_score: 0.8986\n- overall_score: 0.9888\n- standard_deviation_score: 0.9266\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9439\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9983, distance_score: 0.9657, overall_score: 0.9965, standard_deviation_score: 0.9753, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9825, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9899, overall_score: 0.9990, standard_deviation_score: 0.9937, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9950, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9945, overall_score: 0.9994, standard_deviation_score: 0.9958, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9971, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9985)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)\n\n    for _ in range(iterations):\n        # Generate new candidate point using adaptive search strategy\n        if np.random.random() < 0.3:  # 30% local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            coords = np.clip(\n                best_coords + np.random.normal(0, step_size, size=2),\n                bounds[0], bounds[1]\n            )\n        else:  # 70% global exploration\n            coords = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        # Evaluate candidate solution\n        value = evaluate_function(*coords)\n        \n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()\n\n    return best_coords[0], best_coords[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9945), Performs well on overall_score (0.9994), Performs well on standard_deviation_score (0.9958), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9971), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9975)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Hybrid search combining local exploration and global search\n        if np.random.random() < 0.3:  # 30% local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - i/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 70% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        # Evaluate candidate solution\n        value = evaluate_function(x, y)\n        \n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9899), Performs well on overall_score (0.9990), Performs well on standard_deviation_score (0.9937), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9950), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9909)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore around best found solution with decreasing radius\n        explore_factor = max(0.1, 1.0 - _/iterations)\n        x = best_x + explore_factor * np.random.uniform(-1, 1) * (bounds[1]-bounds[0])/2\n        y = best_y + explore_factor * np.random.uniform(-1, 1) * (bounds[1]-bounds[0])/2\n        \n        # Keep within bounds\n        x = np.clip(x, bounds[0], bounds[1])\n        y = np.clip(y, bounds[0], bounds[1])\n        \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Occasionally try completely new random point to avoid local minima\n        if _ % 50 == 0:\n            x, y = np.random.uniform(*bounds, size=2)\n            value = evaluate_function(x, y)\n            if value < best_value:\n                best_value = value\n                best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9983), Performs well on distance_score (0.9657), Performs well on overall_score (0.9965), Performs well on standard_deviation_score (0.9753), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9825), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9712)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        current_x, current_y = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(current_x, current_y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9857)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search with occasional local exploration\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n        \n        # 10% chance to explore around the best point to escape local minima\n        if np.random.random() < 0.1:\n            explore_x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            explore_y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            explore_value = evaluate_function(explore_x, explore_y)\n            if explore_value < value:  # Keep if better than current random point\n                x, y, value = explore_x, explore_y, explore_value\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9985, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)\n\n    for _ in range(iterations):\n        # Generate new candidate point using adaptive search strategy\n        if np.random.random() < 0.3:  # 30% local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            coords = np.clip(\n                best_coords + np.random.normal(0, step_size, size=2),\n                bounds[0], bounds[1]\n            )\n        else:  # 70% global exploration\n            coords = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        # Evaluate candidate solution\n        value = evaluate_function(*coords)\n        \n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()\n\n    return best_coords[0], best_coords[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 13 lines\nChange 2: Replace 8 lines with 19 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9523, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.967), Excellent overall_score (0.982)\n\n\n### Inspiration 3 (Score: 0.9673, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    min_bound, max_bound = bounds\n    \n    def generate_random_point():\n        return np.random.uniform(min_bound, max_bound, size=2)\n    \n    best_x, best_y = generate_random_point()\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        current_x, current_y = generate_random_point()\n        current_value = evaluate_function(current_x, current_y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 8 lines\nChange 2: Replace 8 lines with 7 lines, Excellent runs_successfully (1.000), Excellent value_score (0.982)\n\n\n### Inspiration 4 (Score: 0.9565, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point in the search space\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate a random candidate point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        x, y = point\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 3 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.967)\n\n\n### Inspiration 5 (Score: 0.7529, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to find better starting position\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select the best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        # Adaptive search strategy: explore globally and locally\n        if np.random.random() < 0.8:  # 80% chance for local exploration\n            # Local exploration around best point with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 20% chance for global exploration\n            # Global exploration with uniform sampling\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 9 lines\nChange 2: Replace 8 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        current_x, current_y = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(current_x, current_y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the declining metrics while maintaining simplicity, we'll implement a hybrid search strategy that combines local exploration with global search, similar to the top-performing programs.\n\n```python\n<<<<<<< SEARCH\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n=======\n    \"\"\"\n    A hybrid search algorithm combining local exploration and global search.\n    \n    Uses adaptive step sizes to balance exploration and exploitation for improved\n    function minimization performance.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        current_x, current_y = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(current_x, current_y)\n\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n=======\n    for _ in range(iterations):\n        # Hybrid search combining local exploration and global search\n        if np.random.random() < 0.3:  # 30% local exploration\n            # Adaptive step size decreases over time\n            step_size = (bounds[1] - bounds[0]) * (1 - _/iterations) * 0.1\n            current_x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            current_y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 70% global exploration\n            current_x, current_y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        current_value = evaluate_function(current_x, current_y)\n        \n        # Update best solution if improved\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = current_x, current_y\n>>>>>>> REPLACE\n```\n\nThese changes:\n1. Update the docstring to accurately describe the improved algorithm\n2. Implement a hybrid search strategy with:\n   - 30% local exploration around the best found point using adaptive step sizes\n   - 70% global exploration to discover new promising regions\n   - Step size that decreases over time (more exploration early, more exploitation later)\n   - Bounds checking to ensure we stay within the search space\n\nThis approach should improve all the regression metrics by:\n- Finding better minima (value_score) through local refinement\n- Exploring more effectively throughout the search space (distance_score)\n- Providing more consistent results (standard_deviation_score)\n- Maintaining simplicity and readability while adding powerful search capabilities\n\nThe changes are based on the top-performing programs (especially Program 1 and 2) that demonstrated strong performance across all metrics."]}}}