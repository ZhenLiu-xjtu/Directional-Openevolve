{"id": "f42442e5-b28f-449a-b80c-d32be2a78914", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search with dynamic parameters\n        exploration_ratio = 0.3  # Slightly increase local exploration to 30%\n        current_std = 0.5 * (1 - _/iterations)  # Decrease perturbation over time\n        \n        if np.random.random() < exploration_ratio:\n            # Add adaptive perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, current_std), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, current_std), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "8fd36a26-e7b6-4914-8594-1b7059e76720", "generation": 3, "timestamp": 1755448609.9581285, "iteration_found": 62, "metrics": {"runs_successfully": 1.0, "value_score": 0.9899325197207081, "distance_score": 0.7120511471223849, "overall_score": 0.9611279543130233, "standard_deviation_score": 0.549727440850169, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8056397715651163, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 4 lines\nChange 2: Replace 2 lines with 2 lines\nChange 3: Replace 3 lines with 2 lines\nChange 4: Replace 5 lines with 8 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.997311667421854, "distance_score": 0.9520323191160754, "overall_score": 0.9950801515919753, "standard_deviation_score": 0.9656518133580039, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9754007579598761, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9973\n- distance_score: 0.9520\n- overall_score: 0.9951\n- standard_deviation_score: 0.9657\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9754\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9982, distance_score: 0.9638, overall_score: 0.9962, standard_deviation_score: 0.9719, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9811, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9984, distance_score: 0.9698, overall_score: 0.9968, standard_deviation_score: 0.9757, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9840, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9969, overall_score: 0.9997, standard_deviation_score: 0.9974, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9983, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9991)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1200, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search with dynamic parameters\n        exploration_ratio = 0.3  # Slightly increase local exploration to 30%\n        current_std = 0.5 * (1 - _/iterations)  # Decrease perturbation over time\n        \n        if np.random.random() < exploration_ratio:\n            # Add adaptive perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, current_std), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, current_std), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9969), Performs well on overall_score (0.9997), Performs well on standard_deviation_score (0.9974), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9983), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9916)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    \n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    stagnation_counter = 0  # Track iterations without improvement\n\n    for _ in range(iterations):\n        # Adaptive search with stagnation detection\n        if stagnation_counter > iterations // 5:  # If stuck, diversify\n            # Wider exploration when stagnant\n            x = np.clip(best_x + np.random.normal(0, 1.0), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 1.0), min_bound, max_bound)\n            stagnation_counter = 0\n        elif np.random.random() < 0.3:  # Increased local exploration (30%)\n            # Focused local search with smaller perturbations\n            x = np.clip(best_x + np.random.normal(0, 0.4), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.4), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            stagnation_counter = 0  # Reset counter on improvement\n        else:\n            stagnation_counter += 1  # Increment counter when no improvement\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9984), Performs well on distance_score (0.9698), Performs well on overall_score (0.9968), Performs well on standard_deviation_score (0.9757), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9840), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9901)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore locally sometimes, new areas other times\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9982), Performs well on distance_score (0.9638), Performs well on overall_score (0.9962), Performs well on standard_deviation_score (0.9719), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9811), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9891)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore locally sometimes, new areas other times\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9894)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore locally sometimes, new areas other times\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9991, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1200, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search with dynamic parameters\n        exploration_ratio = 0.3  # Slightly increase local exploration to 30%\n        current_std = 0.5 * (1 - _/iterations)  # Decrease perturbation over time\n        \n        if np.random.random() < exploration_ratio:\n            # Add adaptive perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, current_std), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, current_std), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (1.000), Excellent distance_score (0.997)\n\n\n### Inspiration 2 (Score: 0.9885, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive random search algorithm for function minimization.\n    \n    Balances exploration of the search space with exploitation of promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Perturb best solution slightly\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n        else:\n            # Global exploration with random point\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 26 lines with 27 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 3 (Score: 0.9802, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Improved random search with stagnation detection to escape local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    stagnation_counter = 0  # Track when we're stuck in local minima\n    \n    for _ in range(iterations):\n        # Adaptive search with stagnation handling\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Increase perturbation size if stagnated\n            perturbation = 0.5 + (stagnation_counter / iterations) * 2\n            x = np.clip(best_x + np.random.normal(0, perturbation), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, perturbation), min_bound, max_bound)\n        else:\n            # Global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            stagnation_counter = 0  # Reset when we find improvement\n        else:\n            stagnation_counter += 1  # Increment when no improvement\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 34 lines with 37 lines, Excellent runs_successfully (1.000), Excellent value_score (0.994)\n\n\n### Inspiration 4 (Score: 0.9875, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: sometimes explore around best solution, sometimes try new random point\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n        else:\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 4 lines\nChange 2: Replace 9 lines with 15 lines, Excellent runs_successfully (1.000), Excellent value_score (0.997)\n\n\n### Inspiration 5 (Score: 0.9746, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random coordinates\n        x, y = np.random.uniform(min_bound, max_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 4 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.988)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore locally sometimes, new areas other times\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:\n            # Generate random coordinates\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            x, y = point\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To address the performance regressions and improve code readability, here are targeted improvements based on the top-performing programs in the evolution history:\n\n```python\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n=======\n    # Extract bounds for readability\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n=======\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n            # Generate random coordinates\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            x, y = point\n=======\n            # Generate random coordinates\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n        # Adaptive search: explore locally sometimes, new areas other times\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Add small perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, 0.5), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, 0.5), min_bound, max_bound)\n=======\n        # Adaptive search with dynamic parameters\n        exploration_ratio = 0.3  # Slightly increase local exploration to 30%\n        current_std = 0.5 * (1 - _/iterations)  # Decrease perturbation over time\n        \n        if np.random.random() < exploration_ratio:\n            # Add adaptive perturbation to best solution\n            x = np.clip(best_x + np.random.normal(0, current_std), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, current_std), min_bound, max_bound)\n>>>>>>> REPLACE\n```\n\nThese changes:\n\n1. Extract bounds into named variables for improved readability and reduced repetition\n2. Remove unnecessary intermediate variable in the random coordinate generation\n3. Increase exploration ratio from 20% to 30% to match the top-performing Program 1\n4. Add dynamic perturbation sizing that decreases over time, which helps with finer exploration near promising solutions as the search progresses\n\nThese improvements should help recover the lost performance in value_score, distance_score, and overall_score while maintaining good speed and reliability metrics. The changes maintain the core algorithm while incorporating elements from the historically best-performing programs."]}}}