{"id": "79a5af12-6e8f-4006-ab45-f7a9a179dea6_migrant_4", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Samples random points within specified bounds and tracks the minimum value found.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple specifying search space boundaries (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "79a5af12-6e8f-4006-ab45-f7a9a179dea6", "generation": 3, "timestamp": 1755437026.09055, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9996261320067028, "distance_score": 0.9947182111657354, "overall_score": 0.9994356789106987, "standard_deviation_score": 0.9957893722156994, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9971783945534933, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 20 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9768149837065123, "distance_score": 0.8680195567374882, "overall_score": 0.9855480682404638, "standard_deviation_score": 0.9102412602345944, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9277403412023191, "success_rate": 1.0}, "island": 4, "migrant": true}, "artifacts_json": null, "artifact_dir": null}