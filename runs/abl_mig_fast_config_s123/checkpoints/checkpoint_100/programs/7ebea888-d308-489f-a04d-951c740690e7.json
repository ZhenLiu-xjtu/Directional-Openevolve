{"id": "7ebea888-d308-489f-a04d-951c740690e7", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search optimization algorithm for function minimization.\n    \n    Explores the search space by generating random candidate solutions\n    and tracking the best solution found.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "96bb39ed-a25f-4ac3-89b3-9cd91ec31e18", "generation": 3, "timestamp": 1755436854.0055046, "iteration_found": 76, "metrics": {"runs_successfully": 1.0, "value_score": 0.9899195719484737, "distance_score": 0.7123456472117092, "overall_score": 0.9611655484126657, "standard_deviation_score": 0.5501745767863198, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.805827742063328, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 12 lines with 25 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9557098631762463, "distance_score": 0.826430679917134, "overall_score": 0.9789134806236828, "standard_deviation_score": 0.8540910651786537, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8945674031184139, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9557\n- distance_score: 0.8264\n- overall_score: 0.9789\n- standard_deviation_score: 0.8541\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.8946\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9913, overall_score: 0.9991, standard_deviation_score: 0.9930, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9954, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9918, overall_score: 0.9992, standard_deviation_score: 0.9942, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9958, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9947, overall_score: 0.9994, standard_deviation_score: 0.9958, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9972, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9985)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Samples random points within specified bounds and tracks the minimum value found.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple specifying search space boundaries (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9947), Performs well on overall_score (0.9994), Performs well on standard_deviation_score (0.9958), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9972), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9978)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (bounds[1] - bounds[0]) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, search_width), bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9918), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9942), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9958), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9976)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (bounds[1] - bounds[0]) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, search_width), bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9913), Performs well on overall_score (0.9991), Performs well on standard_deviation_score (0.9930), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9954), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9652)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9970)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Samples random points within specified bounds and tracks the minimum value found.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple specifying search space boundaries (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9985, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Samples random points within specified bounds and tracks the minimum value found.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple specifying search space boundaries (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 20 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9519, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Initialize with a random point using vectorized operation\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point in one line\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 3 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.963)\n\n\n### Inspiration 3 (Score: 0.9522, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.967), Excellent overall_score (0.981)\n\n\n### Inspiration 4 (Score: 0.9603, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate point\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.974), Excellent overall_score (0.984)\n\n\n### Inspiration 5 (Score: 0.9511, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate solution\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.964), Excellent overall_score (0.981)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search optimization algorithm for function minimization.\n    \n    Explores the search space by generating random candidate solutions\n    and tracking the best solution found.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Performance Improvement Suggestions\n\nBased on the analysis, the current program has regressed in several key metrics compared to previous top-performing versions. The primary issue appears to be the loss of the adaptive search strategy that balanced exploration and exploitation.\n\n## Key Improvement: Restore Adaptive Search Strategy\n\n```diff\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n=======\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Adaptive search strategy: balance exploration and exploitation\n    for i in range(iterations):\n        # Early iterations: more exploration (wide search)\n        # Later iterations: more exploitation (focus around good points)\n        exploration_ratio = 1.0 - (i / iterations)\n        \n        if np.random.random() < exploration_ratio:\n            # Exploration: random search across entire bounds\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Exploitation: local search around best found point\n            search_width = (max_bound - min_bound) * exploration_ratio / 3\n            x = np.clip(best_x + np.random.normal(0, search_width), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, search_width), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n```\n\n## Explanation of Changes\n\n1. **Restored Adaptive Strategy**: The new code implements an adaptive search that starts with broad exploration and gradually shifts to focused exploitation of promising regions. This matches the approach used in Program 1, which achieved the highest combined_score (0.9972).\n\n2. **Separation of Bounds**: By explicitly separating `min_bound` and `max_bound`, the code becomes more readable and avoids repeated indexing into the bounds tuple.\n\n3. **Balanced Exploration/Exploitation**: \n   - Early iterations spend more time exploring the entire search space\n   - Later iterations focus on exploiting promising regions around the best found point\n   - The transition is controlled by `exploration_ratio` that decreases linearly\n\n4. **Controlled Local Search**: The exploitation phase uses a search width that decreases over time, allowing progressively finer-grained exploration around promising solutions.\n\nThese changes should significantly improve the value_score, distance_score, and overall_score by enabling the algorithm to find better minima while maintaining the perfect scores for runs_successfully, speed_score, and reliability_score."]}}}