{"id": "b6ac4da6-bbd6-4477-a762-03629a56ca9c", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (vectorized for conciseness)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (vectorized for conciseness)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "51591f56-e4e8-48ed-a369-8638a028bcf2", "generation": 1, "timestamp": 1755428984.1170378, "iteration_found": 3, "metrics": {"runs_successfully": 1.0, "value_score": 0.9735696550953499, "distance_score": 0.8732019289103216, "overall_score": 0.9852125788981428, "standard_deviation_score": 0.8984642004436441, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9260628944907139, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"island": 1}, "artifacts_json": null, "artifact_dir": null}