{"id": "1811ead7-dc3b-4625-8e17-f432f6ed724b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Enhanced random search algorithm with local refinement for function minimization.\n    \n    Combines multiple initial points with local refinement around promising solutions\n    to balance exploration and exploitation of the search space.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with multiple random points to better explore search space\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around promising points\n            for _ in range(10):\n                # Small perturbations around the best found point\n                local_x = best_x + np.random.normal(0, 0.1)\n                local_y = best_y + np.random.normal(0, 0.1)\n                \n                # Keep within bounds\n                local_x = np.clip(local_x, bounds[0], bounds[1])\n                local_y = np.clip(local_y, bounds[0], bounds[1])\n                \n                local_value = evaluate_function(local_x, local_y)\n                if local_value < best_value:\n                    best_value = local_value\n                    best_x, best_y = local_x, local_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "3fc76a08-50d9-4351-80fe-3d355b698993", "generation": 3, "timestamp": 1755430023.1831648, "iteration_found": 89, "metrics": {"runs_successfully": 1.0, "value_score": 0.9818903370315023, "distance_score": 0.8954059702112251, "overall_score": 0.9881973687394154, "standard_deviation_score": 0.9196656808106117, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.940986843697077, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 9 lines\nChange 2: Replace 3 lines with 18 lines\nChange 3: Replace 10 lines with 13 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9503052418596292, "distance_score": 0.6313133877736467, "overall_score": 0.9526643976334628, "standard_deviation_score": 0.5487773389783335, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7633219881673133, "success_rate": 1.0}, "island": 5}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9503\n- distance_score: 0.6313\n- overall_score: 0.9527\n- standard_deviation_score: 0.5488\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.7633\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9800, distance_score: 0.8782, overall_score: 0.9866, standard_deviation_score: 0.9123, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9328, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9941, distance_score: 0.9354, overall_score: 0.9930, standard_deviation_score: 0.9479, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9649, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9942, distance_score: 0.9419, overall_score: 0.9936, standard_deviation_score: 0.9516, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9680, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9832)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    Adaptive random search algorithm for function minimization.\n    \n    Combines random exploration with occasional local refinement to balance\n    between global exploration and local exploitation of promising regions.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple containing (min, max) values defining the search space\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random starting point within search bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Main search loop with adaptive strategy\n    for i in range(iterations):\n        # Adaptive search strategy: 80% random exploration, 20% local refinement\n        if i % 5 == 0 and i > 0:  # Local refinement every 5 iterations\n            # Search around current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, step_size/4), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size/4), bounds[0], bounds[1])\n        else:  # Random exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9942), Performs well on distance_score (0.9419), Performs well on overall_score (0.9936), Performs well on standard_deviation_score (0.9516), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9680), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9817)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to better explore search space\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        # Simple random search (vectorized for conciseness)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around promising points\n            for _ in range(10):\n                # Small perturbations around the best found point\n                local_x = best_x + np.random.normal(0, 0.1)\n                local_y = best_y + np.random.normal(0, 0.1)\n                \n                # Keep within bounds\n                local_x = np.clip(local_x, bounds[0], bounds[1])\n                local_y = np.clip(local_y, bounds[0], bounds[1])\n                \n                local_value = evaluate_function(local_x, local_y)\n                if local_value < best_value:\n                    best_value = local_value\n                    best_x, best_y = local_x, local_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9941), Performs well on distance_score (0.9354), Performs well on overall_score (0.9930), Performs well on standard_deviation_score (0.9479), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9649), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9656)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9800), Performs well on distance_score (0.8782), Performs well on overall_score (0.9866), Performs well on standard_deviation_score (0.9123), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9328), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.8756)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9832, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    Adaptive random search algorithm for function minimization.\n    \n    Combines random exploration with occasional local refinement to balance\n    between global exploration and local exploitation of promising regions.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Tuple containing (min, max) values defining the search space\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random starting point within search bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Main search loop with adaptive strategy\n    for i in range(iterations):\n        # Adaptive search strategy: 80% random exploration, 20% local refinement\n        if i % 5 == 0 and i > 0:  # Local refinement every 5 iterations\n            # Search around current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, step_size/4), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size/4), bounds[0], bounds[1])\n        else:  # Random exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 15 lines with 14 lines\nChange 2: Replace 9 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (0.994)\n\n\n### Inspiration 2 (Score: 0.9500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new random point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.961), Excellent overall_score (0.981)\n\n\n### Inspiration 3 (Score: 0.8720, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization.\n    \n    Explores the search space by randomly sampling points and tracking the minimum value found.\n\n    Args:\n        iterations: Number of search iterations\n        bounds: Search space boundaries as (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new random candidate point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 11 lines with 13 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.959)\n\n\n### Inspiration 4 (Score: 0.8756, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.958), Excellent overall_score (0.954)\n\n\n### Inspiration 5 (Score: 0.9817, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with multiple random points to better explore search space\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n\n    for _ in range(iterations):\n        # Simple random search (vectorized for conciseness)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around promising points\n            for _ in range(10):\n                # Small perturbations around the best found point\n                local_x = best_x + np.random.normal(0, 0.1)\n                local_y = best_y + np.random.normal(0, 0.1)\n                \n                # Keep within bounds\n                local_x = np.clip(local_x, bounds[0], bounds[1])\n                local_y = np.clip(local_y, bounds[0], bounds[1])\n                \n                local_value = evaluate_function(local_x, local_y)\n                if local_value < best_value:\n                    best_value = local_value\n                    best_x, best_y = local_x, local_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 18 lines, Excellent runs_successfully (1.000), Excellent value_score (0.994)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Suggested Improvements\n\nTo address the declining metrics (value_score, distance_score, overall_score, standard_deviation_score, and combined_score), I recommend incorporating successful elements from the top-performing programs while maintaining code simplicity.\n\n## Improvement 1: Add Multiple Initial Points\n\nThis helps explore more of the search space initially, finding better starting points.\n\n<<<<<<< SEARCH\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n=======\n    # Initialize with multiple random points to better explore search space\n    num_initial_points = 5\n    initial_points = np.random.uniform(bounds[0], bounds[1], size=(num_initial_points, 2))\n    initial_values = [evaluate_function(x, y) for x, y in initial_points]\n    \n    # Select best initial point\n    best_idx = np.argmin(initial_values)\n    best_x, best_y = initial_points[best_idx]\n    best_value = initial_values[best_idx]\n>>>>>>> REPLACE\n\n## Improvement 2: Add Local Refinement\n\nWhen we find a better point, we should explore its neighborhood to find potentially even better solutions.\n\n<<<<<<< SEARCH\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n=======\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search around promising points\n            for _ in range(10):\n                # Small perturbations around the best found point\n                local_x = best_x + np.random.normal(0, 0.1)\n                local_y = best_y + np.random.normal(0, 0.1)\n                \n                # Keep within bounds\n                local_x = np.clip(local_x, bounds[0], bounds[1])\n                local_y = np.clip(local_y, bounds[0], bounds[1])\n                \n                local_value = evaluate_function(local_x, local_y)\n                if local_value < best_value:\n                    best_value = local_value\n                    best_x, best_y = local_x, local_y\n>>>>>>> REPLACE\n\n## Improvement 3: Update Docstring\n\nTo better reflect the enhanced capabilities of our algorithm:\n\n<<<<<<< SEARCH\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n=======\n    \"\"\"\n    Enhanced random search algorithm with local refinement for function minimization.\n    \n    Combines multiple initial points with local refinement around promising solutions\n    to balance exploration and exploitation of the search space.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n>>>>>>> REPLACE\n\n## Rationale\n\nThese changes incorporate successful elements from Program 1 and Program 2 (the top performers) while maintaining code simplicity:\n\n1. **Multiple initial points** help avoid getting trapped in poor local minima from the start\n2. **Local refinement** around promising points improves exploitation of good regions\n3. The combination maintains good speed while significantly improving search quality\n\nThese improvements should increase value_score by finding better minima, improve distance_score by finding minima closer to the true optimal value, and reduce standard deviation by producing more consistent results across runs."]}}}