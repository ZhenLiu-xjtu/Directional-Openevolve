{"id": "ab504ac3-a3b9-49b2-b3a8-46922fca82c5", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # 25% chance to explore locally around best point, 75% chance for random search\n        if np.random.random() < 0.25:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "362b1ce7-44e6-4f38-b394-23e582a147b4", "generation": 4, "timestamp": 1755425739.9062817, "iteration_found": 99, "metrics": {"runs_successfully": 1.0, "value_score": 0.9710461670044309, "distance_score": 0.45454369234448283, "overall_score": 0.21760052094027957, "standard_deviation_score": 0.4452307696463891, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.6880026047013977, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 16 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.962739483871337, "distance_score": 0.6520787992615152, "overall_score": 0.9546946021018892, "standard_deviation_score": 0.5414330570647365, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7734730105094456, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9627\n- distance_score: 0.6521\n- overall_score: 0.9547\n- standard_deviation_score: 0.5414\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.7735\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9981, distance_score: 0.9625, overall_score: 0.9964, standard_deviation_score: 0.9798, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9822, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9925, overall_score: 0.9992, standard_deviation_score: 0.9948, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9962, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9927, overall_score: 0.9993, standard_deviation_score: 0.9951, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9963, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9981)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # 25% chance to explore locally around best point, 75% chance for random search\n        if np.random.random() < 0.25:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9927), Performs well on overall_score (0.9993), Performs well on standard_deviation_score (0.9951), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9963), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9980)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Combines global random search with local exploration around promising points,\n    using an adaptive radius that decreases over time to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9925), Performs well on overall_score (0.9992), Performs well on standard_deviation_score (0.9948), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9962), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9910)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.rand() < 0.1:  # 10% chance for local exploration\n            # Explore locally around best point with small perturbations\n            point = best_point + np.random.normal(0, 0.3, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:  # 90% chance for global exploration\n            # Generate point as array for consistent coordinate handling\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9981), Performs well on distance_score (0.9625), Performs well on overall_score (0.9964), Performs well on standard_deviation_score (0.9798), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9822), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9907)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Hybrid approach: mostly global search with occasional local exploration\n        if np.random.rand() < 0.1:  # 10% chance for local exploration\n            # Moderate perturbation around best point\n            point = best_point + np.random.normal(0, 0.3, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Global random search\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9879)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Balanced search algorithm with reduced local exploration for better global coverage.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point or local perturbation of best point (10% chance)\n        if np.random.rand() < 0.05:  # Reduced to 5% for better global exploration\n            point = best_point + np.random.normal(0, 0.2, size=2)  # Smaller perturbation\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9981, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # 25% chance to explore locally around best point, 75% chance for random search\n        if np.random.random() < 0.25:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 7 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.8767, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random 2D point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        x, y = point\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 10 lines, Excellent runs_successfully (1.000), Excellent value_score (0.965)\n\n\n### Inspiration 3 (Score: 0.9704, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random 2D point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 3 lines\nChange 2: Replace 4 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.981)\n\n\n### Inspiration 4 (Score: 0.8775, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random 2D point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        x, y = point\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 4 lines\nChange 2: Replace 4 lines with 4 lines, Excellent runs_successfully (1.000), Excellent value_score (0.956)\n\n\n### Inspiration 5 (Score: 0.9669, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random 2D point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        x, y = point\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.982), Excellent overall_score (0.987)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random 2D point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Program Improvements\n\nBased on the analysis, the current program is using a pure random search approach which explains the decline in performance metrics compared to previous versions. The top performing programs all included a hybrid approach combining global search with local exploration around promising points.\n\n## Key Improvements\n\n```python\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Generate random 2D point\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n=======\n    for i in range(iterations):\n        # 25% chance to explore locally around best point, 75% chance for random search\n        if np.random.random() < 0.25:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n>>>>>>> REPLACE\n```\n\n## Explanation\n\nThis change reintroduces the hybrid search strategy from the top-performing programs while maintaining code simplicity:\n\n1. **Adaptive Exploration Strategy**: We use a 25% chance to explore locally around the best point found so far, with 75% remaining for global random search. This balances exploration and exploitation.\n\n2. **Decreasing Radius**: The local exploration radius starts at 0.5 and decreases linearly over time (`0.5 * (1 - i/iterations)`), focusing more on exploitation as the search progresses.\n\n3. **Boundary Handling**: The `np.clip()` ensures we stay within the search bounds during local exploration.\n\n4. **Maintained Simplicity**: The code remains readable while adding these performance-enhancing features.\n\nThis should significantly improve the value_score, distance_score, and overall_score by helping the algorithm both explore globally and exploit promising regions, while maintaining the perfect scores for runs_successfully, speed_score, and reliability_score."]}}}