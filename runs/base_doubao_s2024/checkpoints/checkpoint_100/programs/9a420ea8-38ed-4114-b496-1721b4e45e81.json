{"id": "9a420ea8-38ed-4114-b496-1721b4e45e81", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Combines global random search with local exploration around promising points,\n    using an adaptive radius that decreases over time to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "d073d564-5ca9-412d-a378-850f1aed5b92", "generation": 4, "timestamp": 1755425374.1005642, "iteration_found": 63, "metrics": {"runs_successfully": 1.0, "value_score": 0.9996612102015823, "distance_score": 0.995879013283076, "overall_score": 0.9995556658820387, "standard_deviation_score": 0.996696255952813, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9977783294101931, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 16 lines with 15 lines\nChange 3: 'return best_point[0], best_point[1], best_value' to 'return best_x, best_y, best_value'\nChange 4: Replace 10 lines with 13 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9954401479503651, "distance_score": 0.9467858841549697, "overall_score": 0.9942484415950664, "standard_deviation_score": 0.9573154836923232, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9712422079753318, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9954\n- distance_score: 0.9468\n- overall_score: 0.9942\n- standard_deviation_score: 0.9573\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9712\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9954, distance_score: 0.9468, overall_score: 0.9942, standard_deviation_score: 0.9573, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9712, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9976, distance_score: 0.9601, overall_score: 0.9959, standard_deviation_score: 0.9713, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9795, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9988, distance_score: 0.9832, overall_score: 0.9980, standard_deviation_score: 0.9811, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9899, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9946)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Helper function for generating random points\n    def random_point():\n        return np.random.uniform(bounds[0], bounds[1], size=2)\n    \n    # Initialize with a random point\n    best_x, best_y = random_point()\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # Slightly increased local search probability\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = random_point()\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return (best_x, best_y, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9988), Performs well on distance_score (0.9832), Performs well on overall_score (0.9980), Performs well on standard_deviation_score (0.9811), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9899), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9894)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5), seed=None):\n    if seed is not None:\n        np.random.seed(seed)\n    \"\"\"\n    Random search algorithm for function minimization within specified bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate solution\n        # Balance exploration (random) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance to search locally around best\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9976), Performs well on distance_score (0.9601), Performs well on overall_score (0.9959), Performs well on standard_deviation_score (0.9713), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9795), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9850)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search space)\n            step_size = (bounds[1] - bounds[0]) * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9954), Performs well on distance_score (0.9468), Performs well on overall_score (0.9942), Performs well on standard_deviation_score (0.9573), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9712), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9679)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random point\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9594)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization within specified bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9946, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Helper function for generating random points\n    def random_point():\n        return np.random.uniform(bounds[0], bounds[1], size=2)\n    \n    # Initialize with a random point\n    best_x, best_y = random_point()\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # Slightly increased local search probability\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = random_point()\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return (best_x, best_y, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.999), Excellent distance_score (0.983)\n\n\n### Inspiration 2 (Score: 0.9518, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate new candidate point and evaluate\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_point = point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 6 lines with 2 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.960)\n\n\n### Inspiration 3 (Score: 0.9594, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization within specified bounds.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.971), Excellent overall_score (0.984)\n\n\n### Inspiration 4 (Score: 0.9679, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random point\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 10 lines with 10 lines, Excellent runs_successfully (1.000), Excellent value_score (0.981)\n\n\n### Inspiration 5 (Score: 0.9427, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random point\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 14 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.945)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search space)\n            step_size = (bounds[1] - bounds[0]) * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To improve readability and maintainability while potentially enhancing performance, here are targeted improvements:\n\n1. Simplify coordinate handling by using separate variables instead of arrays:\n\n```diff\n<<<<<<< SEARCH\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n=======\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n>>>>>>> REPLACE\n```\n\n2. Improve the exploration strategy with adaptive radius and simplify loop:\n\n```diff\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search space)\n            step_size = (bounds[1] - bounds[0]) * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point for global exploration\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n=======\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        else:  # 80% chance for global random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n```\n\n3. Simplify the return statement:\n\n```diff\n<<<<<<< SEARCH\n    return best_point[0], best_point[1], best_value\n=======\n    return best_x, best_y, best_value\n>>>>>>> REPLACE\n```\n\n4. Update docstring to reflect actual algorithm capabilities:\n\n```diff\n<<<<<<< SEARCH\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n=======\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Combines global random search with local exploration around promising points,\n    using an adaptive radius that decreases over time to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n>>>>>>> REPLACE\n```\n\nThese changes:\n1. Remove array indexing and copying operations, making the code more readable\n2. Implement an adaptive exploration radius that decreases over time (inspired by top-performing Program 1)\n3. Improve variable naming clarity\n4. Update documentation to better reflect the algorithm's actual behavior\n5. Maintain the same core functionality while making the code flow more naturally\n\nThe adaptive radius should help find better minima by exploring broadly early and focusing narrowly later, potentially improving value_score and distance_score while maintaining simplicity and performance."]}}}