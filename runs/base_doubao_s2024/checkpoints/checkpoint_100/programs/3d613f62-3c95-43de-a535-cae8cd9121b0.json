{"id": "3d613f62-3c95-43de-a535-cae8cd9121b0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for coordinate management\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            # Generate random 2D point\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "a7bb5c28-5d22-4595-b870-5fdf88639a29", "generation": 4, "timestamp": 1755425722.4144454, "iteration_found": 95, "metrics": {"runs_successfully": 1.0, "value_score": 0.9898900583069494, "distance_score": 0.7108026516198679, "overall_score": 0.9610323209367362, "standard_deviation_score": 0.549595781046474, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8051616046836809, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 13 lines with 11 lines\nChange 2: Replace 11 lines with 11 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9944978736038965, "distance_score": 0.9382869635994215, "overall_score": 0.9934582012389558, "standard_deviation_score": 0.9540815658680858, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9672910061947785, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9945\n- distance_score: 0.9383\n- overall_score: 0.9935\n- standard_deviation_score: 0.9541\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9673\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9954, distance_score: 0.9586, overall_score: 0.9954, standard_deviation_score: 0.9650, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9769, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9983, distance_score: 0.9637, overall_score: 0.9963, standard_deviation_score: 0.9731, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9813, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9937, overall_score: 0.9993, standard_deviation_score: 0.9950, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9967, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9983)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Combines global random search with local exploration around promising points,\n    using an adaptive radius that decreases over time to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for coordinate management\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:  # 80% chance for global random search\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9937), Performs well on overall_score (0.9993), Performs well on standard_deviation_score (0.9950), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9967), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9903)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Enhanced stochastic search algorithm with balanced exploration strategies:\n    - Local exploration (20%): Refines promising solutions\n    - Directed exploration (10%): Expands from known good solutions\n    - Global exploration (70%): Explores new areas of the search space\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point or local perturbation of best point (10% chance)\n        if np.random.rand() < 0.1:  # 10% chance for local exploration\n            point = best_point + np.random.normal(0, 0.3, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9983), Performs well on distance_score (0.9637), Performs well on overall_score (0.9963), Performs well on standard_deviation_score (0.9731), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9813), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9879)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point or local perturbation of best point (5% chance)\n        if np.random.rand() < 0.05:  # 5% chance for local exploration\n            point = best_point + np.random.normal(0, 0.2, size=2)  # Small perturbation\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            point = np.random.uniform(bounds[0], bounds[1], size=2)  # Global exploration\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9954), Performs well on distance_score (0.9586), Performs well on overall_score (0.9954), Performs well on standard_deviation_score (0.9650), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9769), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9876)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: occasionally take small steps from best point\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of search space\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return (best_x, best_y, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9865)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining global exploration and local exploitation.\n    \n    This algorithm balances broad exploration of the search space with focused \n    exploitation of promising regions, using adaptive step sizes proportional\n    to the search space dimensions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Helper function for generating random points\n    def random_point():\n        return np.random.uniform(bounds[0], bounds[1], size=2)\n    \n    # Initialize with random solution\n    best_x, best_y = random_point()\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: occasionally take small steps from best point\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of search space\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = random_point()\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9983, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Combines global random search with local exploration around promising points,\n    using an adaptive radius that decreases over time to balance exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for coordinate management\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # Adaptive search strategy with decreasing exploration radius\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Decreasing exploration radius over time\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:  # 80% chance for global random search\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 21 lines with 21 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9876, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: occasionally take small steps from best point\n        if np.random.random() < 0.2:  # 20% chance to explore locally\n            step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of search space\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:  # 80% chance for global search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return (best_x, best_y, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.997), Excellent distance_score (0.955)\n\n\n### Inspiration 3 (Score: 0.9637, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm with local exploration for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Random search with occasional local exploration\n        # Increase local exploration to 20% with adaptive step size\n        if np.random.random() < 0.2:\n            # Adaptive step size - smaller steps for better solutions\n            step_size = 0.3 + (0.7 * np.exp(-best_value))\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        else:\n            # Regular random search\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 6 lines, Excellent runs_successfully (1.000), Excellent value_score (0.979)\n\n\n### Inspiration 4 (Score: 0.9566, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using array for cleaner coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate point as array for consistent coordinate handling\n        point = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 14 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.966)\n\n\n### Inspiration 5 (Score: 0.9903, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Enhanced stochastic search algorithm with balanced exploration strategies:\n    - Local exploration (20%): Refines promising solutions\n    - Directed exploration (10%): Expands from known good solutions\n    - Global exploration (70%): Explores new areas of the search space\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random point or local perturbation of best point (10% chance)\n        if np.random.rand() < 0.1:  # 10% chance for local exploration\n            point = best_point + np.random.normal(0, 0.3, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n        else:\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 6 lines with 10 lines\nChange 2: Replace 10 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size\n            step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of search space\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Generate random 2D point\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Performance Improvement Suggestions\n\nBased on the analysis of the performance metrics and comparison with top-performing previous versions, I recommend two key improvements to restore the program's performance.\n\n## 1. Restore Adaptive Radius for Local Exploration\n\nThe current program uses a fixed step size for local exploration, while the top-performing Program 1 used an adaptive radius that decreased over time. This likely explains the performance regression.\n\n<<<<<<< SEARCH\n    # Initialize with a random 2D point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size\n            step_size = (bounds[1] - bounds[0]) * 0.05  # 5% of search space\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x = np.clip(x, bounds[0], bounds[1])  # Keep within bounds\n            y = np.clip(y, bounds[0], bounds[1])\n=======\n    # Initialize with random point using array for coordinate management\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # 20% chance to explore locally around best point, 80% chance for random search\n        if np.random.random() < 0.2:\n            # Adaptive search strategy with decreasing exploration radius\n            radius = 0.5 * (1 - i/iterations)\n            point = best_point + np.random.normal(0, radius, size=2)\n            point = np.clip(point, bounds[0], bounds[1])  # Keep within bounds\n>>>>>>> REPLACE\n\n## 2. Simplify Point Management and Update Logic\n\nThe current program handles x and y coordinates separately, increasing complexity. Using a numpy array for point management improves readability and maintainability while reducing potential errors.\n\n<<<<<<< SEARCH\n        else:\n            # Generate random 2D point\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n=======\n        else:\n            # Generate random 2D point\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point.copy()\n\n    return best_point[0], best_point[1], best_value\n>>>>>>> REPLACE\n\n## Explanation of Changes\n\n1. **Adaptive Radius**: The radius starts larger (enabling broader exploration) and decreases over time (focusing on exploitation of promising regions), which matches the approach of Program 1 that achieved the highest value_score (0.9996) and distance_score (0.9937).\n\n2. **Numpy Array Point Management**: \n   - Simplifies code by handling x and y coordinates together\n   - Reduces the number of variables needing tracking\n   - Makes the clipping operation more efficient with a single call\n   - Eliminates potential bugs from coordinate mismatches\n\n3. **Maintained Key Parameters**: The 20% local exploration rate that worked well in previous versions is preserved, as this balance between exploration and exploitation was effective.\n\nThese changes should help restore the program's performance to previous high levels while maintaining readability and simplicity."]}}}