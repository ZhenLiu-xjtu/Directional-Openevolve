{"id": "e32061a9-92d9-4989-94bf-8f40fda88a50", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        candidate_value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if candidate_value < best_value:\n            best_value = candidate_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "ea251b1b-11af-48f0-bf0e-e63fefe225a6", "generation": 3, "timestamp": 1755438063.1478322, "iteration_found": 68, "metrics": {"runs_successfully": 1.0, "value_score": 0.989572075327969, "distance_score": 0.7081037514618322, "overall_score": 0.9608602117600225, "standard_deviation_score": 0.5505725971184061, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8043010588001117, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 9 lines with 15 lines\nChange 2: Replace 10 lines with 10 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9680178839158496, "distance_score": 0.8659220452428202, "overall_score": 0.9836415073556677, "standard_deviation_score": 0.881642807864019, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9182075367783384, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9680\n- distance_score: 0.8659\n- overall_score: 0.9836\n- standard_deviation_score: 0.8816\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9182\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9993, distance_score: 0.9835, overall_score: 0.9983, standard_deviation_score: 0.9875, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9915, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9831, overall_score: 0.9983, standard_deviation_score: 0.9885, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9916, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9840, overall_score: 0.9984, standard_deviation_score: 0.9879, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9918, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9957)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Simplified adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9840), Performs well on overall_score (0.9984), Performs well on standard_deviation_score (0.9879), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9918), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best found point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9831), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9885), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9916), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in one line\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Mix local search with occasional exploration (10% chance)\n        if np.random.random() < 0.1:\n            # Random exploration to escape local minima\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Local search around best found point with current radius\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9993), Performs well on distance_score (0.9835), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9875), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9915), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9944)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best found point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9665)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9957, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Simplified adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.999), Excellent distance_score (0.984)\n\n\n### Inspiration 2 (Score: 0.9653, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        # Linear interpolation from initial to final radius\n        radius = initial_radius * (1 - i/iterations) + final_radius * (i/iterations)\n        \n        # Search around best found point with current radius\n        # Generate and clip coordinates simultaneously\n        x, y = np.clip(best_x + np.random.normal(0, radius, 2), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.977), Excellent overall_score (0.986)\n\n\n### Inspiration 3 (Score: 0.9956, Type: Migrant)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best found point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 12 lines with 20 lines\nChange 2: Replace 10 lines with 11 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 4 (Score: 0.9956, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in one line\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Mix local search with occasional exploration (10% chance)\n        if np.random.random() < 0.1:\n            # Random exploration to escape local minima\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Local search around best found point with current radius\n            x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 11 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 5 (Score: 0.9944, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best found point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 24 lines with 31 lines, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Generate candidate solution and evaluate\n        candidate_point = np.random.uniform(bounds[0], bounds[1], 2)\n        x, y = candidate_point\n        candidate_value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if candidate_value < best_value:\n            best_value = candidate_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Proposed Improvements\n\nBased on the analysis, the current program is using a simple random search which explains the lower performance metrics compared to previous versions. The top-performing programs all use an adaptive search radius approach that balances exploration and exploitation.\n\n## Change 1: Add Adaptive Search Radius\n\n```diff\n<<<<<<< SEARCH\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for i in range(iterations):\n        # Generate candidate solution and evaluate\n        candidate_point = np.random.uniform(bounds[0], bounds[1], 2)\n        x, y = candidate_point\n=======\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n>>>>>>> REPLACE\n```\n\nThis change:\n1. Removes the unnecessary `best_point` variable\n2. Adds adaptive radius parameters that start wide and narrow over time\n3. Searches around the best found point instead of random sampling\n4. Keeps points within bounds using `np.clip`\n\nThe adaptive radius helps the algorithm balance exploration (early iterations with large radius) and exploitation (later iterations with small radius focused on promising areas), which should improve all the regression metrics while maintaining simplicity.\n\n## Change 2: Improve Docstring\n\n```diff\n<<<<<<< SEARCH\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n=======\n    \"\"\"\n    Adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n>>>>>>> REPLACE\n```\n\nThis updates the documentation to accurately reflect the algorithm's behavior after our changes, improving maintainability.\n\nThese changes should restore the performance metrics to their previous high levels while keeping the code simple and readable. The adaptive approach is proven in the top-performing programs and addresses the key limitations of the current random search implementation."]}}}