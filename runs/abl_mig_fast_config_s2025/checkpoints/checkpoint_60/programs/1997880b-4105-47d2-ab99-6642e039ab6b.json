{"id": "1997880b-4105-47d2-ab99-6642e039ab6b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that explores the search space uniformly.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(low, high, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "4ae07aa2-07ab-45d5-9260-9a521582b538", "generation": 2, "timestamp": 1755437757.9694333, "iteration_found": 38, "metrics": {"runs_successfully": 1.0, "value_score": 0.9690469953805492, "distance_score": 0.8583373730597413, "overall_score": 0.9836284779302352, "standard_deviation_score": 0.8927893034853693, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9181423896511757, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 3 lines\nChange 2: Replace 2 lines with x, y = np.random.uniform(low, high, size=2)\nChange 3: 'A simple random search algorithm that often gets stuck in local minima.' to 'A simple random search algorithm that explores the search space uniformly.'", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9682285594850972, "distance_score": 0.8630051899228721, "overall_score": 0.9835579717854114, "standard_deviation_score": 0.8842902331713358, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9177898589270564, "success_rate": 1.0}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9682\n- distance_score: 0.8630\n- overall_score: 0.9836\n- standard_deviation_score: 0.8843\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9178\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9896, distance_score: 0.7078, overall_score: 0.2408, standard_deviation_score: 0.5503, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.8042, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9682, distance_score: 0.8630, overall_score: 0.9836, standard_deviation_score: 0.8843, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9178, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9738, distance_score: 0.8580, overall_score: 0.9838, standard_deviation_score: 0.8887, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9189, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9581)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that explores the entire search space uniformly.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate point\n        x, y = np.random.uniform(low, high, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9738), Performs well on distance_score (0.8580), Performs well on overall_score (0.9838), Performs well on standard_deviation_score (0.8887), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9189), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9574)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9682), Performs well on distance_score (0.8630), Performs well on overall_score (0.9836), Performs well on standard_deviation_score (0.8843), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9178), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.8103)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Simplified adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = np.interp(i, [0, iterations], [initial_radius, final_radius])\n        \n        # Search around best point with current radius\n        x, y = np.clip(\n            [best_x + np.random.normal(0, radius), \n             best_y + np.random.normal(0, radius)], \n            bounds[0], bounds[1]\n        )\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9896), Performs well on distance_score (0.7078), Performs well on overall_score (0.2408), Performs well on standard_deviation_score (0.5503), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.8042), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.8901)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive hybrid search algorithm that balances global exploration and local refinement.\n    \n    Efficiently finds function minima by combining wide initial exploration with \n    focused refinement of promising regions.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Initialize adaptive parameters\n    initial_step = (bounds[1] - bounds[0]) / 2\n    final_step = initial_step * 0.01\n    exploration_rate = 0.2  # Start with 20% exploration\n    \n    for i in range(iterations):\n        # Adaptive parameters that improve over time\n        step_size = initial_step - (initial_step - final_step) * (i / iterations)\n        current_exploration = exploration_rate * (1 - i / iterations)\n        \n        # Balance exploration vs exploitation\n        if np.random.random() < current_exploration:\n            # Global exploration with decreasing probability\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Local refinement around best found point\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.8708)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in one line\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate coordinates together for simplicity\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9581, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that explores the entire search space uniformly.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate point\n        x, y = np.random.uniform(low, high, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.974), Excellent overall_score (0.984)\n\n\n### Inspiration 2 (Score: 0.8709, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Simple random search\n        point = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(*point)\n\n        if value < best_value:\n            best_value = value\n            best_point = point\n            best_x, best_y = best_point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.951), Excellent overall_score (0.952)\n\n\n### Inspiration 3 (Score: 0.8103, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Simplified adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = np.interp(i, [0, iterations], [initial_radius, final_radius])\n        \n        # Search around best point with current radius\n        x, y = np.clip(\n            [best_x + np.random.normal(0, radius), \n             best_y + np.random.normal(0, radius)], \n            bounds[0], bounds[1]\n        )\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 27 lines with 29 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 4 (Score: 0.8901, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive hybrid search algorithm that balances global exploration and local refinement.\n    \n    Efficiently finds function minima by combining wide initial exploration with \n    focused refinement of promising regions.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Initialize adaptive parameters\n    initial_step = (bounds[1] - bounds[0]) / 2\n    final_step = initial_step * 0.01\n    exploration_rate = 0.2  # Start with 20% exploration\n    \n    for i in range(iterations):\n        # Adaptive parameters that improve over time\n        step_size = initial_step - (initial_step - final_step) * (i / iterations)\n        current_exploration = exploration_rate * (1 - i / iterations)\n        \n        # Balance exploration vs exploitation\n        if np.random.random() < current_exploration:\n            # Global exploration with decreasing probability\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Local refinement around best found point\n            x = np.clip(best_x + np.random.normal(0, step_size), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, step_size), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 13 lines\nChange 2: Replace 9 lines with 18 lines, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n### Inspiration 5 (Score: 0.8708, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in one line\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate coordinates together for simplicity\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.951)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["To improve readability and maintainability while preserving performance, here are targeted improvements:\n\n1. Simplify bounds handling by unpacking the tuple once:\n<<<<<<< SEARCH\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n=======\n    # Initialize with a random point\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, size=2)\n>>>>>>> REPLACE\n\n2. Use consistent unpacked bounds in the search loop:\n<<<<<<< SEARCH\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n=======\n        x, y = np.random.uniform(low, high, size=2)\n>>>>>>> REPLACE\n\n3. Improve docstring clarity and remove redundant comments:\n<<<<<<< SEARCH\n    A simple random search algorithm that often gets stuck in local minima.\n=======\n    A simple random search algorithm that explores the search space uniformly.\n>>>>>>> REPLACE\n\nThese changes:\n- Make the code more readable by reducing repetition of `bounds[0]` and `bounds[1]`\n- Add explicit `size=` parameter for clarity in numpy calls\n- Improve documentation by removing negative language\n- Remove redundant comments that don't add information\n\nThe algorithm's behavior remains identical, maintaining the high success rate and performance metrics while making the code cleaner and easier to maintain."]}}}