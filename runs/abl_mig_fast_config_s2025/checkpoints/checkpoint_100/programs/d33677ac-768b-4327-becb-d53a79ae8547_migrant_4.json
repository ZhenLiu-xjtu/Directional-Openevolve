{"id": "d33677ac-768b-4327-becb-d53a79ae8547_migrant_4", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive search algorithm that finds function minima by starting with wide exploration\n    and gradually focusing on promising areas.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Start with wide search, then focus on promising areas\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n    \n    for i in range(iterations):\n        # Adaptive search radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best found point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "d33677ac-768b-4327-becb-d53a79ae8547", "generation": 4, "timestamp": 1755438328.357533, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.9993124590674345, "distance_score": 0.9795720192915991, "overall_score": 0.9979882930232267, "standard_deviation_score": 0.9866594884523567, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9899414651161331, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 18 lines with 11 lines\nChange 2: Replace 13 lines with 11 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9894638554556674, "distance_score": 0.70735330529768, "overall_score": 0.9607543566353921, "standard_deviation_score": 0.5494288845664426, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8037717831769602, "success_rate": 1.0}, "island": 4, "migrant": true}, "artifacts_json": null, "artifact_dir": null}