{"id": "dbee4a0a-aee1-467e-8d5a-7d49cedbbaa4_migrant_3", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Simplified adaptive search algorithm that finds function minima by balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Adaptive parameters\n    initial_radius = (bounds[1] - bounds[0]) / 2\n    final_radius = initial_radius * 0.01\n\n    for i in range(iterations):\n        # Adaptive radius - starts wide, gets narrower\n        radius = initial_radius - (initial_radius - final_radius) * (i / iterations)\n        \n        # Search around best point with current radius\n        x = np.clip(best_x + np.random.normal(0, radius), bounds[0], bounds[1])\n        y = np.clip(best_y + np.random.normal(0, radius), bounds[0], bounds[1])\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "dbee4a0a-aee1-467e-8d5a-7d49cedbbaa4", "generation": 5, "timestamp": 1755438328.3591018, "iteration_found": 0, "metrics": {"runs_successfully": 1.0, "value_score": 0.999400710550176, "distance_score": 0.9839703129202721, "overall_score": 0.9983520267905561, "standard_deviation_score": 0.9879013786906174, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9917601339527804, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 2 lines\nChange 2: Replace 6 lines with 3 lines\nChange 3: Replace 2 lines with 2 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9896328756947029, "distance_score": 0.7077907481761035, "overall_score": 0.24083185275959154, "standard_deviation_score": 0.5503049772158761, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8041592637979575, "success_rate": 1.0}, "island": 3, "migrant": true}, "artifacts_json": null, "artifact_dir": null}