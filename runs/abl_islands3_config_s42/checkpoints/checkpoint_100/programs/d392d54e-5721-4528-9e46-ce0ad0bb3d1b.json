{"id": "d392d54e-5721-4528-9e46-ce0ad0bb3d1b", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% chance of local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, min_bound, max_bound)\n            y = np.clip(y, min_bound, max_bound)\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Lightweight local refinement to improve local minima\n        step_size = 0.05 * (bounds[1] - bounds[0])\n        x_local = best_x + np.random.uniform(-step_size, step_size)\n        y_local = best_y + np.random.uniform(-step_size, step_size)\n        x_local = np.clip(x_local, min_bound, max_bound)\n        y_local = np.clip(y_local, min_bound, max_bound)\n        \n        local_value = evaluate_function(x_local, y_local)\n        if local_value < best_value:\n            best_value = local_value\n            best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "ddbff280-825f-44d1-8728-e9dc38e4df94", "generation": 4, "timestamp": 1755432008.931343, "iteration_found": 82, "metrics": {"runs_successfully": 1.0, "value_score": 0.9995355692300498, "distance_score": 0.9910254574178722, "overall_score": 0.9989960621088216, "standard_deviation_score": 0.9914197560866773, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9949803105441082, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 2 lines with 2 lines\nChange 2: 'best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)' to 'best_x, best_y = np.random.uniform(min_bound, max_bound, 2)'\nChange 3: Replace 5 lines with 17 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9992981398501278, "distance_score": 0.9830389074885739, "overall_score": 0.9982026757880041, "standard_deviation_score": 0.9859770618573731, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9910133789400203, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9993\n- distance_score: 0.9830\n- overall_score: 0.9982\n- standard_deviation_score: 0.9860\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9910\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9868, overall_score: 0.9986, standard_deviation_score: 0.9901, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9932, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9887, overall_score: 0.9989, standard_deviation_score: 0.9919, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9943, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9996, distance_score: 0.9895, overall_score: 0.9989, standard_deviation_score: 0.9926, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9947, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9973)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        (best_x, best_y, best_value): Coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, min_bound, max_bound)\n            y = np.clip(y, min_bound, max_bound)\n        else:  # 80% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9996), Performs well on distance_score (0.9895), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9926), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9947), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9970)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% chance of local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9887), Performs well on overall_score (0.9989), Performs well on standard_deviation_score (0.9919), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9943), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9965)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        (best_x, best_y, best_value): Coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% chance of local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9868), Performs well on overall_score (0.9986), Performs well on standard_deviation_score (0.9901), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9932), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9955)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        (best_x, best_y, best_value): Coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value): Coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point by unpacking bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9973, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        (best_x, best_y, best_value): Coordinates and value of the minimum found\n    \"\"\"\n    # Initialize with random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, min_bound, max_bound)\n            y = np.clip(y, min_bound, max_bound)\n        else:  # 80% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (1.000), Excellent distance_score (0.989)\n\n\n### Inspiration 2 (Score: 0.8902, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using direct assignment\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point using direct assignment\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Lightweight local search around best solution\n        step_size = (bounds[1] - bounds[0]) * 0.05\n        x_local = best_x + np.random.uniform(-step_size, step_size)\n        y_local = best_y + np.random.uniform(-step_size, step_size)\n        \n        # Keep within bounds\n        x_local = np.clip(x_local, bounds[0], bounds[1])\n        y_local = np.clip(y_local, bounds[0], bounds[1])\n        \n        local_value = evaluate_function(x_local, y_local)\n        if local_value < best_value:\n            best_value = local_value\n            best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 9 lines with 23 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 3 (Score: 0.9844, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random coordinates\n        x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Occasionally explore locally around best point (10% chance)\n        if np.random.random() < 0.1:\n            x_local = best_x + np.random.normal(0, 0.5)\n            y_local = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x_local = np.clip(x_local, bounds[0], bounds[1])\n            y_local = np.clip(y_local, bounds[0], bounds[1])\n            \n            value_local = evaluate_function(x_local, y_local)\n            if value_local < best_value:\n                best_value = value_local\n                best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.996), Excellent distance_score (0.943)\n\n\n### Inspiration 4 (Score: 0.8903, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Local search around best solution for fine-tuning\n        step_size = (bounds[1] - bounds[0]) * 0.05\n        x_local = np.clip(best_x + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        y_local = np.clip(best_y + np.random.uniform(-step_size, step_size), bounds[0], bounds[1])\n        \n        local_value = evaluate_function(x_local, y_local)\n        if local_value < best_value:\n            best_value = local_value\n            best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 18 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 5 (Score: 0.9703, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Initialize with a random point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate point using vectorized operation\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.984)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance global exploration with local exploitation\n        if np.random.random() < 0.2:  # 20% chance of local exploration\n            # Explore around current best with decreasing step size\n            step = 0.1 * (1 - _/iterations) * (bounds[1] - bounds[0])\n            x = best_x + np.random.normal(0, step)\n            y = best_y + np.random.normal(0, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance of global exploration\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Program Improvement Suggestions\n\nBased on the analysis of performance metrics and comparison with top-performing programs, I recommend the following targeted improvements:\n\n## 1. Consistent Bound Variable Usage\n\nThe current code mixes `min_bound`/`max_bound` with `bounds[0]`/`bounds[1]` for clipping. Using the unpacked variables consistently improves readability and may slightly improve performance.\n\n<<<<<<< SEARCH\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n=======\n            x = np.clip(x, min_bound, max_bound)\n            y = np.clip(y, min_bound, max_bound)\n>>>>>>> REPLACE\n\n## 2. Revert to More Effective Initialization Pattern\n\nThe top-performing Program 1 used a simpler initialization pattern that yielded better value_score and distance_score.\n\n<<<<<<< SEARCH\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n=======\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n>>>>>>> REPLACE\n\n## 3. Add Lightweight Local Search Refinement\n\nInspiration from Programs 2 and 4 suggests adding a secondary local search step to refine solutions, which can improve the value_score by finding better local minima.\n\n<<<<<<< SEARCH\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n=======\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n        # Lightweight local refinement to improve local minima\n        step_size = 0.05 * (bounds[1] - bounds[0])\n        x_local = best_x + np.random.uniform(-step_size, step_size)\n        y_local = best_y + np.random.uniform(-step_size, step_size)\n        x_local = np.clip(x_local, min_bound, max_bound)\n        y_local = np.clip(y_local, min_bound, max_bound)\n        \n        local_value = evaluate_function(x_local, y_local)\n        if local_value < best_value:\n            best_value = local_value\n            best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n>>>>>>> REPLACE\n\nThese changes address the declining metrics by:\n1. Making the code more consistent and readable\n2. Reverting to patterns that performed well in previous top-scoring programs\n3. Adding a local refinement step to help escape local minima and find better solutions\n\nThe combined effect should improve value_score, distance_score, and overall_score while maintaining the perfect scores for runs_successfully, speed_score, and reliability_score."]}}}