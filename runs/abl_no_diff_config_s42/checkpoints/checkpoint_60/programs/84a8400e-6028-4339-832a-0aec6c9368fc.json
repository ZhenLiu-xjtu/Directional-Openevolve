{"id": "84a8400e-6028-4339-832a-0aec6c9368fc", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Hybrid approach: 70% exploration, 30% exploitation\n        if np.random.rand() < 0.7:\n            # Global exploration with random sampling\n            current_point = np.random.uniform(min_bound, max_bound, size=2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, size=2)\n            current_point = np.clip(best_point + perturbation, min_bound, max_bound)\n            \n        # Evaluate candidate point and update best if better\n        current_value = evaluate_function(*current_point)\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")", "language": "python", "parent_id": "dfcbcf72-9a8f-4c66-bc66-a928b823ece7", "generation": 3, "timestamp": 1755441817.390059, "iteration_found": 26, "metrics": {"runs_successfully": 1.0, "value_score": 0.9980087243929092, "distance_score": 0.9628136102818791, "overall_score": 0.9961824463187674, "standard_deviation_score": 0.9731220722883047, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.980912231593837, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.976949114020231, "distance_score": 0.8777587931873049, "overall_score": 0.9859623281101487, "standard_deviation_score": 0.9033193651405285, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9298116405507434, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9769\n- distance_score: 0.8778\n- overall_score: 0.9860\n- standard_deviation_score: 0.9033\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9298\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9769, distance_score: 0.8778, overall_score: 0.9860, standard_deviation_score: 0.9033, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9298, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9799, distance_score: 0.8803, overall_score: 0.9866, standard_deviation_score: 0.9089, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9328, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9980, distance_score: 0.9672, overall_score: 0.9966, standard_deviation_score: 0.9758, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9830, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9912)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for cleaner coordinates handling\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Hybrid search: random exploration (70%) or local refinement (30%)\n        if np.random.rand() < 0.7:\n            # Global exploration with uniform random sampling\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local refinement around current best with adaptive perturbation\n            perturbation = np.random.normal(0, (bounds[1]-bounds[0])/20, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Evaluate new point and update if better\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9980), Performs well on distance_score (0.9672), Performs well on overall_score (0.9966), Performs well on standard_deviation_score (0.9758), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9830), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9654)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates and evaluate\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        current_value = evaluate_function(x, y)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9799), Performs well on distance_score (0.8803), Performs well on overall_score (0.9866), Performs well on standard_deviation_score (0.9089), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9328), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9638)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point and evaluate\n        current_point = np.random.uniform(min_bound, max_bound, size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9769), Performs well on distance_score (0.8778), Performs well on overall_score (0.9860), Performs well on standard_deviation_score (0.9033), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9298), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9582)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9912, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for cleaner coordinates handling\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Hybrid search: random exploration (70%) or local refinement (30%)\n        if np.random.rand() < 0.7:\n            # Global exploration with uniform random sampling\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local refinement around current best with adaptive perturbation\n            perturbation = np.random.normal(0, (bounds[1]-bounds[0])/20, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Evaluate new point and update if better\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point and evaluate\n        current_point = np.random.uniform(min_bound, max_bound, size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Hybrid approach: 70% exploration, 30% exploitation\n        if np.random.rand() < 0.7:\n            # Global exploration with random sampling\n            current_point = np.random.uniform(min_bound, max_bound, size=2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, size=2)\n            current_point = np.clip(best_point + perturbation, min_bound, max_bound)\n            \n        # Evaluate candidate point and update best if better\n        current_value = evaluate_function(*current_point)\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\nThe key improvements in this version:\n\n1. **Hybrid Search Strategy**: Combines random exploration (70%) for global search with local refinement (30%) for exploitation of promising regions, balancing exploration vs exploitation.\n\n2. **Simplified Code Structure**: Maintained type hints for clarity while streamlining the logic flow, making the algorithm easier to understand at a glance.\n\n3. **Adaptive Perturbation**: Uses search range to calculate perturbation size, making the algorithm self-adjusting to different bound ranges.\n\n4. **Efficient Updates**: Combined variable assignments for better readability while maintaining the same performance characteristics.\n\nThis implementation maintains the same input/output interface while potentially improving search efficiency by focusing some effort on local refinement around promising solutions, which should help find better minima while keeping the code clean and maintainable."]}}}