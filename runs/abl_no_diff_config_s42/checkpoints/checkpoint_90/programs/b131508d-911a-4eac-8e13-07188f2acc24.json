{"id": "b131508d-911a-4eac-8e13-07188f2acc24", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size (5% of search range)\n            point = best_point + np.random.normal(0, search_range * 0.05, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Generate completely random point across search space\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "6bd1e317-55db-4318-b635-9375e92fc9bf", "generation": 2, "timestamp": 1755441825.1774666, "iteration_found": 27, "metrics": {"runs_successfully": 1.0, "value_score": 0.9960028653441665, "distance_score": 0.9449089784745657, "overall_score": 0.9942959421766216, "standard_deviation_score": 0.960802827732758, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9714797108831079, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9622321231269151, "distance_score": 0.8408513209581386, "overall_score": 0.982319529430134, "standard_deviation_score": 0.9025922086045044, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9115976471506697, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9622\n- distance_score: 0.8409\n- overall_score: 0.9823\n- standard_deviation_score: 0.9026\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9116\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9622, distance_score: 0.8409, overall_score: 0.9823, standard_deviation_score: 0.9026, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9116, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9964, distance_score: 0.9553, overall_score: 0.9954, standard_deviation_score: 0.9688, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9769, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9881)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space boundaries\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size\n            step_size = search_range * 0.05  # 5% of search range\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Ensure point stays within bounds\n            point = np.clip(point, min_bound, max_bound)\n        else:\n            # Generate completely random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9964), Performs well on distance_score (0.9553), Performs well on overall_score (0.9954), Performs well on standard_deviation_score (0.9688), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9769), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9555)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate solution as a 2D point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9622), Performs well on distance_score (0.8409), Performs well on overall_score (0.9823), Performs well on standard_deviation_score (0.9026), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9116), Performs well on success_rate (1.0000)\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9881, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space boundaries\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size\n            step_size = search_range * 0.05  # 5% of search range\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Ensure point stays within bounds\n            point = np.clip(point, min_bound, max_bound)\n        else:\n            # Generate completely random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.996)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate solution as a 2D point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size (5% of search range)\n            point = best_point + np.random.normal(0, search_range * 0.05, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Generate completely random point across search space\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to the algorithm are:\n\n1. Added a hybrid search strategy that combines global exploration with local exploitation:\n   - 80% of the time: Global random search across the entire search space\n   - 20% of the time: Local exploration around the current best solution\n\n2. Implemented adaptive local search with:\n   - Gaussian distribution for generating nearby points\n   - Step size proportional to the search space range (5%)\n   - Automatic boundary clipping to keep points within bounds\n\n3. Maintained code simplicity and readability while adding these improvements\n   \nThis implementation maintains the same function signature and return format as the original while significantly improving the algorithm's ability to find better solutions by escaping local minima and exploring promising regions more thoroughly."]}}}