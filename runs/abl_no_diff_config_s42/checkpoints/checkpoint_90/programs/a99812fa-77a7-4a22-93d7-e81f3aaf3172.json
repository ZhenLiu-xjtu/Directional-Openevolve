{"id": "a99812fa-77a7-4a22-93d7-e81f3aaf3172", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet optimized search algorithm balancing global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    local_step = search_range * 0.05  # 5% of search range for local exploration\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration around best point with normal distribution\n            x = np.clip(best_x + np.random.normal(0, local_step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, local_step), min_bound, max_bound)\n        else:\n            # Global exploration with random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate point and update if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "94f978a0-ce0f-428e-8450-2f912f0e2f3b", "generation": 3, "timestamp": 1755441966.9917595, "iteration_found": 36, "metrics": {"runs_successfully": 1.0, "value_score": 0.9977718461104649, "distance_score": 0.9575825196001556, "overall_score": 0.995657798495718, "standard_deviation_score": 0.9695748223993637, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.97828899247859, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.998885463646918, "distance_score": 0.9761530512559518, "overall_score": 0.9974493649067779, "standard_deviation_score": 0.979916721589426, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9872468245338897, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9989\n- distance_score: 0.9762\n- overall_score: 0.9974\n- standard_deviation_score: 0.9799\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9872\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9909, distance_score: 0.9209, overall_score: 0.9913, standard_deviation_score: 0.9375, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9566, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9971, distance_score: 0.9574, overall_score: 0.9956, standard_deviation_score: 0.9683, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9778, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9989, distance_score: 0.9762, overall_score: 0.9974, standard_deviation_score: 0.9799, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9872, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9933)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search range)\n            step_size = search_range * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Global exploration with random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate point\n        value = evaluate_function(*point)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_point = point\n            best_value = value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9989), Performs well on distance_score (0.9762), Performs well on overall_score (0.9974), Performs well on standard_deviation_score (0.9799), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9872), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9885)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to find better minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random points across the search space\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Narrowing exploration factor - decreases over time\n    exploration_factor = 1.0\n    \n    for i in range(iterations):\n        # Gradually reduce exploration range over time\n        exploration_factor = max(0.1, exploration_factor * 0.999)\n        \n        # With 20% probability, explore around the best point found so far\n        if np.random.random() < 0.2:\n            # Add small perturbation to best point\n            x = np.clip(best_x + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n        else:\n            # Generate random candidate point\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9971), Performs well on distance_score (0.9574), Performs well on overall_score (0.9956), Performs well on standard_deviation_score (0.9683), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9778), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9775)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add temperature parameter for simulated annealing-like behavior\n    temperature = 1.0\n    cooling_rate = 0.995\n    \n    for i in range(iterations):\n        # Adaptive search strategy with exploration-exploitation balance\n        if np.random.random() < 0.3 + 0.6 * (1 - i/iterations):\n            # Early: More exploration (random search)\n            # Late: More exploitation (local search)\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Perturb current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * 0.1 * temperature\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Keep within bounds\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        x, y = point\n        value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if value < best_value or np.random.random() < np.exp((best_value - value)/temperature):\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9909), Performs well on distance_score (0.9209), Performs well on overall_score (0.9913), Performs well on standard_deviation_score (0.9375), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9566), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9371)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates and evaluate\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)  # * unpacks coordinates into x, y\n\n    for _ in range(iterations):\n        # Generate new candidate solution and evaluate\n        coords = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*coords)  # * unpacks coordinates into x, y\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_coords = value, coords\n\n    return (*best_coords, best_value)  # * unpacks coordinates into return values\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.8439, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified initialization)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new point in one line\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.951)\n\n\n### Inspiration 2 (Score: 0.9500, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.956)\n\n\n### Inspiration 3 (Score: 0.9371, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates and evaluate\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)  # * unpacks coordinates into x, y\n\n    for _ in range(iterations):\n        # Generate new candidate solution and evaluate\n        coords = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*coords)  # * unpacks coordinates into x, y\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_coords = value, coords\n\n    return (*best_coords, best_value)  # * unpacks coordinates into return values\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.931)\n\n\n### Inspiration 4 (Score: 0.9885, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to find better minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random points across the search space\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Narrowing exploration factor - decreases over time\n    exploration_factor = 1.0\n    \n    for i in range(iterations):\n        # Gradually reduce exploration range over time\n        exploration_factor = max(0.1, exploration_factor * 0.999)\n        \n        # With 20% probability, explore around the best point found so far\n        if np.random.random() < 0.2:\n            # Add small perturbation to best point\n            x = np.clip(best_x + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n        else:\n            # Generate random candidate point\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.997)\n\n\n### Inspiration 5 (Score: 0.9775, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add temperature parameter for simulated annealing-like behavior\n    temperature = 1.0\n    cooling_rate = 0.995\n    \n    for i in range(iterations):\n        # Adaptive search strategy with exploration-exploitation balance\n        if np.random.random() < 0.3 + 0.6 * (1 - i/iterations):\n            # Early: More exploration (random search)\n            # Late: More exploitation (local search)\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Perturb current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * 0.1 * temperature\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Keep within bounds\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        x, y = point\n        value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if value < best_value or np.random.random() < np.exp((best_value - value)/temperature):\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.991)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search range)\n            step_size = search_range * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Global exploration with random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate point\n        value = evaluate_function(*point)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_point = point\n            best_value = value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet optimized search algorithm balancing global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    local_step = search_range * 0.05  # 5% of search range for local exploration\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration around best point with normal distribution\n            x = np.clip(best_x + np.random.normal(0, local_step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, local_step), min_bound, max_bound)\n        else:\n            # Global exploration with random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate point and update if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to simplify the code while maintaining performance:\n\n1. Replaced the numpy array `best_point` with individual `best_x` and `best_y` variables for better readability\n2. Combined the point generation and bounds checking into more concise lines\n3. Simplified the variable update logic by combining into a single line\n4. Reduced unnecessary comments while keeping important explanatory comments\n5. Maintained the same 80% global/20% local exploration balance that worked well\n6. Kept the optimal step size for local exploration (5% of search range)\n\nThese changes improve readability and maintainability while preserving the core algorithm that made the original program perform well across all metrics. The simplified code is easier to understand while maintaining the same functionality and performance characteristics."]}}}