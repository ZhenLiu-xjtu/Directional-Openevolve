{"id": "7048fb63-3f53-4ecb-9509-91d167449ae8", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "02e6df7b-ac03-405c-97f3-8f336041ef79", "generation": 5, "timestamp": 1755442395.0549226, "iteration_found": 77, "metrics": {"runs_successfully": 1.0, "value_score": 0.999382054865797, "distance_score": 0.9835774629258037, "overall_score": 0.9983131225232118, "standard_deviation_score": 0.9876489069449923, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9915656126160588, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9899030124851906, "distance_score": 0.7114221566972462, "overall_score": 0.9610763184039024, "standard_deviation_score": 0.5495889140282948, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.805381592019512, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9899\n- distance_score: 0.7114\n- overall_score: 0.9611\n- standard_deviation_score: 0.5496\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.8054\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9978, distance_score: 0.9622, overall_score: 0.9961, standard_deviation_score: 0.9722, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9804, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9982, distance_score: 0.9687, overall_score: 0.9968, standard_deviation_score: 0.9778, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9840, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9993, distance_score: 0.9827, overall_score: 0.9982, standard_deviation_score: 0.9867, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9910, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9953)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9993), Performs well on distance_score (0.9827), Performs well on overall_score (0.9982), Performs well on standard_deviation_score (0.9867), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9910), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9917)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Hybrid approach: 70% exploration, 30% exploitation\n        if np.random.rand() < 0.7:\n            # Global exploration with random sampling\n            current_point = np.random.uniform(min_bound, max_bound, size=2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, size=2)\n            current_point = np.clip(best_point + perturbation, min_bound, max_bound)\n            \n        # Evaluate candidate point and update best if better\n        current_value = evaluate_function(*current_point)\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9982), Performs well on distance_score (0.9687), Performs well on overall_score (0.9968), Performs well on standard_deviation_score (0.9778), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9840), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9899)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement (proven effective in top performers)\n        if np.random.rand() < 0.7:\n            # Random exploration\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9978), Performs well on distance_score (0.9622), Performs well on overall_score (0.9961), Performs well on standard_deviation_score (0.9722), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9804), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9881)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space boundaries\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size\n            step_size = search_range * 0.05  # 5% of search range\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Ensure point stays within bounds\n            point = np.clip(point, min_bound, max_bound)\n        else:\n            # Generate completely random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9695)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Generate candidate point and evaluate\n        candidate = np.random.uniform(bounds[0], bounds[1], size=2)\n        candidate_value = evaluate_function(*candidate)\n        \n        # Update best solution if improved\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9953, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.9881, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space boundaries\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size\n            step_size = search_range * 0.05  # 5% of search range\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Ensure point stays within bounds\n            point = np.clip(point, min_bound, max_bound)\n        else:\n            # Generate completely random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.996)\n\n\n### Inspiration 3 (Score: 0.8878, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with a random 2D point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Fixed local step size (5% of search range)\n    local_step = search_range * 0.05\n\n    for _ in range(iterations):\n        # Hybrid approach: 70% exploration, 30% exploitation\n        if np.random.random() < 0.7:\n            # Global exploration with random sampling\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with normal distribution around best point\n            x = np.clip(best_x + np.random.normal(0, local_step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, local_step), min_bound, max_bound)\n            \n        # Evaluate candidate point and update best if better\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.988)\n\n\n### Inspiration 4 (Score: 0.9555, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new candidate solution as a 2D point\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.962)\n\n\n### Inspiration 5 (Score: 0.9695, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized random search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Generate candidate point and evaluate\n        candidate = np.random.uniform(bounds[0], bounds[1], size=2)\n        candidate_value = evaluate_function(*candidate)\n        \n        # Update best solution if improved\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.982)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    Optimized hybrid search algorithm combining exploration and refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for i in range(iterations):\n        # Adaptive search strategy: more exploration early, more refinement later\n        exploration_ratio = 0.7 - (i/iterations)*0.4\n        \n        if np.random.rand() < exploration_ratio:\n            # Global exploration with uniform random sampling\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            # Decrease perturbation size over time for finer convergence\n            perturbation_scale = search_range/(20 + i/10)\n            perturbation = np.random.normal(0, perturbation_scale, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate candidate point and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key changes made to improve performance:\n\n1. Reverted to the proven exploration-exploitation balance from Program 1 that gradually shifts from 80% exploration to 30% exploration over time\n2. Restored the simple, effective adaptive step size calculation that decreases over iterations\n3. Removed type hints that added complexity without performance benefit\n4. Simplified variable names and comments for better readability\n5. Removed the complex perturbation scaling formula that was likely causing instability\n\nThese changes should restore the high performance seen in Program 1, particularly improving value_score, distance_score, overall_score, standard_deviation_score, and combined_score while maintaining perfect reliability and speed."]}}}