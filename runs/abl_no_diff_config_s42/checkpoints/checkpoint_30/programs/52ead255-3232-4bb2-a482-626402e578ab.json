{"id": "52ead255-3232-4bb2-a482-626402e578ab", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Uses simulated annealing principles to find the global minimum of a function.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Simulated annealing parameters\n    temperature = 1.0\n    cooling_rate = 0.995\n    search_space_width = bounds[1] - bounds[0]\n    \n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance\n        exploration_prob = 0.3 + 0.6 * (1 - i/iterations)\n        \n        if np.random.random() < exploration_prob:\n            # Exploration: Random search within bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Exploitation: Local search around current best\n            step_size = search_space_width * 0.1 * temperature\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip([x, y], bounds[0], bounds[1])\n        \n        # Evaluate candidate point\n        current_value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if (current_value < best_value or \n            np.random.random() < np.exp((best_value - current_value)/temperature)):\n            best_x, best_y, best_value = x, y, current_value\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "73e39778-7396-4483-89fc-ea82b8a8c9cc", "generation": 3, "timestamp": 1755441790.5899632, "iteration_found": 24, "metrics": {"runs_successfully": 1.0, "value_score": 0.9796546779286917, "distance_score": 0.6672410128571253, "overall_score": 0.9571868354764935, "standard_deviation_score": 0.5476034280371579, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.7859341773824675, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9909132842893137, "distance_score": 0.9208668536870529, "overall_score": 0.9913258670422274, "standard_deviation_score": 0.9375314345970392, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9566293352111362, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9909\n- distance_score: 0.9209\n- overall_score: 0.9913\n- standard_deviation_score: 0.9375\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9566\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing improvement: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider continuing with similar changes.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9506, distance_score: 0.5194, overall_score: 0.9419, standard_deviation_score: 0.4739, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.7093, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9564, distance_score: 0.8371, overall_score: 0.9805, standard_deviation_score: 0.8734, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9024, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9909, distance_score: 0.9209, overall_score: 0.9913, standard_deviation_score: 0.9375, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9566, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9775)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add temperature parameter for simulated annealing-like behavior\n    temperature = 1.0\n    cooling_rate = 0.995\n    \n    for i in range(iterations):\n        # Adaptive search strategy with exploration-exploitation balance\n        if np.random.random() < 0.3 + 0.6 * (1 - i/iterations):\n            # Early: More exploration (random search)\n            # Late: More exploitation (local search)\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Perturb current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * 0.1 * temperature\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Keep within bounds\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        x, y = point\n        value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if value < best_value or np.random.random() < np.exp((best_value - value)/temperature):\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9909), Performs well on distance_score (0.9209), Performs well on overall_score (0.9913), Performs well on standard_deviation_score (0.9375), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9566), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9500)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9564), Performs well on distance_score (0.8371), Performs well on overall_score (0.9805), Performs well on standard_deviation_score (0.8734), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9024), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.8439)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified initialization)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate new point in one line\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9506), Performs well on distance_score (0.5194), Performs well on overall_score (0.9419), Performs well on standard_deviation_score (0.4739), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.7093), Performs well on success_rate (1.0000)\n\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved search algorithm that balances exploration and exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Add temperature parameter for simulated annealing-like behavior\n    temperature = 1.0\n    cooling_rate = 0.995\n    \n    for i in range(iterations):\n        # Adaptive search strategy with exploration-exploitation balance\n        if np.random.random() < 0.3 + 0.6 * (1 - i/iterations):\n            # Early: More exploration (random search)\n            # Late: More exploitation (local search)\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:\n            # Perturb current best with decreasing step size\n            step_size = (bounds[1] - bounds[0]) * 0.1 * temperature\n            point = best_point + np.random.normal(0, step_size, size=2)\n            # Keep within bounds\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        x, y = point\n        value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if value < best_value or np.random.random() < np.exp((best_value - value)/temperature):\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Uses simulated annealing principles to find the global minimum of a function.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Simulated annealing parameters\n    temperature = 1.0\n    cooling_rate = 0.995\n    search_space_width = bounds[1] - bounds[0]\n    \n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance\n        exploration_prob = 0.3 + 0.6 * (1 - i/iterations)\n        \n        if np.random.random() < exploration_prob:\n            # Exploration: Random search within bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Exploitation: Local search around current best\n            step_size = search_space_width * 0.1 * temperature\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip([x, y], bounds[0], bounds[1])\n        \n        # Evaluate candidate point\n        current_value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if (current_value < best_value or \n            np.random.random() < np.exp((best_value - current_value)/temperature)):\n            best_x, best_y, best_value = x, y, current_value\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made while maintaining algorithm effectiveness:\n\n1. Simplified code structure by eliminating the `best_point` array and working directly with x/y coordinates\n2. Improved readability with clearer variable names (e.g., `exploration_prob` instead of complex expression)\n3. Consolidated operations where appropriate (e.g., combined clip operation for x and y)\n4. Simplified the initialization by generating x and y directly\n5. Added a `search_space_width` variable to clarify the step size calculation\n6. Improved docstring formatting and added additional clarifying comments\n7. Maintained all core algorithmic components that contribute to performance:\n   - Simulated annealing with temperature cooling\n   - Exploration-exploitation balance that shifts over time\n   - Probabilistic acceptance of worse solutions to escape local minima\n\nThese changes improve maintainability while preserving (and potentially enhancing) the algorithm's ability to find good solutions."]}}}