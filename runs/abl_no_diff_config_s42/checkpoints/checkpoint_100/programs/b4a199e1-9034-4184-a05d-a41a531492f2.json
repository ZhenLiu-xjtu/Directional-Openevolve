{"id": "b4a199e1-9034-4184-a05d-a41a531492f2", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "89329a25-5161-49fc-a159-f389aecc534b", "generation": 3, "timestamp": 1755442531.1122158, "iteration_found": 95, "metrics": {"runs_successfully": 1.0, "value_score": 0.9994277178973996, "distance_score": 0.9854647869358136, "overall_score": 0.9984991246801261, "standard_deviation_score": 0.9889162335450279, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9924956234006302, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9798618414386878, "distance_score": 0.880300388818074, "overall_score": 0.9865681472260507, "standard_deviation_score": 0.9089197777019332, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9328407361302533, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9799\n- distance_score: 0.8803\n- overall_score: 0.9866\n- standard_deviation_score: 0.9089\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9328\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9834, overall_score: 0.9983, standard_deviation_score: 0.9877, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9915, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9995, distance_score: 0.9849, overall_score: 0.9985, standard_deviation_score: 0.9899, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9925, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9857, overall_score: 0.9985, standard_deviation_score: 0.9887, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9925, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9961)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9857), Performs well on overall_score (0.9985), Performs well on standard_deviation_score (0.9887), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9925), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9962)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9995), Performs well on distance_score (0.9849), Performs well on overall_score (0.9985), Performs well on standard_deviation_score (0.9899), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9925), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An adaptive search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, min_bound, max_bound)\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9834), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9877), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9915), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9942)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9926)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement to find function minimum.\n    \n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as (min, max) (default: (-5, 5))\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Configuration parameters\n    EXPLORATION_RATIO: float = 0.7  # 70% exploration, 30% exploitation\n    PERTURBATION_SCALE: float = 20  # Scaling factor for local search perturbation\n    \n    # Initialize with random point within bounds\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_space_width = bounds[1] - bounds[0]\n    \n    for _ in range(iterations):\n        # Exploration: random sampling across entire search space\n        if np.random.rand() < EXPLORATION_RATIO:\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        # Exploitation: local refinement around current best\n        else:\n            perturbation = np.random.normal(0, search_space_width / PERTURBATION_SCALE, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Evaluate new point and update best if improvement found\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9961, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.9962, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 3 (Score: 0.9582, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.967), Excellent overall_score (0.984)\n\n\n### Inspiration 4 (Score: 0.8866, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using array for cleaner coordinates handling\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Hybrid search: random exploration (70%) or local refinement (30%)\n        if np.random.rand() < 0.7:\n            # Global exploration with uniform random sampling\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local refinement around current best with adaptive perturbation\n            perturbation = np.random.normal(0, (bounds[1]-bounds[0])/20, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Evaluate new point and update if better\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.986)\n\n\n### Inspiration 5 (Score: 0.9909, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Efficiently finds the minimum of a complex function by balancing:\n    - 70% random exploration of the search space\n    - 30% local refinement around the current best solution\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    range_size = max_bound - min_bound\n    \n    # Initialize with random 2D point within bounds\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # Exploration vs exploitation balance\n        if np.random.rand() < 0.7:\n            # Global exploration - random sampling\n            candidate = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local exploitation - refine around best found point\n            perturbation = np.random.normal(0, range_size/20, 2)\n            candidate = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point, best_value = candidate, candidate_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates and evaluate\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random coordinates and evaluate\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        current_value = evaluate_function(x, y)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made over the current program:\n\n1. Replaced the simple random search with a balanced exploration-exploitation approach\n2. Added adaptive exploration probability that decreases from 0.8 to 0.3 over iterations\n3. Implemented adaptive step sizes for local exploitation that decrease over time\n4. Maintained the same function signature and return format for compatibility\n\nThis approach should significantly improve the value_score, distance_score, overall_score, standard_deviation_score, and combined_score while maintaining the perfect speed and reliability scores. The algorithm now efficiently explores the search space initially and then refines around promising solutions, which should help find better minima and reduce variance between runs."]}}}