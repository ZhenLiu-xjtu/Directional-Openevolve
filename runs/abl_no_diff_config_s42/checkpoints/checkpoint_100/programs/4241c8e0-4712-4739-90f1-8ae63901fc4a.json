{"id": "4241c8e0-4712-4739-90f1-8ae63901fc4a", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "addaefe1-ad1b-4b4b-aee7-e39add76c824", "generation": 4, "timestamp": 1755442537.7926219, "iteration_found": 94, "metrics": {"runs_successfully": 1.0, "value_score": 0.9993518330540222, "distance_score": 0.9835297373728787, "overall_score": 0.998251824542245, "standard_deviation_score": 0.9862528653090485, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9912591227112251, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9991664333589088, "distance_score": 0.9799252624777389, "overall_score": 0.9979265502807588, "standard_deviation_score": 0.9847532893048356, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9896327514037938, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9992\n- distance_score: 0.9799\n- overall_score: 0.9979\n- standard_deviation_score: 0.9848\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9896\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9990, distance_score: 0.9774, overall_score: 0.9977, standard_deviation_score: 0.9849, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9887, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9992, distance_score: 0.9799, overall_score: 0.9979, standard_deviation_score: 0.9848, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9896, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9994, distance_score: 0.9836, overall_score: 0.9983, standard_deviation_score: 0.9876, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9916, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9994), Performs well on distance_score (0.9836), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9876), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9916), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9946)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9992), Performs well on distance_score (0.9799), Performs well on overall_score (0.9979), Performs well on standard_deviation_score (0.9848), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9896), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9942)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and unpack coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9990), Performs well on distance_score (0.9774), Performs well on overall_score (0.9977), Performs well on standard_deviation_score (0.9849), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9887), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9933)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized search algorithm with global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search range)\n            step_size = search_range * 0.05\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Global exploration with random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate point\n        value = evaluate_function(*point)\n\n        # Update best solution if improved\n        if value < best_value:\n            best_point = point\n            best_value = value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9938)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm balancing exploration and exploitation for improved minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9956, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.8866, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement to find function minimum.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Configuration parameters\n    EXPLORATION_RATIO = 0.7  # 70% exploration, 30% exploitation\n    PERTURBATION_SCALE = 20  # Scaling factor for local search perturbation\n    \n    # Initialize with random point within bounds\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_space_width = bounds[1] - bounds[0]\n    \n    for _ in range(iterations):\n        # Exploration: random sampling across entire search space\n        if np.random.rand() < EXPLORATION_RATIO:\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        # Exploitation: local refinement around current best\n        else:\n            perturbation = np.random.normal(0, search_space_width / PERTURBATION_SCALE, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Evaluate new point and update best if improvement found\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.986)\n\n\n### Inspiration 3 (Score: 0.8901, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    An adaptive search algorithm balancing exploration and exploitation to find function minimum.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the minimum found\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n### Inspiration 4 (Score: 0.9942, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and unpack coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 5 (Score: 0.9885, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to find better minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random points across the search space\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Narrowing exploration factor - decreases over time\n    exploration_factor = 1.0\n    \n    for i in range(iterations):\n        # Gradually reduce exploration range over time\n        exploration_factor = max(0.1, exploration_factor * 0.999)\n        \n        # With 20% probability, explore around the best point found so far\n        if np.random.random() < 0.2:\n            # Add small perturbation to best point\n            x = np.clip(best_x + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, exploration_factor), bounds[0], bounds[1])\n        else:\n            # Generate random candidate point\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.997)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to simplify the code while maintaining/improving performance:\n\n1. Simplified the overall structure by removing unnecessary variable unpacking (min_bound, max_bound)\n2. Maintained the adaptive exploration-exploitation balance that was present in the top-performing Program 1\n3. Kept the code more concise while preserving the adaptive step size mechanism\n4. Improved readability through clearer comments and more focused variable names\n5. Maintained the same function signature and return format for compatibility\n\nThis implementation balances simplicity with performance by using an adaptive approach that starts with more exploration (80%) and gradually shifts toward more exploitation (30%) as the search progresses. The step size for local refinement also adapts, starting larger (5% of search range) and getting smaller (2%) over time, allowing for both global exploration and local optimization."]}}}