{"id": "3aff44ac-cf60-4908-939f-6553e1cd4042", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement (proven effective in top performers)\n        if np.random.rand() < 0.7:\n            # Random exploration\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "54f77abf-cff4-4e3e-a33e-a559f3d48b12", "generation": 3, "timestamp": 1755442200.4030154, "iteration_found": 52, "metrics": {"runs_successfully": 1.0, "value_score": 0.9977730937478607, "distance_score": 0.9622498031423123, "overall_score": 0.9960895921142873, "standard_deviation_score": 0.9721997332993766, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9804479605714359, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9605800346027449, "distance_score": 0.8575671725816286, "overall_score": 0.9823170897033807, "standard_deviation_score": 0.8761696300118625, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9115854485169033, "success_rate": 1.0}, "island": 4}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9606\n- distance_score: 0.8576\n- overall_score: 0.9823\n- standard_deviation_score: 0.8762\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9116\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9978, distance_score: 0.9576, overall_score: 0.9957, standard_deviation_score: 0.9696, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9783, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9980, distance_score: 0.9628, overall_score: 0.9962, standard_deviation_score: 0.9731, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9809, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9981, distance_score: 0.9636, overall_score: 0.9962, standard_deviation_score: 0.9721, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9810, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9901)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement\n        if np.random.rand() < 0.7:\n            # Random exploration\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9981), Performs well on distance_score (0.9636), Performs well on overall_score (0.9962), Performs well on standard_deviation_score (0.9721), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9810), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9901)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    A hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with a random 2D point\n    best_point = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Hybrid approach: 70% exploration, 30% exploitation\n        if np.random.rand() < 0.7:\n            # Global exploration with random sampling\n            current_point = np.random.uniform(min_bound, max_bound, size=2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, size=2)\n            current_point = np.clip(best_point + perturbation, min_bound, max_bound)\n            \n        # Evaluate candidate point and update best if better\n        current_value = evaluate_function(*current_point)\n        if current_value < best_value:\n            best_value, best_point = current_value, current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9980), Performs well on distance_score (0.9628), Performs well on overall_score (0.9962), Performs well on standard_deviation_score (0.9731), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9809), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9888)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet optimized search algorithm balancing global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    local_step = search_range * 0.05  # 5% of search range for local exploration\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration around best point with normal distribution\n            x = np.clip(best_x + np.random.normal(0, local_step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, local_step), min_bound, max_bound)\n        else:\n            # Global exploration with random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate point and update if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9978), Performs well on distance_score (0.9576), Performs well on overall_score (0.9957), Performs well on standard_deviation_score (0.9696), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9783), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9853)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n\n    for _ in range(iterations):\n        # With 20% probability, explore locally around best point\n        if np.random.random() < 0.2:\n            # Generate point near current best with adaptive step size (5% of search range)\n            point = best_point + np.random.normal(0, search_range * 0.05, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Keep within bounds\n        else:\n            # Generate completely random point across search space\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        x, y = point\n        value = evaluate_function(x, y)\n\n        # Update best if current point is better\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            best_point = point\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9846)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement\n        if np.random.rand() < 0.7:\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Update best if current is better\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9901, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\nfrom typing import Tuple\n\n\ndef search_algorithm(iterations: int = 1000, bounds: Tuple[float, float] = (-5, 5)) -> Tuple[float, float, float]:\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement\n        if np.random.rand() < 0.7:\n            # Random exploration\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x: float, y: float) -> float:\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search() -> Tuple[float, float, float]:\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 2 (Score: 0.9582, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.967)\n\n\n### Inspiration 3 (Score: 0.9419, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using vectorized generation\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_x, best_y = best_point\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random candidate point in one line\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(x, y)\n\n        # Update best if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.949)\n\n\n### Inspiration 4 (Score: 0.9846, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement\n        if np.random.rand() < 0.7:\n            new_point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, bounds[0], bounds[1])\n        \n        # Update best if current is better\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x:.4f}, {y:.4f}) with value {value:.4f}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.995)\n\n\n### Inspiration 5 (Score: 0.9888, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet optimized search algorithm balancing global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    local_step = search_range * 0.05  # 5% of search range for local exploration\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration around best point with normal distribution\n            x = np.clip(best_x + np.random.normal(0, local_step), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, local_step), min_bound, max_bound)\n        else:\n            # Global exploration with random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        # Evaluate candidate point and update if improved\n        current_value = evaluate_function(x, y)\n        if current_value < best_value:\n            best_x, best_y, best_value = x, y, current_value\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n\n    for _ in range(iterations):\n        # Generate random candidate point\n        current_point = np.random.uniform(bounds[0], bounds[1], size=2)\n        current_value = evaluate_function(*current_point)\n\n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = current_point\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm combining random exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    # Initialize with random point\n    best_point = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(*best_point)\n    \n    for _ in range(iterations):\n        # 70% random exploration, 30% local refinement (proven effective in top performers)\n        if np.random.rand() < 0.7:\n            # Random exploration\n            new_point = np.random.uniform(min_bound, max_bound, 2)\n        else:\n            # Local refinement with adaptive perturbation\n            perturbation = np.random.normal(0, search_range/20, 2)\n            new_point = np.clip(best_point + perturbation, min_bound, max_bound)\n        \n        # Evaluate and update best if improved\n        current_value = evaluate_function(*new_point)\n        if current_value < best_value:\n            best_point, best_value = new_point, current_value\n    \n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made:\n1. Reintroduced the hybrid search approach from the top-performing programs (70% random exploration, 30% local refinement)\n2. Simplified variable names and structure for better readability\n3. Maintained the same function signature and return type as the original\n4. Added clear comments explaining the algorithm's behavior\n\nThis implementation should address the declining metrics by combining the global exploration ability of random search with local refinement around promising solutions, which was proven effective in the top-performing previous versions."]}}}