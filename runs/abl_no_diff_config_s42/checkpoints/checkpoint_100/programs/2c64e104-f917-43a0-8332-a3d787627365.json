{"id": "2c64e104-f917-43a0-8332-a3d787627365", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An adaptive search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")", "language": "python", "parent_id": "a9fb4e02-ff32-486c-8966-cbce9ce73291", "generation": 4, "timestamp": 1755442557.142852, "iteration_found": 99, "metrics": {"runs_successfully": 1.0, "value_score": 0.9893439495606888, "distance_score": 0.7033655630517271, "overall_score": 0.960408398926747, "standard_deviation_score": 0.5479683260969457, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8020419946337348, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Full rewrite", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9962813033755694, "distance_score": 0.9475980525860689, "overall_score": 0.994554716230172, "standard_deviation_score": 0.9620790328214299, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9727735811508595, "success_rate": 1.0}, "island": 3}, "artifacts_json": null, "artifact_dir": null, "prompts": {"full_rewrite_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9963\n- distance_score: 0.9476\n- overall_score: 0.9946\n- standard_deviation_score: 0.9621\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9728\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9990, distance_score: 0.9760, overall_score: 0.9975, standard_deviation_score: 0.9804, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9873, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9993, distance_score: 0.9831, overall_score: 0.9983, standard_deviation_score: 0.9871, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9913, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9993, distance_score: 0.9834, overall_score: 0.9983, standard_deviation_score: 0.9878, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9915, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9956)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9993), Performs well on distance_score (0.9834), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9878), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9915), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9954)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with fixed step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9993), Performs well on distance_score (0.9831), Performs well on overall_score (0.9983), Performs well on standard_deviation_score (0.9871), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9913), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9934)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and unpack coordinates\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9990), Performs well on distance_score (0.9760), Performs well on overall_score (0.9975), Performs well on standard_deviation_score (0.9804), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9873), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9930)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An optimized hybrid search algorithm combining global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Calculate search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 25% chance for local refinement, 75% for global exploration\n        if np.random.random() < 0.25:\n            # Local refinement with adaptive step size (2.5% of search range)\n            step = search_range * 0.025\n            candidate = best_point + np.random.normal(0, step, size=2)\n            candidate = np.clip(candidate, min_bound, max_bound)\n        else:\n            # Global exploration - completely random point\n            candidate = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate and update best if improved\n        candidate_value = evaluate_function(*candidate)\n        if candidate_value < best_value:\n            best_point = candidate\n            best_value = candidate_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9910)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm with global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    search_range = bounds[1] - bounds[0]\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search range)\n            point = best_point + np.random.normal(0, search_range * 0.05, size=2)\n            point = np.clip(point, bounds[0], bounds[1])\n        else:\n            # Global exploration with random point\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        # Evaluate candidate point and update best if improved\n        value = evaluate_function(*point)\n        if value < best_value:\n            best_point, best_value = point, value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9956, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.999)\n\n\n### Inspiration 2 (Score: 0.7361, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm for function minimization.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = current_value = evaluate_function(x, y)\n    best_x, best_y = x, y\n    \n    # Adaptive search parameters\n    step_size = (bounds[1] - bounds[0]) / 10  # Initial step size\n    \n    for i in range(iterations):\n        # Decrease step size over time for finer search\n        current_step = step_size * (1 - i/iterations)\n        \n        # Take a step in random direction\n        x += np.random.uniform(-current_step, current_step)\n        y += np.random.uniform(-current_step, current_step)\n        \n        # Ensure we stay within bounds\n        x = np.clip(x, bounds[0], bounds[1])\n        y = np.clip(y, bounds[0], bounds[1])\n        \n        # Evaluate new position\n        current_value = evaluate_function(x, y)\n        \n        # Update best solution if current is better\n        if current_value < best_value:\n            best_value, best_x, best_y = current_value, x, y\n    \n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.917)\n\n\n### Inspiration 3 (Score: 0.8900, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 4 (Score: 0.8820, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified yet effective search algorithm balancing exploration and exploitation.\n    \n    Uses simulated annealing principles to find the global minimum of a function.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Simulated annealing parameters\n    temperature = 1.0\n    cooling_rate = 0.995\n    search_space_width = bounds[1] - bounds[0]\n    \n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance\n        exploration_prob = 0.3 + 0.6 * (1 - i/iterations)\n        \n        if np.random.random() < exploration_prob:\n            # Exploration: Random search within bounds\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Exploitation: Local search around current best\n            step_size = search_space_width * 0.1 * temperature\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip([x, y], bounds[0], bounds[1])\n        \n        # Evaluate candidate point\n        current_value = evaluate_function(x, y)\n        \n        # Acceptance criterion with simulated annealing\n        if (current_value < best_value or \n            np.random.random() < np.exp((best_value - current_value)/temperature)):\n            best_x, best_y, best_value = x, y, current_value\n        \n        # Cool down temperature\n        temperature *= cooling_rate\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.980)\n\n\n### Inspiration 5 (Score: 0.9910, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simplified search algorithm with global exploration and local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    search_range = bounds[1] - bounds[0]\n\n    for _ in range(iterations):\n        # 20% chance for local exploration, 80% for global exploration\n        if np.random.random() < 0.2:\n            # Local exploration with adaptive step size (5% of search range)\n            point = best_point + np.random.normal(0, search_range * 0.05, size=2)\n            point = np.clip(point, bounds[0], bounds[1])\n        else:\n            # Global exploration with random point\n            point = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        # Evaluate candidate point and update best if improved\n        value = evaluate_function(*point)\n        if value < best_value:\n            best_point, best_value = point, value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\nUnique approach: Modification: Full rewrite, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An improved random search algorithm with local exploration to avoid local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random 2D point\n    best_point = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_point)\n    \n    # Search space parameters\n    min_bound, max_bound = bounds\n    search_range = max_bound - min_bound\n    local_search_prob = 0.2  # Probability of local exploration\n    \n    for _ in range(iterations):\n        # With specified probability, explore locally around best point\n        if np.random.random() < local_search_prob:\n            # Generate point near current best with adaptive step size\n            step_size = search_range * 0.05  # 5% of search range\n            point = best_point + np.random.normal(0, step_size, size=2)\n            point = np.clip(point, min_bound, max_bound)  # Ensure within bounds\n        else:\n            # Generate completely random point\n            point = np.random.uniform(min_bound, max_bound, size=2)\n            \n        # Evaluate candidate point\n        current_value = evaluate_function(*point)\n\n        # Update best if current point is better\n        if current_value < best_value:\n            best_value = current_value\n            best_point = point.copy()\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\n# Task\nRewrite the program to improve its performance on the specified metrics.\nProvide the complete new program code.\n\nIMPORTANT: Make sure your rewritten program maintains the same inputs and outputs\nas the original program, but with improved internal implementation.\n\n```python\n# Your rewritten program here\n```\n", "responses": ["```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An adaptive search algorithm balancing exploration and exploitation.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_point = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(*best_point)\n    search_range = bounds[1] - bounds[0]\n\n    for i in range(iterations):\n        # Adaptive exploration-exploitation balance (more exploitation over time)\n        explore_prob = 0.8 - 0.5 * (i/iterations)\n        \n        if np.random.random() < explore_prob:\n            # Global exploration with random sampling\n            point = np.random.uniform(bounds[0], bounds[1], 2)\n        else:\n            # Local exploitation with adaptive step size (decreases over time)\n            step_size = search_range * (0.05 - 0.03 * (i/iterations))\n            point = best_point + np.random.normal(0, step_size, 2)\n            point = np.clip(point, bounds[0], bounds[1])\n        \n        # Evaluate and update if improved\n        current_value = evaluate_function(*point)\n        if current_value < best_value:\n            best_point, best_value = point, current_value\n\n    return (*best_point, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n```\n\nThe key improvements made to address the performance regressions:\n\n1. **Adaptive Exploration-Exploitation Balance**: Reintroduced the time-varying exploration probability (starting at 80% and decreasing to 30%) that was present in the top-performing previous versions. This helps the algorithm first explore broadly then focus on promising areas.\n\n2. **Adaptive Step Size**: Implemented a step size that decreases over time for local exploitation, allowing for finer search around promising regions as the algorithm progresses.\n\n3. **Simplified Code Structure**: Maintained clean, readable code structure while restoring the adaptive mechanisms that contributed to better performance in previous iterations.\n\nThese changes should help recover the lost performance in value_score, distance_score, overall_score, standard_deviation_score, and combined_score while maintaining the perfect scores for runs_successfully, speed_score, reliability_score, and success_rate."]}}}