{"id": "796fd64b-f51f-447d-99b7-dbbed693b813", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point and evaluate\n    best_position = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_position)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            search_range = bounds[1] - bounds[0]\n            coords = best_coords + np.random.normal(0, search_range/10, size=2)\n            coords = np.clip(coords, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            # Generate candidate solution\n            coords = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()  # Add copy to prevent reference issues\n\n    return (*best_position, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "b3768b63-26d3-49af-81cb-3b57d5ac20ee", "generation": 3, "timestamp": 1755440198.104085, "iteration_found": 66, "metrics": {"runs_successfully": 1.0, "value_score": 0.994648125578181, "distance_score": 0.22424116532497027, "overall_score": 0.5117827085844081, "standard_deviation_score": 0.28651145552968726, "speed_score": 1.0, "reliability_score": 0.5, "combined_score": 0.5589135429220404, "success_rate": 0.5}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 8 lines with 16 lines\nChange 2: Replace 4 lines with 3 lines\nChange 3: Replace 6 lines with 6 lines\nChange 4: 'return (*best_coords, best_value)' to 'return (*best_position, best_value)'", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9624072096210718, "distance_score": 0.8497451628058477, "overall_score": 0.9820742088484453, "standard_deviation_score": 0.8805885694640234, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9103710442422266, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9624\n- distance_score: 0.8497\n- overall_score: 0.9821\n- standard_deviation_score: 0.8806\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9104\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9908, distance_score: 0.9206, overall_score: 0.9914, standard_deviation_score: 0.9407, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9571, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9927, distance_score: 0.9221, overall_score: 0.9917, standard_deviation_score: 0.9406, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9583, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9919, distance_score: 0.9381, overall_score: 0.9932, standard_deviation_score: 0.9537, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9662, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9826)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9919), Performs well on distance_score (0.9381), Performs well on overall_score (0.9932), Performs well on standard_deviation_score (0.9537), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9662), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9784)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9927), Performs well on distance_score (0.9221), Performs well on overall_score (0.9917), Performs well on standard_deviation_score (0.9406), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9583), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9779)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9908), Performs well on distance_score (0.9206), Performs well on overall_score (0.9914), Performs well on standard_deviation_score (0.9407), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9571), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9748)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum within specified bounds.\n    \n    Samples random points in the search space and tracks the minimum value found.\n    \n    Args:\n        iterations: Number of search iterations to perform\n        bounds: Tuple containing (min, max) search bounds for both dimensions\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the optimal point found\n    \"\"\"\n    # Initialize with random point within bounds\n    min_bound, max_bound = bounds\n    best_x, best_y = np.random.uniform(min_bound, max_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Calculate search range for adaptive perturbation\n    search_range = max_bound - min_bound\n    \n    for _ in range(iterations):\n        # 90% global exploration, 10% local exploitation using probability\n        if np.random.random() < 0.9:\n            x, y = np.random.uniform(min_bound, max_bound, size=2)\n        else:\n            # Adaptive local search using search space proportion\n            perturbation = search_range / 15  # ~3% of search range\n            x = np.clip(best_x + np.random.normal(0, perturbation), min_bound, max_bound)\n            y = np.clip(best_y + np.random.normal(0, perturbation), min_bound, max_bound)\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9766)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9826, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.992)\n\n\n### Inspiration 2 (Score: 0.9636, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.980)\n\n\n### Inspiration 3 (Score: 0.9534, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in a single line\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate both coordinates in a single line\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 2 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.961)\n\n\n### Inspiration 4 (Score: 0.8769, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 10 lines\nChange 2: Replace 8 lines with 6 lines, Excellent runs_successfully (1.000), Excellent value_score (0.965)\n\n\n### Inspiration 5 (Score: 0.9784, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.993)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Initialize with random point and evaluate\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)\n\n    for _ in range(iterations):\n        # Generate candidate solution\n        coords = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords\n\n    return (*best_coords, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Analysis of Current Program\n\nThe current program has regressed in several key metrics (value_score, distance_score, overall_score, standard_deviation_score, and combined_score) compared to previous versions. The main issue appears to be the simplified search algorithm that only performs global random search without any local exploitation around promising solutions.\n\n# Proposed Improvements\n\n## 1. Add Local Search Capability\n\nThe top-performing programs all balanced global exploration with local exploitation. Let's reintroduce this hybrid approach:\n\n<<<<<<< SEARCH\n    for _ in range(iterations):\n        # Generate candidate solution\n        coords = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords\n=======\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            search_range = bounds[1] - bounds[0]\n            coords = best_coords + np.random.normal(0, search_range/10, size=2)\n            coords = np.clip(coords, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            # Generate candidate solution\n            coords = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()  # Add copy to prevent reference issues\n>>>>>>> REPLACE\n\n## 2. Improve Variable Names for Readability\n\nWhile keeping the code concise, we can improve clarity with more descriptive variable names:\n\n<<<<<<< SEARCH\n    # Initialize with a random point\n    # Initialize with random point and evaluate\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)\n=======\n    # Initialize with random point and evaluate\n    best_position = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_position)\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n        coords = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()  # Add copy to prevent reference issues\n=======\n        position = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(*position)\n\n        if value < best_value:\n            best_value = value\n            best_position = position.copy()  # Add copy to prevent reference issues\n>>>>>>> REPLACE\n\n<<<<<<< SEARCH\n    return (*best_coords, best_value)\n=======\n    return (*best_position, best_value)\n>>>>>>> REPLACE\n\n# Explanation of Changes\n\n1. **Added Local Search**: By reintroducing the 20% local search probability, we allow the algorithm to explore around promising solutions it has found, which should improve all the regression metrics. This matches the approach used in the top-performing programs.\n\n2. **Coordinate Clipping**: Ensures we stay within the search bounds during local exploration.\n\n3. **Variable Name Improvements**: Changed \"best_coords\" to \"best_position\" for better readability while maintaining concise code.\n\n4. **Explicit Copy**: Added `.copy()` when updating best_position to prevent potential reference issues with numpy arrays.\n\nThese changes should help recover the performance of previous top-performing versions while maintaining good code readability and the excellent speed/reliability metrics."]}}}