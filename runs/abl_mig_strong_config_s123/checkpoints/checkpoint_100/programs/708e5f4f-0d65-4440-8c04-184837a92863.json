{"id": "708e5f4f-0d65-4440-8c04-184837a92863", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum within specified bounds.\n    \n    Samples random points in the search space and tracks the minimum value found.\n    \n    Args:\n        iterations: Number of search iterations to perform\n        bounds: Tuple containing (min, max) search bounds for both dimensions\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the optimal point found\n    \"\"\"\n    # Unpack bounds and calculate search range for readability\n    lower, upper = bounds\n    search_range = upper - lower\n    \n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global) and exploitation (local search)\n        if np.random.random() < 0.7:  # 70% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 30% local exploration around best solution\n            # Explore around current best with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/15)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/15)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "c18c8ccd-9241-4202-a3e2-9dad89f0e5fd", "generation": 6, "timestamp": 1755440339.5100794, "iteration_found": 85, "metrics": {"runs_successfully": 1.0, "value_score": 0.996188949675524, "distance_score": 0.9462427249090867, "overall_score": 0.9943100329296807, "standard_deviation_score": 0.958495392718946, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9715501646484029, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 3 lines with 3 lines\nChange 2: Replace 2 lines with 2 lines\nChange 3: Replace 2 lines with 6 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9927252811007627, "distance_score": 0.9200482791391025, "overall_score": 0.9916677393199678, "standard_deviation_score": 0.9443397525794266, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9583386965998383, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9927\n- distance_score: 0.9200\n- overall_score: 0.9917\n- standard_deviation_score: 0.9443\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9583\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: distance_score, overall_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9902, distance_score: 0.9289, overall_score: 0.9921, standard_deviation_score: 0.9440, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9605, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9949, distance_score: 0.9301, overall_score: 0.9928, standard_deviation_score: 0.9524, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9642, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9976, distance_score: 0.9535, overall_score: 0.9952, standard_deviation_score: 0.9658, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9761, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9876)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local refinement.\n    \n    Efficiently finds function minima by balancing exploration of new areas\n    with exploitation of promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    lower, upper = bounds\n    search_range = upper - lower\n    \n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global search) and exploitation (local refinement)\n        if np.random.random() < 0.3:  # 30% local refinement\n            # Explore locally around best solution with adaptive range\n            x = best_x + np.random.normal(0, search_range/15)\n            y = best_y + np.random.normal(0, search_range/15)\n            x, y = np.clip(x, lower, upper), np.clip(y, lower, upper)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9976), Performs well on distance_score (0.9535), Performs well on overall_score (0.9952), Performs well on standard_deviation_score (0.9658), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9761), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9816)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% local refinement\n            # Add small perturbation to best solution\n            search_range = bounds[1] - bounds[0]\n            x = best_x + np.random.normal(0, search_range/15)\n            y = best_y + np.random.normal(0, search_range/15)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9949), Performs well on distance_score (0.9301), Performs well on overall_score (0.9928), Performs well on standard_deviation_score (0.9524), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9642), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9795)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Initialize with random point and evaluate\n    best_coords = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(*best_coords)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            coords = best_coords + np.random.normal(0, (bounds[1]-bounds[0])/10, size=2)\n            coords = np.clip(coords, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            # Generate candidate solution\n            coords = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(*coords)\n\n        if value < best_value:\n            best_value = value\n            best_coords = coords.copy()  # Ensure we create a copy of the array\n\n    return (*best_coords, best_value)\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9902), Performs well on distance_score (0.9289), Performs well on overall_score (0.9921), Performs well on standard_deviation_score (0.9440), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9605), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9766)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm that balances exploration and exploitation.\n    \n    Combines global random search with local exploration around promising solutions\n    to avoid getting stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balanced exploration/exploitation strategy\n        if np.random.random() < 0.2:  # 20% local exploration around best solution\n            # Explore locally with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9786)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum within specified bounds.\n    \n    Samples random points in the search space and tracks the minimum value found.\n    \n    Args:\n        iterations: Number of search iterations to perform\n        bounds: Tuple containing (min, max) search bounds for both dimensions\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the optimal point found\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global) and exploitation (local search)\n        if np.random.random() < 0.8:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 20% local exploration around best solution\n            # Explore around current best with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9876, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Optimized search algorithm combining global exploration and local refinement.\n    \n    Efficiently finds function minima by balancing exploration of new areas\n    with exploitation of promising solutions.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    lower, upper = bounds\n    search_range = upper - lower\n    \n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global search) and exploitation (local refinement)\n        if np.random.random() < 0.3:  # 30% local refinement\n            # Explore locally around best solution with adaptive range\n            x = best_x + np.random.normal(0, search_range/15)\n            y = best_y + np.random.normal(0, search_range/15)\n            x, y = np.clip(x, lower, upper), np.clip(y, lower, upper)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(lower, upper, size=2)\n            \n        # Evaluate candidate solution\n        current_value = evaluate_function(x, y)\n\n        # Update best solution if improved\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 25 lines with 41 lines, Excellent runs_successfully (1.000), Excellent value_score (0.998)\n\n\n### Inspiration 2 (Score: 0.8846, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (new random points) and exploitation (local search)\n        if np.random.random() < 0.2:  # 20% chance for local exploration\n            # Explore around current best solution with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.984)\n\n\n### Inspiration 3 (Score: 0.9747, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm that balances exploration and exploitation.\n    \n    Combines global random search (80%) with local exploration (20%) around\n    promising solutions to efficiently find minima without getting stuck.\n\n    Args:\n        iterations: Number of search iterations to perform\n        bounds: Tuple containing (min, max) search bounds for both dimensions\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the optimal point found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration and exploitation\n        if np.random.random() < 0.2:  # 20% local search around best solution\n            # Explore locally with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n        else:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 14 lines\nChange 2: Replace 10 lines with 13 lines, Excellent runs_successfully (1.000), Excellent value_score (0.991)\n\n\n### Inspiration 4 (Score: 0.9610, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search optimization algorithm for function minimization.\n    \n    This algorithm explores the search space by evaluating randomly generated\n    candidate solutions and keeps track of the best solution found.\n\n    Args:\n        iterations: Number of candidate solutions to evaluate\n        bounds: Tuple specifying the search space boundaries (min, max)\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value) where best_value is the\n        minimum function value found\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate solution using random search\n        candidate_x, candidate_y = np.random.uniform(bounds[0], bounds[1], size=2)\n        candidate_value = evaluate_function(candidate_x, candidate_y)\n\n        # Update best solution if candidate is better\n        if candidate_value < best_value:\n            best_value = candidate_value\n            best_x, best_y = candidate_x, candidate_y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 8 lines\nChange 2: Replace 10 lines with 14 lines, Excellent runs_successfully (1.000), Excellent value_score (0.976)\n\n\n### Inspiration 5 (Score: 0.9543, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.967)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm to find function minimum within specified bounds.\n    \n    Samples random points in the search space and tracks the minimum value found.\n    \n    Args:\n        iterations: Number of search iterations to perform\n        bounds: Tuple containing (min, max) search bounds for both dimensions\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value) representing the optimal point found\n    \"\"\"\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (global) and exploitation (local search)\n        if np.random.random() < 0.8:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 20% local exploration around best solution\n            # Explore around current best with normal distribution\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            x, y = np.clip(x, bounds[0], bounds[1]), np.clip(y, bounds[0], bounds[1])\n            \n        value = evaluate_function(x, y)\n\n        # Update best solution if current is better\n        if value < best_value:\n            best_value, best_x, best_y = value, x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Suggested Improvements\n\nBased on the performance metrics showing regression in distance_score, overall_score, and combined_score, I recommend reverting to a more balanced exploration/exploitation ratio and adjusting the local search range to match the top-performing programs.\n\n## Change 1: Adjust Exploration/Exploitation Balance\n```diff\n<<<<<<< SEARCH\n        if np.random.random() < 0.8:  # 80% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 20% local exploration around best solution\n=======\n        if np.random.random() < 0.7:  # 70% global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        else:  # 30% local exploration around best solution\n>>>>>>> REPLACE\n```\nThis changes from 80% global/20% local to 70% global/30% local exploration, matching the ratio used in Program 1 which had significantly better distance_score (0.9535 vs current 0.9200).\n\n## Change 2: Narrow Local Search Range\n```diff\n<<<<<<< SEARCH\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/10)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/10)\n=======\n            x = best_x + np.random.normal(0, (bounds[1]-bounds[0])/15)\n            y = best_y + np.random.normal(0, (bounds[1]-bounds[0])/15)\n>>>>>>> REPLACE\n```\nReducing the local search range from 1/10 to 1/15 of the search space allows for finer-grained local refinement around promising solutions, which was a key feature of the top-performing programs.\n\n## Change 3: Simplify Code and Improve Readability\n```diff\n<<<<<<< SEARCH\n    # Initialize with random point within bounds\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n=======\n    # Unpack bounds and calculate search range for readability\n    lower, upper = bounds\n    search_range = upper - lower\n    \n    # Initialize with random starting point\n    best_x, best_y = np.random.uniform(lower, upper, size=2)\n>>>>>>> REPLACE\n```\nThis simplifies the code by unpacking bounds and calculating the search range once, improving readability while maintaining the same functionality - addressing the \"simplify code\" improvement area.\n\nThese changes should help recover the lost performance in distance_score, overall_score, and combined_score while maintaining the perfect scores for runs_successfully, speed_score, and reliability_score."]}}}