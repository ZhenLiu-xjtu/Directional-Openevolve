{"id": "eb4e7348-ac2e-41f5-ad2f-13d0b9599fd0", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore globally and refine locally\n        if np.random.random() < 0.2:  # 20% chance to refine around best found\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "3b28caae-12d5-4b41-9bf7-f13bab18affb", "generation": 3, "timestamp": 1755441293.8302784, "iteration_found": 75, "metrics": {"runs_successfully": 1.0, "value_score": 0.9966708037528487, "distance_score": 0.9525247727640382, "overall_score": 0.9950215100057469, "standard_deviation_score": 0.9644454912391206, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9751075500287345, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 11 lines with 20 lines\nChange 2: Replace 10 lines with 12 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9741310650010813, "distance_score": 0.8812623486161029, "overall_score": 0.985998038826972, "standard_deviation_score": 0.9030124968442248, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9299901941348595, "success_rate": 1.0}, "island": 1}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9741\n- distance_score: 0.8813\n- overall_score: 0.9860\n- standard_deviation_score: 0.9030\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9300\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9934, distance_score: 0.9357, overall_score: 0.9930, standard_deviation_score: 0.9492, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9650, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9959, distance_score: 0.9481, overall_score: 0.9947, standard_deviation_score: 0.9644, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9733, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9970, distance_score: 0.9560, overall_score: 0.9954, standard_deviation_score: 0.9662, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9768, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9879)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using uniform distribution\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore globally and refine locally\n        if np.random.random() < 0.2:  # 20% chance to refine around best found\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9970), Performs well on distance_score (0.9560), Performs well on overall_score (0.9954), Performs well on standard_deviation_score (0.9662), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9768), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9863)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore globally and refine locally\n        if np.random.random() < 0.2:  # 20% chance to refine around best found\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            # Simplified bounds unpacking\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9959), Performs well on distance_score (0.9481), Performs well on overall_score (0.9947), Performs well on standard_deviation_score (0.9644), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9733), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9818)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for clarity\n    lower_bound, upper_bound = bounds\n    local_search_prob = 0.1\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < local_search_prob:\n            # Local search: explore around best solution\n            step = 0.1 * (upper_bound - lower_bound)\n            x = np.clip(best_x + np.random.uniform(-step, step), lower_bound, upper_bound)\n            y = np.clip(best_y + np.random.uniform(-step, step), lower_bound, upper_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9934), Performs well on distance_score (0.9357), Performs well on overall_score (0.9930), Performs well on standard_deviation_score (0.9492), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9650), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9790)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < 0.1:  # 10% chance for local search\n            # Explore around best point with fixed step size\n            step = 0.1 * (upper_bound - lower_bound)\n            # Generate perturbations around best solution\n            x = best_x + np.random.uniform(-step, step)\n            y = best_y + np.random.uniform(-step, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, lower_bound, upper_bound)\n            y = np.clip(y, lower_bound, upper_bound)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9653)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9879, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point using uniform distribution\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore globally and refine locally\n        if np.random.random() < 0.2:  # 20% chance to refine around best found\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 10 lines with 12 lines\nChange 2: Replace 8 lines with 17 lines, Excellent runs_successfully (1.000), Excellent value_score (0.997)\n\n\n### Inspiration 2 (Score: 0.9525, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate random point in search space\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.967)\n\n\n### Inspiration 3 (Score: 0.9790, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    lower_bound, upper_bound = bounds\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < 0.1:  # 10% chance for local search\n            # Explore around best point with fixed step size\n            step = 0.1 * (upper_bound - lower_bound)\n            # Generate perturbations around best solution\n            x = best_x + np.random.uniform(-step, step)\n            y = best_y + np.random.uniform(-step, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, lower_bound, upper_bound)\n            y = np.clip(y, lower_bound, upper_bound)\n        else:\n            # Global random search\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 19 lines, Excellent runs_successfully (1.000), Excellent value_score (0.990)\n\n\n### Inspiration 4 (Score: 0.9818, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for clarity\n    lower_bound, upper_bound = bounds\n    local_search_prob = 0.1\n    \n    # Initialize with random point\n    best_x, best_y = np.random.uniform(lower_bound, upper_bound, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < local_search_prob:\n            # Local search: explore around best solution\n            step = 0.1 * (upper_bound - lower_bound)\n            x = np.clip(best_x + np.random.uniform(-step, step), lower_bound, upper_bound)\n            y = np.clip(best_y + np.random.uniform(-step, step), lower_bound, upper_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(lower_bound, upper_bound, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.993), Excellent distance_score (0.936)\n\n\n### Inspiration 5 (Score: 0.7958, Type: Alternative)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate random candidate solution\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 4 lines with 3 lines, Excellent runs_successfully (1.000), Excellent value_score (0.962)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["```python\n<<<<<<< SEARCH\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n=======\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: explore globally and refine locally\n        if np.random.random() < 0.2:  # 20% chance to refine around best found\n            # Add small perturbation to best solution\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:  # 80% chance for global exploration\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n>>>>>>> REPLACE\n```\n\n```python\n<<<<<<< SEARCH\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n\n=======\n    \"\"\"\n    Adaptive random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n\n>>>>>>> REPLACE\n```\n\nThese changes:\n1. Reintroduce the hybrid search approach from the top-performing Program 1 that combines global exploration with local refinement\n2. Add 20% chance of local search using normal distribution perturbations around the best found solution\n3. Keep 80% chance of global exploration with uniform random sampling\n4. Improve documentation to reflect the adaptive nature of the algorithm\n5. Use more concise bounds unpacking syntax (`*bounds`)\n6. Add proper bounds checking with `np.clip()`\n\nThis should address the performance regressions by:\n- Allowing local refinement around promising solutions (improving value_score)\n- Maintaining global exploration to find new promising regions (improving distance_score)\n- Creating a more balanced search strategy (improving overall_score and standard_deviation_score)\n\nThe combination of global exploration and local refinement was the key feature of the top-performing programs and should help recover the lost performance while maintaining good readability and speed."]}}}