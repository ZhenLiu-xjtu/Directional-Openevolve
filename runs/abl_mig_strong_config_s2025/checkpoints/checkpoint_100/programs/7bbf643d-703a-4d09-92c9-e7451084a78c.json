{"id": "7bbf643d-703a-4d09-92c9-e7451084a78c", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Use simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n    \n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution\n            # Local search: refine around best solution (10% of search space)\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = np.clip(np.random.normal(best_x, search_width), *bounds)\n            y = np.clip(np.random.normal(best_y, search_width), *bounds)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "03864191-85bc-4304-9840-4bfb4c760616", "generation": 5, "timestamp": 1755441495.059224, "iteration_found": 99, "metrics": {"runs_successfully": 1.0, "value_score": 0.9887028828625866, "distance_score": 0.9066879858284589, "overall_score": 0.9896781126771825, "standard_deviation_score": 0.9250187967202324, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9483905633859124, "success_rate": 1.0}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 4 lines with 2 lines\nChange 2: Replace 8 lines with 9 lines\nChange 3: Replace 3 lines with 3 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.9952628019722841, "distance_score": 0.9408377229500621, "overall_score": 0.9937468666093522, "standard_deviation_score": 0.9554957466196975, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.9687343330467608, "success_rate": 1.0}, "island": 2}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9953\n- distance_score: 0.9408\n- overall_score: 0.9937\n- standard_deviation_score: 0.9555\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.9687\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9953, distance_score: 0.9408, overall_score: 0.9937, standard_deviation_score: 0.9555, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9687, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9964, distance_score: 0.9467, overall_score: 0.9943, standard_deviation_score: 0.9573, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9715, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9971, distance_score: 0.9527, overall_score: 0.9951, standard_deviation_score: 0.9664, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9757, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9875)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions to \n    balance exploration and exploitation of the search space.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    # Use simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n\n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution with fixed perturbation\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:\n            # Global search: explore new random point\n            # Use simplified bounds unpacking\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9971), Performs well on distance_score (0.9527), Performs well on overall_score (0.9951), Performs well on standard_deviation_score (0.9664), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9757), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9851)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Adaptive random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions to \n    efficiently find minima without getting stuck in local optima.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n\n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution with fixed step size\n            x = best_x + np.random.normal(0, 0.5)\n            y = best_y + np.random.normal(0, 0.5)\n            # Keep within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9964), Performs well on distance_score (0.9467), Performs well on overall_score (0.9943), Performs well on standard_deviation_score (0.9573), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9715), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9838)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n    \n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution\n            search_width = (max_bound - min_bound) / 10  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width), min_bound, max_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9953), Performs well on distance_score (0.9408), Performs well on overall_score (0.9937), Performs well on standard_deviation_score (0.9555), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9687), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9817)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    # Simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < 0.1:  # 10% chance for local search\n            # Explore around best point with fixed step size\n            step = 0.1 * (bounds[1] - bounds[0])\n            # Generate single values for x and y perturbations\n            x = best_x + np.random.uniform(-step, step)\n            y = best_y + np.random.uniform(-step, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global random search with simplified bounds unpacking\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9807)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Random search algorithm for function minimization within specified bounds.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Hybrid search: global exploration with occasional local exploitation\n        if np.random.rand() < 0.15:  # 15% chance for local exploration\n            # Explore around best point with adaptive step size\n            step_size = 0.1 * (bounds[1] - bounds[0])  # 10% of search space width\n            x = best_x + np.random.uniform(-step_size, step_size)\n            y = best_y + np.random.uniform(-step_size, step_size)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global random search\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9875, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid random search algorithm for function minimization within specified bounds.\n    \n    Combines global exploration with local refinement around promising solutions to \n    balance exploration and exploitation of the search space.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Tuple specifying search space boundaries (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random coordinates\n    # Use simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n\n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution with fixed perturbation\n            x = np.clip(best_x + np.random.normal(0, 0.5), bounds[0], bounds[1])\n            y = np.clip(best_y + np.random.normal(0, 0.5), bounds[0], bounds[1])\n        else:\n            # Global search: explore new random point\n            # Use simplified bounds unpacking\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.997), Excellent distance_score (0.953)\n\n\n### Inspiration 2 (Score: 0.9747, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A hybrid search algorithm combining random exploration with local refinement.\n    \n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n        \n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n    \n    for _ in range(iterations):\n        # Adaptive search strategy\n        if np.random.random() < local_search_prob:\n            # Local search: explore around best solution\n            search_width = (bounds[1] - bounds[0]) / 10  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width), *bounds)\n            y = np.clip(np.random.normal(best_y, search_width), *bounds)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n        \n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 12 lines with 11 lines\nChange 2: Replace 12 lines with 22 lines, Excellent runs_successfully (1.000), Excellent value_score (0.989)\n\n\n### Inspiration 3 (Score: 0.9817, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with random point (simplified)\n    # Simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search (simplified)\n        # Hybrid search: mostly random with occasional local exploration\n        if np.random.rand() < 0.1:  # 10% chance for local search\n            # Explore around best point with fixed step size\n            step = 0.1 * (bounds[1] - bounds[0])\n            # Generate single values for x and y perturbations\n            x = best_x + np.random.uniform(-step, step)\n            y = best_y + np.random.uniform(-step, step)\n            # Ensure we stay within bounds\n            x = np.clip(x, bounds[0], bounds[1])\n            y = np.clip(y, bounds[0], bounds[1])\n        else:\n            # Global random search with simplified bounds unpacking\n            x, y = np.random.uniform(*bounds, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 7 lines with 9 lines, Excellent runs_successfully (1.000), Excellent value_score (0.994)\n\n\n### Inspiration 4 (Score: 0.9613, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate both coordinates in a single call for simplicity\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate both coordinates in a single call for simplicity\n        x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 2 lines with 2 lines\nChange 2: Replace 2 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.970)\n\n\n### Inspiration 5 (Score: 0.8815, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n    \n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n    search_width = (max_bound - min_bound) / 10  # 10% of search space\n\n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution\n            x = np.clip(np.random.normal(best_x, search_width), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width), min_bound, max_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 15 lines with 25 lines, Excellent runs_successfully (1.000), Excellent value_score (0.974)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    # Probability of performing local search around best solution\n    local_search_prob = 0.2\n    \n    for _ in range(iterations):\n        # Hybrid search strategy: balance exploration and exploitation\n        if np.random.random() < local_search_prob:\n            # Local search: refine around current best solution\n            search_width = (max_bound - min_bound) / 10  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width), min_bound, max_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        current_value = evaluate_function(x, y)\n        \n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Code Simplification Improvements\n\nTo enhance readability and maintainability while preserving performance, here are targeted simplifications:\n\n## 1. Simplify Bounds Handling\n<<<<<<< SEARCH\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n=======\n    # Use simplified bounds unpacking\n    best_x, best_y = np.random.uniform(*bounds, size=2)\n>>>>>>> REPLACE\n\nThis removes unnecessary variable unpacking while maintaining clarity through the `*bounds` syntax, reducing 3 lines to 2 while keeping the same functionality.\n\n## 2. Simplify Variable Names and Local Search\n<<<<<<< SEARCH\n            search_width = (max_bound - min_bound) / 10  # 10% of search space\n            x = np.clip(np.random.normal(best_x, search_width), min_bound, max_bound)\n            y = np.clip(np.random.normal(best_y, search_width), min_bound, max_bound)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        current_value = evaluate_function(x, y)\n=======\n            # Local search: refine around best solution (10% of search space)\n            search_width = (bounds[1] - bounds[0]) / 10\n            x = np.clip(np.random.normal(best_x, search_width), *bounds)\n            y = np.clip(np.random.normal(best_y, search_width), *bounds)\n        else:\n            # Global search: explore new random point\n            x, y = np.random.uniform(*bounds, size=2)\n            \n        value = evaluate_function(x, y)\n>>>>>>> REPLACE\n\nChanges:\n- Simplified `min_bound`/`max_bound` to direct `bounds` indexing\n- Used `*bounds` unpacking in clip() for cleaner code\n- Renamed `current_value` to `value` for consistency with other implementations\n- Combined comment with search_width calculation line\n\n## 3. Simplify Best Value Update\n<<<<<<< SEARCH\n        if current_value < best_value:\n            best_value = current_value\n            best_x, best_y = x, y\n=======\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n>>>>>>> REPLACE\n\nConsistent variable naming by using `value` instead of `current_value` to match the simplified code above.\n\nThese changes reduce code complexity by:\n- Removing unnecessary variable assignments\n- Using more concise numpy/python syntax\n- Improving variable name consistency\n- Streamlining comments while maintaining clarity\n\nThe algorithm's core functionality and performance characteristics remain identical, but the code becomes more readable and maintainable."]}}}