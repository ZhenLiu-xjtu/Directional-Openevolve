{"id": "1af5e362-2cdc-41e1-b0c7-560ef0acaf4a", "code": "# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An adaptive search algorithm that balances exploration and exploitation.\n    \n    Combines local search around promising solutions with global exploration\n    to avoid getting stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n    \n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - iteration/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n", "language": "python", "parent_id": "138ce983-cc18-48d9-bd84-574ab352269a", "generation": 4, "timestamp": 1755445222.1080065, "iteration_found": 95, "metrics": {"runs_successfully": 0.0, "error": "name 'iteration' is not defined"}, "complexity": 0.0, "diversity": 0.0, "metadata": {"changes": "Change 1: Replace 6 lines with 3 lines\nChange 2: Replace 3 lines with 3 lines", "parent_metrics": {"runs_successfully": 1.0, "value_score": 0.987974259952914, "distance_score": 0.7088590231042414, "overall_score": 0.9607395327128216, "standard_deviation_score": 0.5490300724705158, "speed_score": 1.0, "reliability_score": 1.0, "combined_score": 0.8036976635641077, "success_rate": 1.0}, "island": 0}, "artifacts_json": null, "artifact_dir": null, "prompts": {"diff_user": {"system": "You are an expert coder helping to improve programs through evolution.", "user": "# Current Program Information\n- Current performance metrics: - runs_successfully: 1.0000\n- value_score: 0.9880\n- distance_score: 0.7089\n- overall_score: 0.9607\n- standard_deviation_score: 0.5490\n- speed_score: 1.0000\n- reliability_score: 1.0000\n- combined_score: 0.8037\n- success_rate: 1.0000\n- Areas identified for improvement: - Consider simplifying the code to improve readability and maintainability\n- Metrics showing regression: value_score, distance_score, overall_score, standard_deviation_score, combined_score. Consider reverting or revising recent changes in these areas.\n\n\n\n# Program Evolution History\n## Previous Attempts\n\n### Attempt 3\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9990, overall_score: 0.9999, standard_deviation_score: 0.9994, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9994, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 2\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9992, overall_score: 0.9999, standard_deviation_score: 0.9994, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9995, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n\n### Attempt 1\n- Changes: Unknown changes\n- Performance: runs_successfully: 1.0000, value_score: 0.9997, distance_score: 0.9992, overall_score: 0.9999, standard_deviation_score: 0.9995, speed_score: 1.0000, reliability_score: 1.0000, combined_score: 0.9995, success_rate: 1.0000\n- Outcome: Improvement in all metrics\n\n## Top Performing Programs\n\n### Program 1 (Score: 0.9997)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using vectorized sampling\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, low, high), np.clip(y, low, high)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(low, high, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9992), Performs well on overall_score (0.9999), Performs well on standard_deviation_score (0.9995), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9995), Performs well on success_rate (1.0000)\n\n\n### Program 2 (Score: 0.9997)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    Hybrid search algorithm balancing global exploration and local exploitation.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (70%) and exploitation (30%)\n        if _ > 0 and np.random.random() < 0.3:  # Local exploitation\n            step_size = 0.1 * (1 - _/iterations)  # Decreasing step size\n            x, y = best_x + np.random.normal(0, step_size), best_y + np.random.normal(0, step_size)\n            x, y = np.clip([x, y], bounds[0], bounds[1])  # Keep within bounds\n        else:  # Global exploration\n            x, y = np.random.uniform(bounds[0], bounds[1], size=2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9992), Performs well on overall_score (0.9999), Performs well on standard_deviation_score (0.9994), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9995), Performs well on success_rate (1.0000)\n\n\n### Program 3 (Score: 0.9997)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability and performance\n    low, high = bounds\n    \n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(low, high, size=2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Balance exploration (70%) and exploitation (30%) with initial exploration phase\n        if _ > 0 and np.random.random() < 0.3:  # Local exploitation (after first iteration)\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip([x, y], low, high)  # Keep within bounds\n        else:  # Global exploration\n            x, y = np.random.uniform(low, high, size=2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Performs well on runs_successfully (1.0000), Performs well on value_score (0.9997), Performs well on distance_score (0.9990), Performs well on overall_score (0.9999), Performs well on standard_deviation_score (0.9994), Performs well on speed_score (1.0000), Performs well on reliability_score (1.0000), Performs well on combined_score (0.9994), Performs well on success_rate (1.0000)\n\n\n\n\n## Diverse Programs\n\n### Program D1 (Score: 0.9997)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n\n### Program D2 (Score: 0.9997)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations: int = 1000, bounds: tuple[float, float] = (-5, 5)) -> tuple[float, float, float]:\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    min_bound, max_bound = bounds\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nKey features: Alternative approach to runs_successfully, Alternative approach to value_score\n\n## Inspiration Programs\n\nThese programs represent diverse approaches and creative solutions that may inspire new ideas:\n\n### Inspiration 1 (Score: 0.9997, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using vectorized sampling\n    low, high = bounds\n    best_x, best_y = np.random.uniform(low, high, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - _/iterations)\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, low, high), np.clip(y, low, high)\n        else:  # 70% global exploration\n            x, y = np.random.uniform(low, high, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 8 lines with 16 lines, Excellent runs_successfully (1.000), Excellent value_score (1.000)\n\n\n### Inspiration 2 (Score: 0.9629, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm for function minimization.\n    \n    This algorithm explores the search space by randomly sampling points\n    and keeping track of the best minimum found.\n\n    Args:\n        iterations: Number of iterations to run (default: 1000)\n        bounds: Bounds for the search space as a tuple (min, max) (default: (-5, 5))\n\n    Returns:\n        Tuple containing (best_x, best_y, best_value) where best_value is the\n        minimum function value found at coordinates (best_x, best_y)\n    \"\"\"\n    # Initialize with a random point using vectorized generation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Generate candidate solution with vectorized operation\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.975), Excellent overall_score (0.986)\n\n\n### Inspiration 3 (Score: 0.9592, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point using vectorized operation\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search with vectorized operation\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Modification: Change 1: Replace 3 lines with 2 lines\nChange 2: Replace 3 lines with 2 lines, Excellent runs_successfully (1.000), Excellent value_score (0.971)\n\n\n### Inspiration 4 (Score: 0.9650, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    # Generate initial point with single uniform distribution call\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        # Generate candidate point with single uniform distribution call\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.975), Excellent overall_score (0.986)\n\n\n### Inspiration 5 (Score: 0.9858, Type: High-Performer)\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    A simple random search algorithm that often gets stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(bounds[0], bounds[1], 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for _ in range(iterations):\n        # Simple random search\n        x, y = np.random.uniform(bounds[0], bounds[1], 2)\n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n            \n            # Local search refinement\n            for _ in range(10):\n                x_local = best_x + np.random.normal(0, 0.1)\n                y_local = best_y + np.random.normal(0, 0.1)\n                # Keep within bounds\n                x_local = np.clip(x_local, bounds[0], bounds[1])\n                y_local = np.clip(y_local, bounds[0], bounds[1])\n                \n                value_local = evaluate_function(x_local, y_local)\n                if value_local < best_value:\n                    best_value = value_local\n                    best_x, best_y = x_local, y_local\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\nUnique approach: Excellent runs_successfully (1.000), Excellent value_score (0.996), Excellent distance_score (0.952)\n\n\n\n# Current Program\n```python\n# EVOLVE-BLOCK-START\n\"\"\"Function minimization example for OpenEvolve\"\"\"\nimport numpy as np\n\n\ndef search_algorithm(iterations=1000, bounds=(-5, 5)):\n    \"\"\"\n    An adaptive search algorithm that balances exploration and exploitation.\n    \n    Combines local search around promising solutions with global exploration\n    to avoid getting stuck in local minima.\n\n    Args:\n        iterations: Number of iterations to run\n        bounds: Bounds for the search space (min, max)\n\n    Returns:\n        Tuple of (best_x, best_y, best_value)\n    \"\"\"\n    # Unpack bounds for readability\n    min_bound, max_bound = bounds\n    \n    # Initialize with a random point\n    best_x, best_y = np.random.uniform(min_bound, max_bound, 2)\n    best_value = evaluate_function(best_x, best_y)\n\n    for iteration in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if iteration > 0 and np.random.random() < 0.3:  # 30% local search around best\n            # Decreasing step size for convergence\n            step_size = 0.1 * (1 - iteration/iterations)\n            # Generate and clip values in one vectorized operation\n            x, y = np.clip(\n                [best_x + np.random.normal(0, step_size), \n                 best_y + np.random.normal(0, step_size)],\n                min_bound, max_bound\n            )\n        else:  # 70% global exploration\n            x, y = np.random.uniform(min_bound, max_bound, 2)\n            \n        value = evaluate_function(x, y)\n\n        if value < best_value:\n            best_value = value\n            best_x, best_y = x, y\n\n    return best_x, best_y, best_value\n\n\n# EVOLVE-BLOCK-END\n\n\n# This part remains fixed (not evolved)\ndef evaluate_function(x, y):\n    \"\"\"The complex function we're trying to minimize\"\"\"\n    return np.sin(x) * np.cos(y) + np.sin(x * y) + (x**2 + y**2) / 20\n\n\ndef run_search():\n    x, y, value = search_algorithm()\n    return x, y, value\n\n\nif __name__ == \"__main__\":\n    x, y, value = run_search()\n    print(f\"Found minimum at ({x}, {y}) with value {value}\")\n\n```\n\n# Task\nSuggest improvements to the program that will lead to better performance on the specified metrics.\n\nYou MUST use the exact SEARCH/REPLACE diff format shown below to indicate changes:\n\n<<<<<<< SEARCH\n# Original code to find and replace (must match exactly)\n=======\n# New replacement code\n>>>>>>> REPLACE\n\nExample of valid diff format:\n<<<<<<< SEARCH\nfor i in range(m):\n    for j in range(p):\n        for k in range(n):\n            C[i, j] += A[i, k] * B[k, j]\n=======\n# Reorder loops for better memory access pattern\nfor i in range(m):\n    for k in range(n):\n        for j in range(p):\n            C[i, j] += A[i, k] * B[k, j]\n>>>>>>> REPLACE\n\nYou can suggest multiple changes. Each SEARCH section must exactly match code in the current program.\nBe thoughtful about your changes and explain your reasoning thoroughly.\n\nIMPORTANT: Do not rewrite the entire program - focus on targeted improvements.\n", "responses": ["# Suggested Improvements\n\nBased on the analysis, the current program has regressed in key metrics compared to previous high-performing versions. The primary issue appears to be in the vectorized clipping implementation, which may be limiting search effectiveness.\n\n## 1. Fix Local Search Implementation\n<<<<<<< SEARCH\n            # Generate and clip values in one vectorized operation\n            x, y = np.clip(\n                [best_x + np.random.normal(0, step_size), \n                 best_y + np.random.normal(0, step_size)],\n                min_bound, max_bound\n            )\n=======\n            x = best_x + np.random.normal(0, step_size)\n            y = best_y + np.random.normal(0, step_size)\n            x, y = np.clip(x, min_bound, max_bound), np.clip(y, min_bound, max_bound)\n>>>>>>> REPLACE\n\nThis reverts to the separate clipping approach used in the top-performing programs (Program 1, 2, 3) which demonstrated superior value_score and distance_score. The vectorized approach may have been limiting the algorithm's ability to properly explore around promising solutions.\n\n## 2. Simplify Loop Variable\n<<<<<<< SEARCH\n    for iteration in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if iteration > 0 and np.random.random() < 0.3:  # 30% local search around best\n=======\n    for _ in range(iterations):\n        # Adaptive search: balance exploration and exploitation\n        if _ > 0 and np.random.random() < 0.3:  # 30% local search around best\n>>>>>>> REPLACE\n\nThis simplifies the loop variable back to the conventional `_` used in all top-performing programs, improving consistency and readability while maintaining the same functionality.\n\nThese changes should help restore the program's performance to previous levels seen in Program 1-3 by reintroducing the local search behavior that contributed to their strong value_score and distance_score metrics. The code remains simple while maintaining the adaptive balance between exploration and exploitation that worked well in earlier versions."]}}}